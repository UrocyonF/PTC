
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08008658  08008658  00009658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a70  08008a70  00009a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a78  08008a78  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a78  08008a78  00009a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a7c  08008a7c  00009a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008a80  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1dc  2**0
                  CONTENTS
 10 .bss          000002d0  200001dc  200001dc  0000a1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004ac  200004ac  0000a1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000feda  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022cc  00000000  00000000  0001a0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  0001c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b65  00000000  00000000  0001d258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f045  00000000  00000000  0001ddbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ddd  00000000  00000000  0003ce02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9e96  00000000  00000000  0004ebdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108a75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cc0  00000000  00000000  00108ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008640 	.word	0x08008640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008640 	.word	0x08008640

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fde2 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f838 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f974 	bl	8000ea0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb8:	f000 f942 	bl	8000e40 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000bbc:	f000 f910 	bl	8000de0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000bc0:	f000 f888 	bl	8000cd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

    HAL_UART_Receive_IT(&huart1, uart1_buffer, 1); // Prepare UART1 reception
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4912      	ldr	r1, [pc, #72]	@ (8000c10 <main+0x68>)
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <main+0x6c>)
 8000bca:	f003 fede 	bl	800498a <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, uart2_buffer, 1); // Prepare UART2 reception
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4911      	ldr	r1, [pc, #68]	@ (8000c18 <main+0x70>)
 8000bd2:	4812      	ldr	r0, [pc, #72]	@ (8000c1c <main+0x74>)
 8000bd4:	f003 fed9 	bl	800498a <HAL_UART_Receive_IT>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Prepare PWM for turret servo motor
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <main+0x78>)
 8000bdc:	f002 fe7a 	bl	80038d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Prepare PWM for LED servo motor
 8000be0:	2104      	movs	r1, #4
 8000be2:	480f      	ldr	r0, [pc, #60]	@ (8000c20 <main+0x78>)
 8000be4:	f002 fe76 	bl	80038d4 <HAL_TIM_PWM_Start>
		}
		HAL_Delay(40);
		*/

        // Start test process (turn 90°, go forward 20 cm, look left then right then forward and display the distance from the US sensor)
    	step_turn_right();
 8000be8:	f000 fb1a 	bl	8001220 <step_turn_right>
        HAL_Delay(1000);
 8000bec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf0:	f000 fe26 	bl	8001840 <HAL_Delay>

    	step_turn_left();
 8000bf4:	f000 fb22 	bl	800123c <step_turn_left>
        HAL_Delay(1000);
 8000bf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bfc:	f000 fe20 	bl	8001840 <HAL_Delay>

        step_move_forward();
 8000c00:	f000 fb2a 	bl	8001258 <step_move_forward>
        HAL_Delay(1000);
 8000c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c08:	f000 fe1a 	bl	8001840 <HAL_Delay>
    	step_turn_right();
 8000c0c:	bf00      	nop
 8000c0e:	e7eb      	b.n	8000be8 <main+0x40>
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000244 	.word	0x20000244
 8000c18:	20000004 	.word	0x20000004
 8000c1c:	200002cc 	.word	0x200002cc
 8000c20:	200001f8 	.word	0x200001f8

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09e      	sub	sp, #120	@ 0x78
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c2e:	2228      	movs	r2, #40	@ 0x28
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f005 fde1 	bl	80067fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	223c      	movs	r2, #60	@ 0x3c
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f005 fdd3 	bl	80067fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c54:	2302      	movs	r3, #2
 8000c56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	2302      	movs	r3, #2
 8000c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c64:	2300      	movs	r3, #0
 8000c66:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c68:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8000c6c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 f952 	bl	8001f1c <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c7e:	f000 faf9 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2302      	movs	r3, #2
 8000c88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 f97a 	bl	8002f98 <HAL_RCC_ClockConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000caa:	f000 fae3 	bl	8001274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fba1 	bl	8003404 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000cc8:	f000 fad4 	bl	8001274 <Error_Handler>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3778      	adds	r7, #120	@ 0x78
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	@ 0x38
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d06:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d08:	4a34      	ldr	r2, [pc, #208]	@ (8000ddc <MX_TIM3_Init+0x108>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000d0c:	4b32      	ldr	r3, [pc, #200]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d0e:	222f      	movs	r2, #47	@ 0x2f
 8000d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000d18:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d1a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d2c:	482a      	ldr	r0, [pc, #168]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d2e:	f002 fd19 	bl	8003764 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d38:	f000 fa9c 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4823      	ldr	r0, [pc, #140]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d4a:	f002 ffd7 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d54:	f000 fa8e 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d58:	481f      	ldr	r0, [pc, #124]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d5a:	f002 fd5a 	bl	8003812 <HAL_TIM_PWM_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d64:	f000 fa86 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4818      	ldr	r0, [pc, #96]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000d78:	f003 fcb0 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d82:	f000 fa77 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d86:	2360      	movs	r3, #96	@ 0x60
 8000d88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2400;
 8000d8a:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000da0:	f002 fe98 	bl	8003ad4 <HAL_TIM_PWM_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000daa:	f000 fa63 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	2208      	movs	r2, #8
 8000db6:	4619      	mov	r1, r3
 8000db8:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000dba:	f002 fe8b 	bl	8003ad4 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000dc4:	f000 fa56 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <MX_TIM3_Init+0x104>)
 8000dca:	f000 fa9d 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	3738      	adds	r7, #56	@ 0x38
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001f8 	.word	0x200001f8
 8000ddc:	40000400 	.word	0x40000400

08000de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de4:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000de6:	4a15      	ldr	r2, [pc, #84]	@ (8000e3c <MX_USART1_UART_Init+0x5c>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000dea:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000dec:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e24:	f003 fcda 	bl	80047dc <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e2e:	f000 fa21 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000244 	.word	0x20000244
 8000e3c:	40013800 	.word	0x40013800

08000e40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	@ (8000e9c <MX_USART2_UART_Init+0x5c>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e4c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <MX_USART2_UART_Init+0x58>)
 8000e84:	f003 fcaa 	bl	80047dc <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f000 f9f1 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200002cc 	.word	0x200002cc
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	@ 0x30
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb6:	4b80      	ldr	r3, [pc, #512]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a7f      	ldr	r2, [pc, #508]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000ebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b7a      	ldr	r3, [pc, #488]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a79      	ldr	r2, [pc, #484]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000ed4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b77      	ldr	r3, [pc, #476]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	4b74      	ldr	r3, [pc, #464]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a73      	ldr	r2, [pc, #460]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ef0:	6153      	str	r3, [r2, #20]
 8000ef2:	4b71      	ldr	r3, [pc, #452]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b6e      	ldr	r3, [pc, #440]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a6d      	ldr	r2, [pc, #436]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b6b      	ldr	r3, [pc, #428]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b68      	ldr	r3, [pc, #416]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a67      	ldr	r2, [pc, #412]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b65      	ldr	r3, [pc, #404]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	4b62      	ldr	r3, [pc, #392]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a61      	ldr	r2, [pc, #388]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80010b8 <MX_GPIO_Init+0x218>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f46:	2200      	movs	r2, #0
 8000f48:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000f4c:	485b      	ldr	r0, [pc, #364]	@ (80010bc <MX_GPIO_Init+0x21c>)
 8000f4e:	f000 ffb5 	bl	8001ebc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_PIN_US_OUT_GPIO_Port, GPIO_PIN_US_OUT_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	485a      	ldr	r0, [pc, #360]	@ (80010c0 <MX_GPIO_Init+0x220>)
 8000f58:	f000 ffb0 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2108      	movs	r1, #8
 8000f60:	4858      	ldr	r0, [pc, #352]	@ (80010c4 <MX_GPIO_Init+0x224>)
 8000f62:	f000 ffab 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f66:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000f6a:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	484f      	ldr	r0, [pc, #316]	@ (80010bc <MX_GPIO_Init+0x21c>)
 8000f80:	f000 fe0a 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000f84:	2333      	movs	r3, #51	@ 0x33
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f88:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4848      	ldr	r0, [pc, #288]	@ (80010bc <MX_GPIO_Init+0x21c>)
 8000f9a:	f000 fdfd 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1_Pin;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_PIN_1_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4845      	ldr	r0, [pc, #276]	@ (80010c8 <MX_GPIO_Init+0x228>)
 8000fb2:	f000 fdf1 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2_Pin;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_PIN_2_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	483f      	ldr	r0, [pc, #252]	@ (80010c8 <MX_GPIO_Init+0x228>)
 8000fca:	f000 fde5 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe4:	f000 fdd8 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000fe8:	23e0      	movs	r3, #224	@ 0xe0
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001006:	f000 fdc7 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_US_OUT_Pin;
 800100a:	2302      	movs	r3, #2
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001012:	2302      	movs	r3, #2
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001016:	2301      	movs	r3, #1
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_PIN_US_OUT_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4827      	ldr	r0, [pc, #156]	@ (80010c0 <MX_GPIO_Init+0x220>)
 8001022:	f000 fdb9 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_US_IN_Pin;
 8001026:	2304      	movs	r3, #4
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800102a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_PIN_US_IN_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4821      	ldr	r0, [pc, #132]	@ (80010c0 <MX_GPIO_Init+0x220>)
 800103c:	f000 fdac 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001040:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001052:	230e      	movs	r3, #14
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001060:	f000 fd9a 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3_Pin;
 8001064:	2308      	movs	r3, #8
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_PIN_3_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <MX_GPIO_Init+0x224>)
 800107c:	f000 fd8c 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001080:	23c0      	movs	r3, #192	@ 0xc0
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001084:	2312      	movs	r3, #18
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001090:	2304      	movs	r3, #4
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <MX_GPIO_Init+0x220>)
 800109c:	f000 fd7c 	bl	8001b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2008      	movs	r0, #8
 80010a6:	f000 fcca 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80010aa:	2008      	movs	r0, #8
 80010ac:	f000 fce3 	bl	8001a76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b0:	bf00      	nop
 80010b2:	3730      	adds	r7, #48	@ 0x30
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48001000 	.word	0x48001000
 80010c0:	48000400 	.word	0x48000400
 80010c4:	48000c00 	.word	0x48000c00
 80010c8:	48000800 	.word	0x48000800

080010cc <move_forward_slow>:

/* USER CODE BEGIN 4 */

/* Send a command to the robot to move forward slowly */
void move_forward_slow(void) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
    uint8_t go_forward[13] = "mogo 1:7 2:7\r";
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <move_forward_slow+0x24>)
 80010d4:	463c      	mov	r4, r7
 80010d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d8:	c407      	stmia	r4!, {r0, r1, r2}
 80010da:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, go_forward, sizeof(go_forward), 50);
 80010dc:	4639      	mov	r1, r7
 80010de:	2332      	movs	r3, #50	@ 0x32
 80010e0:	220d      	movs	r2, #13
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <move_forward_slow+0x28>)
 80010e4:	f003 fbc8 	bl	8004878 <HAL_UART_Transmit>
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	08008658 	.word	0x08008658
 80010f4:	20000244 	.word	0x20000244

080010f8 <turn_left>:
    uint8_t go_backward[17] = "mogo 1:-15 2:-15\r";
    HAL_UART_Transmit(&huart1, go_backward, sizeof(go_backward), 50);
}

/* Send a command to the robot to turn left forward */
void turn_left(void) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
    uint8_t go_left[16] = "mogo 1:-12 2:12\r";
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <turn_left+0x24>)
 8001100:	463c      	mov	r4, r7
 8001102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart1, go_left, sizeof(go_left), 50);
 8001108:	4639      	mov	r1, r7
 800110a:	2332      	movs	r3, #50	@ 0x32
 800110c:	2210      	movs	r2, #16
 800110e:	4804      	ldr	r0, [pc, #16]	@ (8001120 <turn_left+0x28>)
 8001110:	f003 fbb2 	bl	8004878 <HAL_UART_Transmit>
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	0800869c 	.word	0x0800869c
 8001120:	20000244 	.word	0x20000244

08001124 <turn_right>:
/* Send a command to the robot to turn right forward */
void turn_right(void) {
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
    uint8_t go_right[16] = "mogo 1:12 2:-12\r";
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <turn_right+0x24>)
 800112c:	463c      	mov	r4, r7
 800112e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart1, go_right, sizeof(go_right), 50);
 8001134:	4639      	mov	r1, r7
 8001136:	2332      	movs	r3, #50	@ 0x32
 8001138:	2210      	movs	r2, #16
 800113a:	4804      	ldr	r0, [pc, #16]	@ (800114c <turn_right+0x28>)
 800113c:	f003 fb9c 	bl	8004878 <HAL_UART_Transmit>
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	080086ac 	.word	0x080086ac
 800114c:	20000244 	.word	0x20000244

08001150 <move_stop>:

/* Send a command to the robot to stop moving */
void move_stop(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
    uint8_t stop[5] = "stop\r";
 8001156:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <move_stop+0x28>)
 8001158:	463b      	mov	r3, r7
 800115a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115e:	6018      	str	r0, [r3, #0]
 8001160:	3304      	adds	r3, #4
 8001162:	7019      	strb	r1, [r3, #0]
    HAL_UART_Transmit(&huart1, stop, sizeof(stop), 50);
 8001164:	4639      	mov	r1, r7
 8001166:	2332      	movs	r3, #50	@ 0x32
 8001168:	2205      	movs	r2, #5
 800116a:	4804      	ldr	r0, [pc, #16]	@ (800117c <move_stop+0x2c>)
 800116c:	f003 fb84 	bl	8004878 <HAL_UART_Transmit>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	080086bc 	.word	0x080086bc
 800117c:	20000244 	.word	0x20000244

08001180 <HAL_GPIO_EXTI_Callback>:
    // Calculate the distance in cm
    float distance_cm = pulse_duration / 58.0f;
    return distance_cm;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    if (GPIO_Pin == GPIO_PIN_US_IN_Pin) {
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2b04      	cmp	r3, #4
 800118e:	d107      	bne.n	80011a0 <HAL_GPIO_EXTI_Callback+0x20>
        us_sensor_echo_value = HAL_GPIO_ReadPin(GPIO_PIN_US_IN_GPIO_Port, GPIO_PIN_US_IN_Pin);
 8001190:	2104      	movs	r1, #4
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001194:	f000 fe7a 	bl	8001e8c <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x2c>)
 800119e:	701a      	strb	r2, [r3, #0]
    }
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	48000400 	.word	0x48000400
 80011ac:	20000354 	.word	0x20000354

080011b0 <HAL_UART_RxCpltCallback>:

/* Callback function for UART reception */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    UNUSED(huart);

    if (huart->Instance == USART2) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <HAL_UART_RxCpltCallback+0x58>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10b      	bne.n	80011da <HAL_UART_RxCpltCallback+0x2a>
        HAL_UART_Transmit(&huart1, uart2_buffer, 1, 50);
 80011c2:	2332      	movs	r3, #50	@ 0x32
 80011c4:	2201      	movs	r2, #1
 80011c6:	4911      	ldr	r1, [pc, #68]	@ (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011c8:	4811      	ldr	r0, [pc, #68]	@ (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011ca:	f003 fb55 	bl	8004878 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	490e      	ldr	r1, [pc, #56]	@ (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011d2:	4810      	ldr	r0, [pc, #64]	@ (8001214 <HAL_UART_RxCpltCallback+0x64>)
 80011d4:	f003 fbd9 	bl	800498a <HAL_UART_Receive_IT>
        HAL_UART_Transmit(&huart2, uart1_buffer, 1, 50);
        HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
    } else {
        Error_Handler();
    }
}
 80011d8:	e012      	b.n	8001200 <HAL_UART_RxCpltCallback+0x50>
    } else if (huart->Instance == USART1) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <HAL_UART_RxCpltCallback+0x68>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d10b      	bne.n	80011fc <HAL_UART_RxCpltCallback+0x4c>
        HAL_UART_Transmit(&huart2, uart1_buffer, 1, 50);
 80011e4:	2332      	movs	r3, #50	@ 0x32
 80011e6:	2201      	movs	r2, #1
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <HAL_UART_RxCpltCallback+0x6c>)
 80011ea:	480a      	ldr	r0, [pc, #40]	@ (8001214 <HAL_UART_RxCpltCallback+0x64>)
 80011ec:	f003 fb44 	bl	8004878 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	490a      	ldr	r1, [pc, #40]	@ (800121c <HAL_UART_RxCpltCallback+0x6c>)
 80011f4:	4806      	ldr	r0, [pc, #24]	@ (8001210 <HAL_UART_RxCpltCallback+0x60>)
 80011f6:	f003 fbc8 	bl	800498a <HAL_UART_Receive_IT>
}
 80011fa:	e001      	b.n	8001200 <HAL_UART_RxCpltCallback+0x50>
        Error_Handler();
 80011fc:	f000 f83a 	bl	8001274 <Error_Handler>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40004400 	.word	0x40004400
 800120c:	20000004 	.word	0x20000004
 8001210:	20000244 	.word	0x20000244
 8001214:	200002cc 	.word	0x200002cc
 8001218:	40013800 	.word	0x40013800
 800121c:	20000000 	.word	0x20000000

08001220 <step_turn_right>:
    }
    HAL_Delay(5);
    return distance;
}

void step_turn_right(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    move_stop();
 8001224:	f7ff ff94 	bl	8001150 <move_stop>
    turn_right();
 8001228:	f7ff ff7c 	bl	8001124 <turn_right>
    HAL_Delay(900);
 800122c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001230:	f000 fb06 	bl	8001840 <HAL_Delay>
    move_stop();
 8001234:	f7ff ff8c 	bl	8001150 <move_stop>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <step_turn_left>:

void step_turn_left(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    move_stop();
 8001240:	f7ff ff86 	bl	8001150 <move_stop>
    turn_left();
 8001244:	f7ff ff58 	bl	80010f8 <turn_left>
    HAL_Delay(880);
 8001248:	f44f 705c 	mov.w	r0, #880	@ 0x370
 800124c:	f000 faf8 	bl	8001840 <HAL_Delay>
    move_stop();
 8001250:	f7ff ff7e 	bl	8001150 <move_stop>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <step_move_forward>:

void step_move_forward(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    move_stop();
 800125c:	f7ff ff78 	bl	8001150 <move_stop>
    move_forward_slow();
 8001260:	f7ff ff34 	bl	80010cc <move_forward_slow>
    HAL_Delay(1650);
 8001264:	f240 6072 	movw	r0, #1650	@ 0x672
 8001268:	f000 faea 	bl	8001840 <HAL_Delay>
    move_stop();
 800126c:	f7ff ff70 	bl	8001150 <move_stop>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <Error_Handler+0x8>

08001280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_MspInit+0x44>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_MspInit+0x44>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6193      	str	r3, [r2, #24]
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_MspInit+0x44>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_MspInit+0x44>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012b6:	2007      	movs	r0, #7
 80012b8:	f000 fbb6 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <HAL_TIM_Base_MspInit+0x38>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10b      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_TIM_Base_MspInit+0x3c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <HAL_TIM_Base_MspInit+0x3c>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_TIM_Base_MspInit+0x3c>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40000400 	.word	0x40000400
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1f      	ldr	r2, [pc, #124]	@ (80013a4 <HAL_TIM_MspPostInit+0x9c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d137      	bne.n	800139a <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <HAL_TIM_MspPostInit+0xa0>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a1e      	ldr	r2, [pc, #120]	@ (80013a8 <HAL_TIM_MspPostInit+0xa0>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <HAL_TIM_MspPostInit+0xa0>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_TIM_MspPostInit+0xa0>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_TIM_MspPostInit+0xa0>)
 8001348:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_TIM_MspPostInit+0xa0>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800136a:	2302      	movs	r3, #2
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <HAL_TIM_MspPostInit+0xa4>)
 8001376:	f000 fc0f 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800137a:	2340      	movs	r3, #64	@ 0x40
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800138a:	2302      	movs	r3, #2
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <HAL_TIM_MspPostInit+0xa8>)
 8001396:	f000 fbff 	bl	8001b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40000400 	.word	0x40000400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000400 	.word	0x48000400
 80013b0:	48000800 	.word	0x48000800

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a3e      	ldr	r2, [pc, #248]	@ (80014cc <HAL_UART_MspInit+0x118>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d140      	bne.n	8001458 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d6:	4b3e      	ldr	r3, [pc, #248]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b3b      	ldr	r3, [pc, #236]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a37      	ldr	r2, [pc, #220]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 80013f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013f8:	6153      	str	r3, [r2, #20]
 80013fa:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001406:	2310      	movs	r3, #16
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140a:	2312      	movs	r3, #18
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001416:	2307      	movs	r3, #7
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	482c      	ldr	r0, [pc, #176]	@ (80014d4 <HAL_UART_MspInit+0x120>)
 8001422:	f000 fbb9 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001426:	2320      	movs	r3, #32
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001436:	2307      	movs	r3, #7
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4824      	ldr	r0, [pc, #144]	@ (80014d4 <HAL_UART_MspInit+0x120>)
 8001442:	f000 fba9 	bl	8001b98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2025      	movs	r0, #37	@ 0x25
 800144c:	f000 faf7 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001450:	2025      	movs	r0, #37	@ 0x25
 8001452:	f000 fb10 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001456:	e035      	b.n	80014c4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1e      	ldr	r2, [pc, #120]	@ (80014d8 <HAL_UART_MspInit+0x124>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d130      	bne.n	80014c4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001462:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 8001468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4a14      	ldr	r2, [pc, #80]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 8001480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001484:	6153      	str	r3, [r2, #20]
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_UART_MspInit+0x11c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001492:	230c      	movs	r3, #12
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a2:	2307      	movs	r3, #7
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b0:	f000 fb72 	bl	8001b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2026      	movs	r0, #38	@ 0x26
 80014ba:	f000 fac0 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014be:	2026      	movs	r0, #38	@ 0x26
 80014c0:	f000 fad9 	bl	8001a76 <HAL_NVIC_EnableIRQ>
}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	@ 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48000800 	.word	0x48000800
 80014d8:	40004400 	.word	0x40004400

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f965 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}

0800153a <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_US_IN_Pin);
 800153e:	2004      	movs	r0, #4
 8001540:	f000 fcd4 	bl	8001eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <USART1_IRQHandler+0x10>)
 800154e:	f003 fa61 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000244 	.word	0x20000244

0800155c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <USART2_IRQHandler+0x10>)
 8001562:	f003 fa57 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002cc 	.word	0x200002cc

08001570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_kill>:

int _kill(int pid, int sig)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158a:	f005 f989 	bl	80068a0 <__errno>
 800158e:	4603      	mov	r3, r0
 8001590:	2216      	movs	r2, #22
 8001592:	601a      	str	r2, [r3, #0]
  return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_exit>:

void _exit (int status)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffe7 	bl	8001580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b2:	bf00      	nop
 80015b4:	e7fd      	b.n	80015b2 <_exit+0x12>

080015b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e00a      	b.n	80015de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c8:	f3af 8000 	nop.w
 80015cc:	4601      	mov	r1, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60ba      	str	r2, [r7, #8]
 80015d4:	b2ca      	uxtb	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dbf0      	blt.n	80015c8 <_read+0x12>
  }

  return len;
 80015e6:	687b      	ldr	r3, [r7, #4]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e009      	b.n	8001616 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	dbf1      	blt.n	8001602 <_write+0x12>
  }
  return len;
 800161e:	687b      	ldr	r3, [r7, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_close>:

int _close(int file)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001650:	605a      	str	r2, [r3, #4]
  return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_isatty>:

int _isatty(int file)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c0:	f005 f8ee 	bl	80068a0 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <_sbrk+0x64>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000a000 	.word	0x2000a000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	20000358 	.word	0x20000358
 80016f8:	200004b0 	.word	0x200004b0

080016fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <SystemInit+0x20>)
 8001702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <SystemInit+0x20>)
 8001708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800170c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001724:	f7ff ffea 	bl	80016fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopForever+0x6>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopForever+0xe>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopForever+0x16>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f005 f8ad 	bl	80068ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001752:	f7ff fa29 	bl	8000ba8 <main>

08001756 <LoopForever>:

LoopForever:
    b LoopForever
 8001756:	e7fe      	b.n	8001756 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001758:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001764:	08008a80 	.word	0x08008a80
  ldr r2, =_sbss
 8001768:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800176c:	200004ac 	.word	0x200004ac

08001770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_2_IRQHandler>
	...

08001774 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_Init+0x28>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_Init+0x28>)
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f94f 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fd76 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f967 	bl	8001a92 <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 f92f 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000010 	.word	0x20000010
 80017fc:	2000000c 	.word	0x2000000c

08001800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000010 	.word	0x20000010
 8001824:	2000035c 	.word	0x2000035c

08001828 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;  
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000035c 	.word	0x2000035c

08001840 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff ffee 	bl	8001828 <HAL_GetTick>
 800184c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d005      	beq.n	8001866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_Delay+0x44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001866:	bf00      	nop
 8001868:	f7ff ffde 	bl	8001828 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d8f7      	bhi.n	8001868 <HAL_Delay+0x28>
  {
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000010 	.word	0x20000010

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ba:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60d3      	str	r3, [r2, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0b      	blt.n	8001916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4907      	ldr	r1, [pc, #28]	@ (8001924 <__NVIC_EnableIRQ+0x38>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	@ (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	@ (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	@ 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff8e 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff29 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff3e 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff8e 	bl	800197c <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5d 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff31 	bl	80018ec <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa2 	bl	80019e4 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d008      	beq.n	8001ace <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e020      	b.n	8001b10 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 020e 	bic.w	r2, r2, #14
 8001adc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d005      	beq.n	8001b3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2204      	movs	r2, #4
 8001b36:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e027      	b.n	8001b8e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 020e 	bic.w	r2, r2, #14
 8001b4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b66:	2101      	movs	r1, #1
 8001b68:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
    } 
  }
  return status;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	e154      	b.n	8001e52 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8146 	beq.w	8001e4c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d005      	beq.n	8001bd8 <HAL_GPIO_Init+0x40>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d130      	bne.n	8001c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 0201 	and.w	r2, r3, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d017      	beq.n	8001c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d123      	bne.n	8001cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0203 	and.w	r2, r3, #3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80a0 	beq.w	8001e4c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0c:	4b58      	ldr	r3, [pc, #352]	@ (8001e70 <HAL_GPIO_Init+0x2d8>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a57      	ldr	r2, [pc, #348]	@ (8001e70 <HAL_GPIO_Init+0x2d8>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b55      	ldr	r3, [pc, #340]	@ (8001e70 <HAL_GPIO_Init+0x2d8>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d24:	4a53      	ldr	r2, [pc, #332]	@ (8001e74 <HAL_GPIO_Init+0x2dc>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d4e:	d019      	beq.n	8001d84 <HAL_GPIO_Init+0x1ec>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a49      	ldr	r2, [pc, #292]	@ (8001e78 <HAL_GPIO_Init+0x2e0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1e8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a48      	ldr	r2, [pc, #288]	@ (8001e7c <HAL_GPIO_Init+0x2e4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1e4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a47      	ldr	r2, [pc, #284]	@ (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1e0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a46      	ldr	r2, [pc, #280]	@ (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1dc>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e008      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d74:	2305      	movs	r3, #5
 8001d76:	e006      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e004      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d84:	2300      	movs	r3, #0
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	f002 0203 	and.w	r2, r2, #3
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	4093      	lsls	r3, r2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d96:	4937      	ldr	r1, [pc, #220]	@ (8001e74 <HAL_GPIO_Init+0x2dc>)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da4:	4b38      	ldr	r3, [pc, #224]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dce:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001df2:	4a25      	ldr	r2, [pc, #148]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df8:	4b23      	ldr	r3, [pc, #140]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e46:	4a10      	ldr	r2, [pc, #64]	@ (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f47f aea3 	bne.w	8001ba8 <HAL_GPIO_Init+0x10>
  }
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	48000400 	.word	0x48000400
 8001e7c:	48000800 	.word	0x48000800
 8001e80:	48000c00 	.word	0x48000c00
 8001e84:	48001000 	.word	0x48001000
 8001e88:	40010400 	.word	0x40010400

08001e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e001      	b.n	8001eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d006      	beq.n	8001f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f02:	4a05      	ldr	r2, [pc, #20]	@ (8001f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f938 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40010400 	.word	0x40010400

08001f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f2c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f001 b823 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 817d 	beq.w	8002252 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f58:	4bbc      	ldr	r3, [pc, #752]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d00c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f64:	4bb9      	ldr	r3, [pc, #740]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d15c      	bne.n	800202a <HAL_RCC_OscConfig+0x10e>
 8001f70:	4bb6      	ldr	r3, [pc, #728]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f7c:	d155      	bne.n	800202a <HAL_RCC_OscConfig+0x10e>
 8001f7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f82:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x94>
 8001faa:	4ba8      	ldr	r3, [pc, #672]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e015      	b.n	8001fdc <HAL_RCC_OscConfig+0xc0>
 8001fb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001fc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fc8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001fcc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001fd8:	4b9c      	ldr	r3, [pc, #624]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fe0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001fe4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001fe8:	fa92 f2a2 	rbit	r2, r2
 8001fec:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ff0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	f042 0220 	orr.w	r2, r2, #32
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f002 021f 	and.w	r2, r2, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 811f 	beq.w	8002250 <HAL_RCC_OscConfig+0x334>
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 8116 	bne.w	8002250 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	f000 bfaf 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x12e>
 800203c:	4b83      	ldr	r3, [pc, #524]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a82      	ldr	r2, [pc, #520]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e036      	b.n	80020b8 <HAL_RCC_OscConfig+0x19c>
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x158>
 800205a:	4b7c      	ldr	r3, [pc, #496]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7b      	ldr	r2, [pc, #492]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8002060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b79      	ldr	r3, [pc, #484]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a78      	ldr	r2, [pc, #480]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e021      	b.n	80020b8 <HAL_RCC_OscConfig+0x19c>
 8002074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002078:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x184>
 8002086:	4b71      	ldr	r3, [pc, #452]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a70      	ldr	r2, [pc, #448]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b6e      	ldr	r3, [pc, #440]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6d      	ldr	r2, [pc, #436]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x19c>
 80020a0:	4b6a      	ldr	r3, [pc, #424]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a69      	ldr	r2, [pc, #420]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b67      	ldr	r3, [pc, #412]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a66      	ldr	r2, [pc, #408]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b8:	4b64      	ldr	r3, [pc, #400]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	f023 020f 	bic.w	r2, r3, #15
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	495f      	ldr	r1, [pc, #380]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d059      	beq.n	8002196 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fba1 	bl	8001828 <HAL_GetTick>
 80020e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fb9c 	bl	8001828 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b64      	cmp	r3, #100	@ 0x64
 80020fa:	d902      	bls.n	8002102 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	f000 bf43 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>
 8002102:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002106:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002116:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_RCC_OscConfig+0x218>
 800212e:	4b47      	ldr	r3, [pc, #284]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e015      	b.n	8002160 <HAL_RCC_OscConfig+0x244>
 8002134:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002138:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002148:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800214c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002150:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800215c:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002164:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002168:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002174:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f042 0220 	orr.w	r2, r2, #32
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ab      	beq.n	80020ec <HAL_RCC_OscConfig+0x1d0>
 8002194:	e05d      	b.n	8002252 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff fb47 	bl	8001828 <HAL_GetTick>
 800219a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fb42 	bl	8001828 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b64      	cmp	r3, #100	@ 0x64
 80021ae:	d902      	bls.n	80021b6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	f000 bee9 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>
 80021b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80021ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d102      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2cc>
 80021e2:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	e015      	b.n	8002214 <HAL_RCC_OscConfig+0x2f8>
 80021e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80021fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002200:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002204:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002210:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <HAL_RCC_OscConfig+0x330>)
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002218:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800221c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002220:	fa92 f2a2 	rbit	r2, r2
 8002224:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002228:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800222c:	fab2 f282 	clz	r2, r2
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	f042 0220 	orr.w	r2, r2, #32
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	f002 021f 	and.w	r2, r2, #31
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ab      	bne.n	80021a0 <HAL_RCC_OscConfig+0x284>
 8002248:	e003      	b.n	8002252 <HAL_RCC_OscConfig+0x336>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 817d 	beq.w	8002562 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002268:	4ba6      	ldr	r3, [pc, #664]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00b      	beq.n	800228c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002274:	4ba3      	ldr	r3, [pc, #652]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d172      	bne.n	8002366 <HAL_RCC_OscConfig+0x44a>
 8002280:	4ba0      	ldr	r3, [pc, #640]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d16c      	bne.n	8002366 <HAL_RCC_OscConfig+0x44a>
 800228c:	2302      	movs	r3, #2
 800228e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800229e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d102      	bne.n	80022bc <HAL_RCC_OscConfig+0x3a0>
 80022b6:	4b93      	ldr	r3, [pc, #588]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	e013      	b.n	80022e4 <HAL_RCC_OscConfig+0x3c8>
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80022d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80022e0:	4b88      	ldr	r3, [pc, #544]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	2202      	movs	r2, #2
 80022e6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80022ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80022ee:	fa92 f2a2 	rbit	r2, r2
 80022f2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80022f6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0220 	orr.w	r2, r2, #32
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCC_OscConfig+0x410>
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d002      	beq.n	800232c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f000 be2e 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b75      	ldr	r3, [pc, #468]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	21f8      	movs	r1, #248	@ 0xf8
 8002342:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800234a:	fa91 f1a1 	rbit	r1, r1
 800234e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002352:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002356:	fab1 f181 	clz	r1, r1
 800235a:	b2c9      	uxtb	r1, r1
 800235c:	408b      	lsls	r3, r1
 800235e:	4969      	ldr	r1, [pc, #420]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002364:	e0fd      	b.n	8002562 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8088 	beq.w	8002488 <HAL_RCC_OscConfig+0x56c>
 8002378:	2301      	movs	r3, #1
 800237a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800238a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002398:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	461a      	mov	r2, r3
 80023a0:	2301      	movs	r3, #1
 80023a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fa40 	bl	8001828 <HAL_GetTick>
 80023a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ae:	f7ff fa3b 	bl	8001828 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d902      	bls.n	80023c4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	f000 bde2 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80023d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4d8>
 80023ee:	4b45      	ldr	r3, [pc, #276]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	e013      	b.n	800241c <HAL_RCC_OscConfig+0x500>
 80023f4:	2302      	movs	r3, #2
 80023f6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002406:	2302      	movs	r3, #2
 8002408:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800240c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002418:	4b3a      	ldr	r3, [pc, #232]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	2202      	movs	r2, #2
 800241e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002422:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002426:	fa92 f2a2 	rbit	r2, r2
 800242a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800242e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002432:	fab2 f282 	clz	r2, r2
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f042 0220 	orr.w	r2, r2, #32
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	f002 021f 	and.w	r2, r2, #31
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f202 	lsl.w	r2, r1, r2
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0af      	beq.n	80023ae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	21f8      	movs	r1, #248	@ 0xf8
 8002464:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800246c:	fa91 f1a1 	rbit	r1, r1
 8002470:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002474:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002478:	fab1 f181 	clz	r1, r1
 800247c:	b2c9      	uxtb	r1, r1
 800247e:	408b      	lsls	r3, r1
 8002480:	4920      	ldr	r1, [pc, #128]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
 8002486:	e06c      	b.n	8002562 <HAL_RCC_OscConfig+0x646>
 8002488:	2301      	movs	r3, #1
 800248a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800249a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	461a      	mov	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff f9b8 	bl	8001828 <HAL_GetTick>
 80024b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f9b3 	bl	8001828 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d902      	bls.n	80024d4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	f000 bd5a 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>
 80024d4:	2302      	movs	r3, #2
 80024d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80024e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d104      	bne.n	8002508 <HAL_RCC_OscConfig+0x5ec>
 80024fe:	4b01      	ldr	r3, [pc, #4]	@ (8002504 <HAL_RCC_OscConfig+0x5e8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e015      	b.n	8002530 <HAL_RCC_OscConfig+0x614>
 8002504:	40021000 	.word	0x40021000
 8002508:	2302      	movs	r3, #2
 800250a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800251a:	2302      	movs	r3, #2
 800251c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002520:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800252c:	4bc8      	ldr	r3, [pc, #800]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	2202      	movs	r2, #2
 8002532:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002536:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800253a:	fa92 f2a2 	rbit	r2, r2
 800253e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002542:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f042 0220 	orr.w	r2, r2, #32
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f002 021f 	and.w	r2, r2, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ad      	bne.n	80024be <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002566:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8110 	beq.w	8002798 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d079      	beq.n	800267c <HAL_RCC_OscConfig+0x760>
 8002588:	2301      	movs	r3, #1
 800258a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800259a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	4bab      	ldr	r3, [pc, #684]	@ (8002854 <HAL_RCC_OscConfig+0x938>)
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	461a      	mov	r2, r3
 80025ae:	2301      	movs	r3, #1
 80025b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7ff f939 	bl	8001828 <HAL_GetTick>
 80025b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025bc:	f7ff f934 	bl	8001828 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d902      	bls.n	80025d2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	f000 bcdb 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80025e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002610:	2202      	movs	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800262a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262c:	4b88      	ldr	r3, [pc, #544]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 800262e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002638:	2102      	movs	r1, #2
 800263a:	6019      	str	r1, [r3, #0]
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f1a3 	rbit	r1, r3
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002652:	6019      	str	r1, [r3, #0]
  return result;
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0a0      	beq.n	80025bc <HAL_RCC_OscConfig+0x6a0>
 800267a:	e08d      	b.n	8002798 <HAL_RCC_OscConfig+0x87c>
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800269e:	601a      	str	r2, [r3, #0]
  return result;
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <HAL_RCC_OscConfig+0x938>)
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7ff f8b3 	bl	8001828 <HAL_GetTick>
 80026c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c8:	f7ff f8ae 	bl	8001828 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d902      	bls.n	80026de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	f000 bc55 	b.w	8002f88 <HAL_RCC_OscConfig+0x106c>
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80026e6:	2202      	movs	r2, #2
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800270a:	2202      	movs	r2, #2
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002712:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800272e:	2202      	movs	r2, #2
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002736:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002748:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274a:	4b41      	ldr	r3, [pc, #260]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 800274c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800274e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002752:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002756:	2102      	movs	r1, #2
 8002758:	6019      	str	r1, [r3, #0]
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f1a3 	rbit	r1, r3
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002770:	6019      	str	r1, [r3, #0]
  return result;
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d197      	bne.n	80026c8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 81a1 	beq.w	8002af0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b4:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	4a22      	ldr	r2, [pc, #136]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	61d3      	str	r3, [r2, #28]
 80027cc:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80027e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_RCC_OscConfig+0x93c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11a      	bne.n	8002830 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <HAL_RCC_OscConfig+0x93c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a16      	ldr	r2, [pc, #88]	@ (8002858 <HAL_RCC_OscConfig+0x93c>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002804:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7ff f80f 	bl	8001828 <HAL_GetTick>
 800280a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280e:	e009      	b.n	8002824 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002810:	f7ff f80a 	bl	8001828 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b64      	cmp	r3, #100	@ 0x64
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e3b1      	b.n	8002f88 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_RCC_OscConfig+0x93c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ef      	beq.n	8002810 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002834:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10d      	bne.n	800285c <HAL_RCC_OscConfig+0x940>
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a02      	ldr	r2, [pc, #8]	@ (8002850 <HAL_RCC_OscConfig+0x934>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	e03c      	b.n	80028c8 <HAL_RCC_OscConfig+0x9ac>
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	10908120 	.word	0x10908120
 8002858:	40007000 	.word	0x40007000
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10c      	bne.n	8002886 <HAL_RCC_OscConfig+0x96a>
 800286c:	4bc1      	ldr	r3, [pc, #772]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4ac0      	ldr	r2, [pc, #768]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	6213      	str	r3, [r2, #32]
 8002878:	4bbe      	ldr	r3, [pc, #760]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4abd      	ldr	r2, [pc, #756]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 800287e:	f023 0304 	bic.w	r3, r3, #4
 8002882:	6213      	str	r3, [r2, #32]
 8002884:	e020      	b.n	80028c8 <HAL_RCC_OscConfig+0x9ac>
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x994>
 8002896:	4bb7      	ldr	r3, [pc, #732]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4ab6      	ldr	r2, [pc, #728]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6213      	str	r3, [r2, #32]
 80028a2:	4bb4      	ldr	r3, [pc, #720]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4ab3      	ldr	r2, [pc, #716]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6213      	str	r3, [r2, #32]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0x9ac>
 80028b0:	4bb0      	ldr	r3, [pc, #704]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4aaf      	ldr	r2, [pc, #700]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	4bad      	ldr	r3, [pc, #692]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4aac      	ldr	r2, [pc, #688]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 80028c2:	f023 0304 	bic.w	r3, r3, #4
 80028c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8081 	beq.w	80029dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7fe ffa5 	bl	8001828 <HAL_GetTick>
 80028de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe ffa0 	bl	8001828 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e345      	b.n	8002f88 <HAL_RCC_OscConfig+0x106c>
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002904:	2202      	movs	r2, #2
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002928:	2202      	movs	r2, #2
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fa93 f2a3 	rbit	r2, r3
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002942:	601a      	str	r2, [r3, #0]
  return result;
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800294c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d102      	bne.n	8002968 <HAL_RCC_OscConfig+0xa4c>
 8002962:	4b84      	ldr	r3, [pc, #528]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	e013      	b.n	8002990 <HAL_RCC_OscConfig+0xa74>
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002970:	2202      	movs	r2, #2
 8002972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002978:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	fa93 f2a3 	rbit	r2, r3
 8002982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002986:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	4b79      	ldr	r3, [pc, #484]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002994:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002998:	2102      	movs	r1, #2
 800299a:	6011      	str	r1, [r2, #0]
 800299c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	fa92 f1a2 	rbit	r1, r2
 80029aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80029b2:	6011      	str	r1, [r2, #0]
  return result;
 80029b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	fab2 f282 	clz	r2, r2
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f002 021f 	and.w	r2, r2, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d084      	beq.n	80028e4 <HAL_RCC_OscConfig+0x9c8>
 80029da:	e07f      	b.n	8002adc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe ff24 	bl	8001828 <HAL_GetTick>
 80029e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	e00b      	b.n	80029fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe ff1f 	bl	8001828 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e2c4      	b.n	8002f88 <HAL_RCC_OscConfig+0x106c>
 80029fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a02:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a06:	2202      	movs	r2, #2
 8002a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	fa93 f2a3 	rbit	r2, r3
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a26:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a40:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002a44:	601a      	str	r2, [r3, #0]
  return result;
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002a4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d102      	bne.n	8002a6a <HAL_RCC_OscConfig+0xb4e>
 8002a64:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	e013      	b.n	8002a92 <HAL_RCC_OscConfig+0xb76>
 8002a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a72:	2202      	movs	r2, #2
 8002a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4b39      	ldr	r3, [pc, #228]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a96:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	6011      	str	r1, [r2, #0]
 8002a9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aa2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	fa92 f1a2 	rbit	r1, r2
 8002aac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ab0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ab4:	6011      	str	r1, [r2, #0]
  return result;
 8002ab6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	fab2 f282 	clz	r2, r2
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f002 021f 	and.w	r2, r2, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d184      	bne.n	80029e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002adc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae4:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	4a22      	ldr	r2, [pc, #136]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8242 	beq.w	8002f86 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b02:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <HAL_RCC_OscConfig+0xc58>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	f000 8213 	beq.w	8002f36 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	f040 8162 	bne.w	8002de6 <HAL_RCC_OscConfig+0xeca>
 8002b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b26:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002b2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b34:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b46:	601a      	str	r2, [r3, #0]
  return result;
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b50:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	461a      	mov	r2, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fe5e 	bl	8001828 <HAL_GetTick>
 8002b6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b70:	e00c      	b.n	8002b8c <HAL_RCC_OscConfig+0xc70>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fe56 	bl	8001828 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1fd      	b.n	8002f88 <HAL_RCC_OscConfig+0x106c>
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002b94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002bb0:	601a      	str	r2, [r3, #0]
  return result;
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002bba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_OscConfig+0xcba>
 8002bd0:	4bb0      	ldr	r3, [pc, #704]	@ (8002e94 <HAL_RCC_OscConfig+0xf78>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	e027      	b.n	8002c26 <HAL_RCC_OscConfig+0xd0a>
 8002bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bda:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002bde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	fa93 f2a3 	rbit	r2, r3
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	4b9c      	ldr	r3, [pc, #624]	@ (8002e94 <HAL_RCC_OscConfig+0xf78>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c2a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002c2e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c32:	6011      	str	r1, [r2, #0]
 8002c34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c38:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	fa92 f1a2 	rbit	r1, r2
 8002c42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c46:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c4a:	6011      	str	r1, [r2, #0]
  return result;
 8002c4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c50:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	fab2 f282 	clz	r2, r2
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	f042 0220 	orr.w	r2, r2, #32
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	f002 021f 	and.w	r2, r2, #31
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d182      	bne.n	8002b78 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c72:	4b88      	ldr	r3, [pc, #544]	@ (8002e94 <HAL_RCC_OscConfig+0xf78>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	430b      	orrs	r3, r1
 8002c94:	497f      	ldr	r1, [pc, #508]	@ (8002e94 <HAL_RCC_OscConfig+0xf78>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ca2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002cbe:	601a      	str	r2, [r3, #0]
  return result;
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002cc8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cd4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2301      	movs	r3, #1
 8002cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fda2 	bl	8001828 <HAL_GetTick>
 8002ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce8:	e009      	b.n	8002cfe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fe fd9d 	bl	8001828 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e144      	b.n	8002f88 <HAL_RCC_OscConfig+0x106c>
 8002cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d02:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d22:	601a      	str	r2, [r3, #0]
  return result;
 8002d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d28:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_RCC_OscConfig+0xe2c>
 8002d42:	4b54      	ldr	r3, [pc, #336]	@ (8002e94 <HAL_RCC_OscConfig+0xf78>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	e027      	b.n	8002d98 <HAL_RCC_OscConfig+0xe7c>
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002d76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	4b3f      	ldr	r3, [pc, #252]	@ (8002e94 <HAL_RCC_OscConfig+0xf78>)
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d9c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002da0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002da4:	6011      	str	r1, [r2, #0]
 8002da6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002daa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	fa92 f1a2 	rbit	r1, r2
 8002db4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002db8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002dbc:	6011      	str	r1, [r2, #0]
  return result;
 8002dbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dc2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f042 0220 	orr.w	r2, r2, #32
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f002 021f 	and.w	r2, r2, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d082      	beq.n	8002cea <HAL_RCC_OscConfig+0xdce>
 8002de4:	e0cf      	b.n	8002f86 <HAL_RCC_OscConfig+0x106a>
 8002de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002dee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	fa93 f2a3 	rbit	r2, r3
 8002e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e06:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e0a:	601a      	str	r2, [r3, #0]
  return result;
 8002e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e10:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fcfc 	bl	8001828 <HAL_GetTick>
 8002e30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e009      	b.n	8002e4a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe fcf7 	bl	8001828 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e09e      	b.n	8002f88 <HAL_RCC_OscConfig+0x106c>
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002e52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	fa93 f2a3 	rbit	r2, r3
 8002e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002e6e:	601a      	str	r2, [r3, #0]
  return result;
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002e78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d104      	bne.n	8002e98 <HAL_RCC_OscConfig+0xf7c>
 8002e8e:	4b01      	ldr	r3, [pc, #4]	@ (8002e94 <HAL_RCC_OscConfig+0xf78>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	e029      	b.n	8002ee8 <HAL_RCC_OscConfig+0xfcc>
 8002e94:	40021000 	.word	0x40021000
 8002e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ea0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	fa93 f2a3 	rbit	r2, r3
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ec6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	fa93 f2a3 	rbit	r2, r3
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <HAL_RCC_OscConfig+0x1078>)
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ef0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ef4:	6011      	str	r1, [r2, #0]
 8002ef6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002efa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	fa92 f1a2 	rbit	r1, r2
 8002f04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f0c:	6011      	str	r1, [r2, #0]
  return result;
 8002f0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f12:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	fab2 f282 	clz	r2, r2
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	f042 0220 	orr.w	r2, r2, #32
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f002 021f 	and.w	r2, r2, #31
 8002f28:	2101      	movs	r1, #1
 8002f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d180      	bne.n	8002e36 <HAL_RCC_OscConfig+0xf1a>
 8002f34:	e027      	b.n	8002f86 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e01e      	b.n	8002f88 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f4a:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <HAL_RCC_OscConfig+0x1078>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002f56:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d10b      	bne.n	8002f82 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002f6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b09e      	sub	sp, #120	@ 0x78
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e162      	b.n	8003276 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b90      	ldr	r3, [pc, #576]	@ (80031f4 <HAL_RCC_ClockConfig+0x25c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d910      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80031f4 <HAL_RCC_ClockConfig+0x25c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 0207 	bic.w	r2, r3, #7
 8002fc6:	498b      	ldr	r1, [pc, #556]	@ (80031f4 <HAL_RCC_ClockConfig+0x25c>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b89      	ldr	r3, [pc, #548]	@ (80031f4 <HAL_RCC_ClockConfig+0x25c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e14a      	b.n	8003276 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b82      	ldr	r3, [pc, #520]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	497f      	ldr	r1, [pc, #508]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80dc 	beq.w	80031c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d13c      	bne.n	800308e <HAL_RCC_ClockConfig+0xf6>
 8003014:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003018:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003022:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d102      	bne.n	800303e <HAL_RCC_ClockConfig+0xa6>
 8003038:	4b6f      	ldr	r3, [pc, #444]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	e00f      	b.n	800305e <HAL_RCC_ClockConfig+0xc6>
 800303e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003042:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	667b      	str	r3, [r7, #100]	@ 0x64
 800304c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003050:	663b      	str	r3, [r7, #96]	@ 0x60
 8003052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800305a:	4b67      	ldr	r3, [pc, #412]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003062:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003064:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003066:	fa92 f2a2 	rbit	r2, r2
 800306a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800306c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800306e:	fab2 f282 	clz	r2, r2
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	f042 0220 	orr.w	r2, r2, #32
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	f002 021f 	and.w	r2, r2, #31
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f202 	lsl.w	r2, r1, r2
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d17b      	bne.n	8003182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0f3      	b.n	8003276 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d13c      	bne.n	8003110 <HAL_RCC_ClockConfig+0x178>
 8003096:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800309a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80030a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d102      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x128>
 80030ba:	4b4f      	ldr	r3, [pc, #316]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	e00f      	b.n	80030e0 <HAL_RCC_ClockConfig+0x148>
 80030c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80030d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030dc:	4b46      	ldr	r3, [pc, #280]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80030e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030e8:	fa92 f2a2 	rbit	r2, r2
 80030ec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80030ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030f0:	fab2 f282 	clz	r2, r2
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	f042 0220 	orr.w	r2, r2, #32
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	f002 021f 	and.w	r2, r2, #31
 8003100:	2101      	movs	r1, #1
 8003102:	fa01 f202 	lsl.w	r2, r1, r2
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d13a      	bne.n	8003182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0b2      	b.n	8003276 <HAL_RCC_ClockConfig+0x2de>
 8003110:	2302      	movs	r3, #2
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d102      	bne.n	8003138 <HAL_RCC_ClockConfig+0x1a0>
 8003132:	4b31      	ldr	r3, [pc, #196]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	e00d      	b.n	8003154 <HAL_RCC_ClockConfig+0x1bc>
 8003138:	2302      	movs	r3, #2
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
 8003144:	2302      	movs	r3, #2
 8003146:	623b      	str	r3, [r7, #32]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	2202      	movs	r2, #2
 8003156:	61ba      	str	r2, [r7, #24]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	fa92 f2a2 	rbit	r2, r2
 800315e:	617a      	str	r2, [r7, #20]
  return result;
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	fab2 f282 	clz	r2, r2
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	f042 0220 	orr.w	r2, r2, #32
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	f002 021f 	and.w	r2, r2, #31
 8003172:	2101      	movs	r1, #1
 8003174:	fa01 f202 	lsl.w	r2, r1, r2
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e079      	b.n	8003276 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b1d      	ldr	r3, [pc, #116]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	491a      	ldr	r1, [pc, #104]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fe fb48 	bl	8001828 <HAL_GetTick>
 8003198:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fe fb44 	bl	8001828 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e061      	b.n	8003276 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_RCC_ClockConfig+0x260>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_ClockConfig+0x25c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d214      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <HAL_RCC_ClockConfig+0x25c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 0207 	bic.w	r2, r3, #7
 80031da:	4906      	ldr	r1, [pc, #24]	@ (80031f4 <HAL_RCC_ClockConfig+0x25c>)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <HAL_RCC_ClockConfig+0x25c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e040      	b.n	8003276 <HAL_RCC_ClockConfig+0x2de>
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <HAL_RCC_ClockConfig+0x2e8>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	491a      	ldr	r1, [pc, #104]	@ (8003280 <HAL_RCC_ClockConfig+0x2e8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003226:	4b16      	ldr	r3, [pc, #88]	@ (8003280 <HAL_RCC_ClockConfig+0x2e8>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4912      	ldr	r1, [pc, #72]	@ (8003280 <HAL_RCC_ClockConfig+0x2e8>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800323a:	f000 f829 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800323e:	4601      	mov	r1, r0
 8003240:	4b0f      	ldr	r3, [pc, #60]	@ (8003280 <HAL_RCC_ClockConfig+0x2e8>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003248:	22f0      	movs	r2, #240	@ 0xf0
 800324a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	fa92 f2a2 	rbit	r2, r2
 8003252:	60fa      	str	r2, [r7, #12]
  return result;
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	fab2 f282 	clz	r2, r2
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	40d3      	lsrs	r3, r2
 800325e:	4a09      	ldr	r2, [pc, #36]	@ (8003284 <HAL_RCC_ClockConfig+0x2ec>)
 8003260:	5cd3      	ldrb	r3, [r2, r3]
 8003262:	fa21 f303 	lsr.w	r3, r1, r3
 8003266:	4a08      	ldr	r2, [pc, #32]	@ (8003288 <HAL_RCC_ClockConfig+0x2f0>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800326a:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HAL_RCC_ClockConfig+0x2f4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fa96 	bl	80017a0 <HAL_InitTick>
  
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3778      	adds	r7, #120	@ 0x78
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	080086c4 	.word	0x080086c4
 8003288:	20000008 	.word	0x20000008
 800328c:	2000000c 	.word	0x2000000c

08003290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	b08b      	sub	sp, #44	@ 0x2c
 8003294:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032aa:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x30>
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x36>
 80032be:	e03c      	b.n	800333a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4b24      	ldr	r3, [pc, #144]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	e03c      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80032cc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80032d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	fa92 f2a2 	rbit	r2, r2
 80032d8:	607a      	str	r2, [r7, #4]
  return result;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	fab2 f282 	clz	r2, r2
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	40d3      	lsrs	r3, r2
 80032e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003358 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032ea:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	220f      	movs	r2, #15
 80032f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	fa92 f2a2 	rbit	r2, r2
 80032fc:	60fa      	str	r2, [r7, #12]
  return result;
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	fab2 f282 	clz	r2, r2
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	40d3      	lsrs	r3, r2
 8003308:	4a14      	ldr	r2, [pc, #80]	@ (800335c <HAL_RCC_GetSysClockFreq+0xcc>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003318:	4a0e      	ldr	r2, [pc, #56]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xc4>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
 8003328:	e004      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	4a0c      	ldr	r2, [pc, #48]	@ (8003360 <HAL_RCC_GetSysClockFreq+0xd0>)
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003336:	623b      	str	r3, [r7, #32]
      break;
 8003338:	e002      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_RCC_GetSysClockFreq+0xc4>)
 800333c:	623b      	str	r3, [r7, #32]
      break;
 800333e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003340:	6a3b      	ldr	r3, [r7, #32]
}
 8003342:	4618      	mov	r0, r3
 8003344:	372c      	adds	r7, #44	@ 0x2c
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	007a1200 	.word	0x007a1200
 8003358:	080086dc 	.word	0x080086dc
 800335c:	080086ec 	.word	0x080086ec
 8003360:	003d0900 	.word	0x003d0900

08003364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_RCC_GetHCLKFreq+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000008 	.word	0x20000008

0800337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003382:	f7ff ffef 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8003386:	4601      	mov	r1, r0
 8003388:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003390:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003394:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	fa92 f2a2 	rbit	r2, r2
 800339c:	603a      	str	r2, [r7, #0]
  return result;
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	fab2 f282 	clz	r2, r2
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	40d3      	lsrs	r3, r2
 80033a8:	4a04      	ldr	r2, [pc, #16]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	080086d4 	.word	0x080086d4

080033c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80033c6:	f7ff ffcd 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033ca:	4601      	mov	r1, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80033d4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80033d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	fa92 f2a2 	rbit	r2, r2
 80033e0:	603a      	str	r2, [r7, #0]
  return result;
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	40d3      	lsrs	r3, r2
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80033f4:	4618      	mov	r0, r3
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	080086d4 	.word	0x080086d4

08003404 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b092      	sub	sp, #72	@ 0x48
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80d4 	beq.w	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003428:	4b4e      	ldr	r3, [pc, #312]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10e      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003434:	4b4b      	ldr	r3, [pc, #300]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4a4a      	ldr	r2, [pc, #296]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343e:	61d3      	str	r3, [r2, #28]
 8003440:	4b48      	ldr	r3, [pc, #288]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b45      	ldr	r3, [pc, #276]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345e:	4b42      	ldr	r3, [pc, #264]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a41      	ldr	r2, [pc, #260]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003468:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fe f9dd 	bl	8001828 <HAL_GetTick>
 800346e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	e008      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003472:	f7fe f9d9 	bl	8001828 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b64      	cmp	r3, #100	@ 0x64
 800347e:	d901      	bls.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e169      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	4b38      	ldr	r3, [pc, #224]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003490:	4b34      	ldr	r3, [pc, #208]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800349a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8084 	beq.w	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d07c      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	4b26      	ldr	r3, [pc, #152]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	461a      	mov	r2, r3
 80034da:	2301      	movs	r3, #1
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b1d      	ldr	r3, [pc, #116]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	461a      	mov	r2, r3
 80034fe:	2300      	movs	r3, #0
 8003500:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003502:	4a18      	ldr	r2, [pc, #96]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003506:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04b      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe f989 	bl	8001828 <HAL_GetTick>
 8003516:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	e00a      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe f985 	bl	8001828 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e113      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003530:	2302      	movs	r3, #2
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
 800353c:	2302      	movs	r3, #2
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	61fb      	str	r3, [r7, #28]
  return result;
 8003548:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d108      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800355e:	4b01      	ldr	r3, [pc, #4]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	e00d      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003564:	40021000 	.word	0x40021000
 8003568:	40007000 	.word	0x40007000
 800356c:	10908100 	.word	0x10908100
 8003570:	2302      	movs	r3, #2
 8003572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	4b78      	ldr	r3, [pc, #480]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	2202      	movs	r2, #2
 8003582:	613a      	str	r2, [r7, #16]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	fa92 f2a2 	rbit	r2, r2
 800358a:	60fa      	str	r2, [r7, #12]
  return result;
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	fab2 f282 	clz	r2, r2
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f002 021f 	and.w	r2, r2, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f202 	lsl.w	r2, r1, r2
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0b7      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	496a      	ldr	r1, [pc, #424]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b66      	ldr	r3, [pc, #408]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4a65      	ldr	r2, [pc, #404]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035dc:	4b60      	ldr	r3, [pc, #384]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	f023 0203 	bic.w	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	495d      	ldr	r1, [pc, #372]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035fa:	4b59      	ldr	r3, [pc, #356]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4956      	ldr	r1, [pc, #344]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003618:	4b51      	ldr	r3, [pc, #324]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	494e      	ldr	r1, [pc, #312]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003626:	4313      	orrs	r3, r2
 8003628:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003636:	4b4a      	ldr	r3, [pc, #296]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	f023 0210 	bic.w	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4947      	ldr	r1, [pc, #284]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003654:	4b42      	ldr	r3, [pc, #264]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	493f      	ldr	r1, [pc, #252]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003672:	4b3b      	ldr	r3, [pc, #236]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	f023 0220 	bic.w	r2, r3, #32
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4938      	ldr	r1, [pc, #224]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003690:	4b33      	ldr	r3, [pc, #204]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	4930      	ldr	r1, [pc, #192]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	4929      	ldr	r1, [pc, #164]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036cc:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	4921      	ldr	r1, [pc, #132]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	491a      	ldr	r1, [pc, #104]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003708:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	4912      	ldr	r1, [pc, #72]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003726:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	490b      	ldr	r1, [pc, #44]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003734:	4313      	orrs	r3, r2
 8003736:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003744:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	4903      	ldr	r1, [pc, #12]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3748      	adds	r7, #72	@ 0x48
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000

08003764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e049      	b.n	800380a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fd9c 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f000 fb74 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e049      	b.n	80038b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f841 	bl	80038c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f000 fb1d 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_TIM_PWM_Start+0x24>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	e03c      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d109      	bne.n	8003912 <HAL_TIM_PWM_Start+0x3e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e02f      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d109      	bne.n	800392c <HAL_TIM_PWM_Start+0x58>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	e022      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d109      	bne.n	8003946 <HAL_TIM_PWM_Start+0x72>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e015      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b10      	cmp	r3, #16
 800394a:	d109      	bne.n	8003960 <HAL_TIM_PWM_Start+0x8c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e008      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e097      	b.n	8003aaa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0xb6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003988:	e023      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start+0xc6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003998:	e01b      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d104      	bne.n	80039aa <HAL_TIM_PWM_Start+0xd6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039a8:	e013      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start+0xe6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0xf6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039c8:	e003      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fe58 	bl	8004690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a33      	ldr	r2, [pc, #204]	@ (8003ab4 <HAL_TIM_PWM_Start+0x1e0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x13e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a32      	ldr	r2, [pc, #200]	@ (8003ab8 <HAL_TIM_PWM_Start+0x1e4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x13e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a30      	ldr	r2, [pc, #192]	@ (8003abc <HAL_TIM_PWM_Start+0x1e8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x13e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac0 <HAL_TIM_PWM_Start+0x1ec>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x13e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac4 <HAL_TIM_PWM_Start+0x1f0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_PWM_Start+0x142>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_TIM_PWM_Start+0x144>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a20      	ldr	r2, [pc, #128]	@ (8003ab4 <HAL_TIM_PWM_Start+0x1e0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d018      	beq.n	8003a68 <HAL_TIM_PWM_Start+0x194>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3e:	d013      	beq.n	8003a68 <HAL_TIM_PWM_Start+0x194>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a20      	ldr	r2, [pc, #128]	@ (8003ac8 <HAL_TIM_PWM_Start+0x1f4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00e      	beq.n	8003a68 <HAL_TIM_PWM_Start+0x194>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003acc <HAL_TIM_PWM_Start+0x1f8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d009      	beq.n	8003a68 <HAL_TIM_PWM_Start+0x194>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a17      	ldr	r2, [pc, #92]	@ (8003ab8 <HAL_TIM_PWM_Start+0x1e4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_TIM_PWM_Start+0x194>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a16      	ldr	r2, [pc, #88]	@ (8003abc <HAL_TIM_PWM_Start+0x1e8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d115      	bne.n	8003a94 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	4b18      	ldr	r3, [pc, #96]	@ (8003ad0 <HAL_TIM_PWM_Start+0x1fc>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d015      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x1d2>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a80:	d011      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	e008      	b.n	8003aa6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e000      	b.n	8003aa8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40013400 	.word	0x40013400
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	40014400 	.word	0x40014400
 8003ac4:	40014800 	.word	0x40014800
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	00010007 	.word	0x00010007

08003ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e0ff      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b14      	cmp	r3, #20
 8003afe:	f200 80f0 	bhi.w	8003ce2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b02:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b5d 	.word	0x08003b5d
 8003b0c:	08003ce3 	.word	0x08003ce3
 8003b10:	08003ce3 	.word	0x08003ce3
 8003b14:	08003ce3 	.word	0x08003ce3
 8003b18:	08003b9d 	.word	0x08003b9d
 8003b1c:	08003ce3 	.word	0x08003ce3
 8003b20:	08003ce3 	.word	0x08003ce3
 8003b24:	08003ce3 	.word	0x08003ce3
 8003b28:	08003bdf 	.word	0x08003bdf
 8003b2c:	08003ce3 	.word	0x08003ce3
 8003b30:	08003ce3 	.word	0x08003ce3
 8003b34:	08003ce3 	.word	0x08003ce3
 8003b38:	08003c1f 	.word	0x08003c1f
 8003b3c:	08003ce3 	.word	0x08003ce3
 8003b40:	08003ce3 	.word	0x08003ce3
 8003b44:	08003ce3 	.word	0x08003ce3
 8003b48:	08003c61 	.word	0x08003c61
 8003b4c:	08003ce3 	.word	0x08003ce3
 8003b50:	08003ce3 	.word	0x08003ce3
 8003b54:	08003ce3 	.word	0x08003ce3
 8003b58:	08003ca1 	.word	0x08003ca1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fa24 	bl	8003fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0208 	orr.w	r2, r2, #8
 8003b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0204 	bic.w	r2, r2, #4
 8003b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6999      	ldr	r1, [r3, #24]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	619a      	str	r2, [r3, #24]
      break;
 8003b9a:	e0a5      	b.n	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fa94 	bl	80040d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6999      	ldr	r1, [r3, #24]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	021a      	lsls	r2, r3, #8
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	619a      	str	r2, [r3, #24]
      break;
 8003bdc:	e084      	b.n	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fafd 	bl	80041e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0208 	orr.w	r2, r2, #8
 8003bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0204 	bic.w	r2, r2, #4
 8003c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69d9      	ldr	r1, [r3, #28]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	61da      	str	r2, [r3, #28]
      break;
 8003c1c:	e064      	b.n	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fb65 	bl	80042f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69d9      	ldr	r1, [r3, #28]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	021a      	lsls	r2, r3, #8
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	61da      	str	r2, [r3, #28]
      break;
 8003c5e:	e043      	b.n	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fbae 	bl	80043c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0208 	orr.w	r2, r2, #8
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0204 	bic.w	r2, r2, #4
 8003c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c9e:	e023      	b.n	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fbf2 	bl	8004490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	021a      	lsls	r2, r3, #8
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ce0:	e002      	b.n	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop

08003cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIM_ConfigClockSource+0x1c>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e0b6      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x18a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d54:	d03e      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0xd8>
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5a:	f200 8087 	bhi.w	8003e6c <HAL_TIM_ConfigClockSource+0x170>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d62:	f000 8086 	beq.w	8003e72 <HAL_TIM_ConfigClockSource+0x176>
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6a:	d87f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x170>
 8003d6c:	2b70      	cmp	r3, #112	@ 0x70
 8003d6e:	d01a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0xaa>
 8003d70:	2b70      	cmp	r3, #112	@ 0x70
 8003d72:	d87b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x170>
 8003d74:	2b60      	cmp	r3, #96	@ 0x60
 8003d76:	d050      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x11e>
 8003d78:	2b60      	cmp	r3, #96	@ 0x60
 8003d7a:	d877      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x170>
 8003d7c:	2b50      	cmp	r3, #80	@ 0x50
 8003d7e:	d03c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0xfe>
 8003d80:	2b50      	cmp	r3, #80	@ 0x50
 8003d82:	d873      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x170>
 8003d84:	2b40      	cmp	r3, #64	@ 0x40
 8003d86:	d058      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0x13e>
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d86f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x170>
 8003d8c:	2b30      	cmp	r3, #48	@ 0x30
 8003d8e:	d064      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15e>
 8003d90:	2b30      	cmp	r3, #48	@ 0x30
 8003d92:	d86b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x170>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d060      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15e>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d867      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x170>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05c      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15e>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d05a      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15e>
 8003da4:	e062      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db6:	f000 fc4b 	bl	8004650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	609a      	str	r2, [r3, #8]
      break;
 8003dd2:	e04f      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	f000 fc34 	bl	8004650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003df6:	609a      	str	r2, [r3, #8]
      break;
 8003df8:	e03c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	461a      	mov	r2, r3
 8003e08:	f000 fba8 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2150      	movs	r1, #80	@ 0x50
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fc01 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8003e18:	e02c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e26:	461a      	mov	r2, r3
 8003e28:	f000 fbc7 	bl	80045ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2160      	movs	r1, #96	@ 0x60
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fbf1 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8003e38:	e01c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	461a      	mov	r2, r3
 8003e48:	f000 fb88 	bl	800455c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2140      	movs	r1, #64	@ 0x40
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fbe1 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8003e58:	e00c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fbd8 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8003e6a:	e003      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e000      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3c      	ldr	r2, [pc, #240]	@ (8003f94 <TIM_Base_SetConfig+0x104>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00f      	beq.n	8003ec8 <TIM_Base_SetConfig+0x38>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0x38>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a39      	ldr	r2, [pc, #228]	@ (8003f98 <TIM_Base_SetConfig+0x108>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x38>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a38      	ldr	r2, [pc, #224]	@ (8003f9c <TIM_Base_SetConfig+0x10c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x38>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a37      	ldr	r2, [pc, #220]	@ (8003fa0 <TIM_Base_SetConfig+0x110>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2d      	ldr	r2, [pc, #180]	@ (8003f94 <TIM_Base_SetConfig+0x104>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01b      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d017      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <TIM_Base_SetConfig+0x108>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	@ (8003f9c <TIM_Base_SetConfig+0x10c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00f      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a28      	ldr	r2, [pc, #160]	@ (8003fa0 <TIM_Base_SetConfig+0x110>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00b      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a27      	ldr	r2, [pc, #156]	@ (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a26      	ldr	r2, [pc, #152]	@ (8003fa8 <TIM_Base_SetConfig+0x118>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_Base_SetConfig+0x8a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a25      	ldr	r2, [pc, #148]	@ (8003fac <TIM_Base_SetConfig+0x11c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d108      	bne.n	8003f2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a10      	ldr	r2, [pc, #64]	@ (8003f94 <TIM_Base_SetConfig+0x104>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00f      	beq.n	8003f78 <TIM_Base_SetConfig+0xe8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a11      	ldr	r2, [pc, #68]	@ (8003fa0 <TIM_Base_SetConfig+0x110>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00b      	beq.n	8003f78 <TIM_Base_SetConfig+0xe8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a10      	ldr	r2, [pc, #64]	@ (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d007      	beq.n	8003f78 <TIM_Base_SetConfig+0xe8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa8 <TIM_Base_SetConfig+0x118>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_Base_SetConfig+0xe8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a0e      	ldr	r2, [pc, #56]	@ (8003fac <TIM_Base_SetConfig+0x11c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d103      	bne.n	8003f80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	615a      	str	r2, [r3, #20]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40013400 	.word	0x40013400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 0302 	bic.w	r3, r3, #2
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a2c      	ldr	r2, [pc, #176]	@ (80040bc <TIM_OC1_SetConfig+0x10c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00f      	beq.n	8004030 <TIM_OC1_SetConfig+0x80>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a2b      	ldr	r2, [pc, #172]	@ (80040c0 <TIM_OC1_SetConfig+0x110>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_OC1_SetConfig+0x80>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a2a      	ldr	r2, [pc, #168]	@ (80040c4 <TIM_OC1_SetConfig+0x114>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_OC1_SetConfig+0x80>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a29      	ldr	r2, [pc, #164]	@ (80040c8 <TIM_OC1_SetConfig+0x118>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_OC1_SetConfig+0x80>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a28      	ldr	r2, [pc, #160]	@ (80040cc <TIM_OC1_SetConfig+0x11c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10c      	bne.n	800404a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0308 	bic.w	r3, r3, #8
 8004036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f023 0304 	bic.w	r3, r3, #4
 8004048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a1b      	ldr	r2, [pc, #108]	@ (80040bc <TIM_OC1_SetConfig+0x10c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_OC1_SetConfig+0xc2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1a      	ldr	r2, [pc, #104]	@ (80040c0 <TIM_OC1_SetConfig+0x110>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_OC1_SetConfig+0xc2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <TIM_OC1_SetConfig+0x114>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_OC1_SetConfig+0xc2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a18      	ldr	r2, [pc, #96]	@ (80040c8 <TIM_OC1_SetConfig+0x118>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_OC1_SetConfig+0xc2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a17      	ldr	r2, [pc, #92]	@ (80040cc <TIM_OC1_SetConfig+0x11c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d111      	bne.n	8004096 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40013400 	.word	0x40013400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014400 	.word	0x40014400
 80040cc:	40014800 	.word	0x40014800

080040d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0210 	bic.w	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0320 	bic.w	r3, r3, #32
 800411e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a28      	ldr	r2, [pc, #160]	@ (80041d0 <TIM_OC2_SetConfig+0x100>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_OC2_SetConfig+0x6c>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a27      	ldr	r2, [pc, #156]	@ (80041d4 <TIM_OC2_SetConfig+0x104>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d10d      	bne.n	8004158 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a1d      	ldr	r2, [pc, #116]	@ (80041d0 <TIM_OC2_SetConfig+0x100>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00f      	beq.n	8004180 <TIM_OC2_SetConfig+0xb0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a1c      	ldr	r2, [pc, #112]	@ (80041d4 <TIM_OC2_SetConfig+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00b      	beq.n	8004180 <TIM_OC2_SetConfig+0xb0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a1b      	ldr	r2, [pc, #108]	@ (80041d8 <TIM_OC2_SetConfig+0x108>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_OC2_SetConfig+0xb0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a1a      	ldr	r2, [pc, #104]	@ (80041dc <TIM_OC2_SetConfig+0x10c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_OC2_SetConfig+0xb0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a19      	ldr	r2, [pc, #100]	@ (80041e0 <TIM_OC2_SetConfig+0x110>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d113      	bne.n	80041a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004186:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800418e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40013400 	.word	0x40013400
 80041d8:	40014000 	.word	0x40014000
 80041dc:	40014400 	.word	0x40014400
 80041e0:	40014800 	.word	0x40014800

080041e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a27      	ldr	r2, [pc, #156]	@ (80042e0 <TIM_OC3_SetConfig+0xfc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_OC3_SetConfig+0x6a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a26      	ldr	r2, [pc, #152]	@ (80042e4 <TIM_OC3_SetConfig+0x100>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10d      	bne.n	800426a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004268:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1c      	ldr	r2, [pc, #112]	@ (80042e0 <TIM_OC3_SetConfig+0xfc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_OC3_SetConfig+0xae>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1b      	ldr	r2, [pc, #108]	@ (80042e4 <TIM_OC3_SetConfig+0x100>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_OC3_SetConfig+0xae>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a1a      	ldr	r2, [pc, #104]	@ (80042e8 <TIM_OC3_SetConfig+0x104>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_OC3_SetConfig+0xae>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a19      	ldr	r2, [pc, #100]	@ (80042ec <TIM_OC3_SetConfig+0x108>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_OC3_SetConfig+0xae>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a18      	ldr	r2, [pc, #96]	@ (80042f0 <TIM_OC3_SetConfig+0x10c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d113      	bne.n	80042ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	621a      	str	r2, [r3, #32]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40013400 	.word	0x40013400
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800

080042f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <TIM_OC4_SetConfig+0xc0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00f      	beq.n	8004378 <TIM_OC4_SetConfig+0x84>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a17      	ldr	r2, [pc, #92]	@ (80043b8 <TIM_OC4_SetConfig+0xc4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_OC4_SetConfig+0x84>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a16      	ldr	r2, [pc, #88]	@ (80043bc <TIM_OC4_SetConfig+0xc8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_OC4_SetConfig+0x84>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a15      	ldr	r2, [pc, #84]	@ (80043c0 <TIM_OC4_SetConfig+0xcc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC4_SetConfig+0x84>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a14      	ldr	r2, [pc, #80]	@ (80043c4 <TIM_OC4_SetConfig+0xd0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d109      	bne.n	800438c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800437e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40013400 	.word	0x40013400
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800

080043c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800440c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a17      	ldr	r2, [pc, #92]	@ (800447c <TIM_OC5_SetConfig+0xb4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00f      	beq.n	8004442 <TIM_OC5_SetConfig+0x7a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a16      	ldr	r2, [pc, #88]	@ (8004480 <TIM_OC5_SetConfig+0xb8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <TIM_OC5_SetConfig+0x7a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <TIM_OC5_SetConfig+0xbc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <TIM_OC5_SetConfig+0x7a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a14      	ldr	r2, [pc, #80]	@ (8004488 <TIM_OC5_SetConfig+0xc0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_OC5_SetConfig+0x7a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a13      	ldr	r2, [pc, #76]	@ (800448c <TIM_OC5_SetConfig+0xc4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d109      	bne.n	8004456 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40013400 	.word	0x40013400
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800

08004490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	051b      	lsls	r3, r3, #20
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a18      	ldr	r2, [pc, #96]	@ (8004548 <TIM_OC6_SetConfig+0xb8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00f      	beq.n	800450c <TIM_OC6_SetConfig+0x7c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a17      	ldr	r2, [pc, #92]	@ (800454c <TIM_OC6_SetConfig+0xbc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <TIM_OC6_SetConfig+0x7c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <TIM_OC6_SetConfig+0xc0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_OC6_SetConfig+0x7c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a15      	ldr	r2, [pc, #84]	@ (8004554 <TIM_OC6_SetConfig+0xc4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_OC6_SetConfig+0x7c>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <TIM_OC6_SetConfig+0xc8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d109      	bne.n	8004520 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004512:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	029b      	lsls	r3, r3, #10
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40013400 	.word	0x40013400
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800

0800455c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0201 	bic.w	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f023 030a 	bic.w	r3, r3, #10
 8004598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0210 	bic.w	r2, r3, #16
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800466a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	431a      	orrs	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2201      	movs	r2, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	401a      	ands	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1a      	ldr	r2, [r3, #32]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e063      	b.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2b      	ldr	r2, [pc, #172]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d108      	bne.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800472e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004740:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d018      	beq.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d013      	beq.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a18      	ldr	r2, [pc, #96]	@ (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a17      	ldr	r2, [pc, #92]	@ (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a12      	ldr	r2, [pc, #72]	@ (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a13      	ldr	r2, [pc, #76]	@ (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10c      	bne.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40014000 	.word	0x40014000

080047dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e040      	b.n	8004870 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc fdd8 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	@ 0x24
 8004808:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fc00 	bl	8005020 <UART_SetConfig>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e022      	b.n	8004870 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fdc8 	bl	80053c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fe4f 	bl	800550c <UART_CheckIdleState>
 800486e:	4603      	mov	r3, r0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	@ 0x28
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800488c:	2b20      	cmp	r3, #32
 800488e:	d177      	bne.n	8004980 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Transmit+0x24>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e070      	b.n	8004982 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2221      	movs	r2, #33	@ 0x21
 80048ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ae:	f7fc ffbb 	bl	8001828 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048cc:	d108      	bne.n	80048e0 <HAL_UART_Transmit+0x68>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d104      	bne.n	80048e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e003      	b.n	80048e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048e8:	e02f      	b.n	800494a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2180      	movs	r1, #128	@ 0x80
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 feb1 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e03b      	b.n	8004982 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	b292      	uxth	r2, r2
 800491e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	3302      	adds	r3, #2
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e007      	b.n	8004938 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3301      	adds	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1c9      	bne.n	80048ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	2140      	movs	r1, #64	@ 0x40
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fe7b 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e005      	b.n	8004982 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	e000      	b.n	8004982 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004980:	2302      	movs	r3, #2
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b08a      	sub	sp, #40	@ 0x28
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	4613      	mov	r3, r2
 8004996:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d132      	bne.n	8004a08 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_Receive_IT+0x24>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e02b      	b.n	8004a0a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d018      	beq.n	80049f8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	613b      	str	r3, [r7, #16]
   return(result);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	623b      	str	r3, [r7, #32]
 80049e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	69f9      	ldr	r1, [r7, #28]
 80049ea:	6a3a      	ldr	r2, [r7, #32]
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e6      	bne.n	80049c6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	461a      	mov	r2, r3
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fe94 	bl	800572c <UART_Start_Receive_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	e000      	b.n	8004a0a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3728      	adds	r7, #40	@ 0x28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b0ba      	sub	sp, #232	@ 0xe8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004a3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004a42:	4013      	ands	r3, r2
 8004a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d115      	bne.n	8004a7c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00f      	beq.n	8004a7c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 82ab 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
      }
      return;
 8004a7a:	e2a5      	b.n	8004fc8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8117 	beq.w	8004cb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004a96:	4b85      	ldr	r3, [pc, #532]	@ (8004cac <HAL_UART_IRQHandler+0x298>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 810a 	beq.w	8004cb4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d011      	beq.n	8004ad0 <HAL_UART_IRQHandler+0xbc>
 8004aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac6:	f043 0201 	orr.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d011      	beq.n	8004b00 <HAL_UART_IRQHandler+0xec>
 8004adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2202      	movs	r2, #2
 8004aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d011      	beq.n	8004b30 <HAL_UART_IRQHandler+0x11c>
 8004b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00b      	beq.n	8004b30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b26:	f043 0202 	orr.w	r2, r3, #2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d017      	beq.n	8004b6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b62:	f043 0208 	orr.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d012      	beq.n	8004b9e <HAL_UART_IRQHandler+0x18a>
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00c      	beq.n	8004b9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b94:	f043 0220 	orr.w	r2, r3, #32
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8211 	beq.w	8004fcc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b40      	cmp	r3, #64	@ 0x40
 8004be8:	d005      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04f      	beq.n	8004c96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fe4c 	bl	8005894 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c06:	2b40      	cmp	r3, #64	@ 0x40
 8004c08:	d141      	bne.n	8004c8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1d9      	bne.n	8004c0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d013      	beq.n	8004c86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c62:	4a13      	ldr	r2, [pc, #76]	@ (8004cb0 <HAL_UART_IRQHandler+0x29c>)
 8004c64:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fc ff56 	bl	8001b1c <HAL_DMA_Abort_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d017      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c80:	4610      	mov	r0, r2
 8004c82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	e00f      	b.n	8004ca6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f9b4 	bl	8004ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	e00b      	b.n	8004ca6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f9b0 	bl	8004ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c94:	e007      	b.n	8004ca6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f9ac 	bl	8004ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004ca4:	e192      	b.n	8004fcc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca6:	bf00      	nop
    return;
 8004ca8:	e190      	b.n	8004fcc <HAL_UART_IRQHandler+0x5b8>
 8004caa:	bf00      	nop
 8004cac:	04000120 	.word	0x04000120
 8004cb0:	0800595d 	.word	0x0800595d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f040 814b 	bne.w	8004f54 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8144 	beq.w	8004f54 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 813d 	beq.w	8004f54 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2210      	movs	r2, #16
 8004ce0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cec:	2b40      	cmp	r3, #64	@ 0x40
 8004cee:	f040 80b5 	bne.w	8004e5c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8164 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d12:	429a      	cmp	r2, r3
 8004d14:	f080 815c 	bcs.w	8004fd0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	f000 8086 	beq.w	8004e3a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d5c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1da      	bne.n	8004d2e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3308      	adds	r3, #8
 8004d98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d9c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004da0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004da4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e1      	bne.n	8004d78 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004dd8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004de6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e3      	bne.n	8004db4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e0a:	f023 0310 	bic.w	r3, r3, #16
 8004e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e4      	bne.n	8004dfa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fc fe38 	bl	8001aaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f8d7 	bl	8005008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e5a:	e0b9      	b.n	8004fd0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80ab 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80a6 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e4      	bne.n	8004e88 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ee2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e3      	bne.n	8004ebe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0310 	bic.w	r3, r3, #16
 8004f1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	617b      	str	r3, [r7, #20]
   return(result);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e4      	bne.n	8004f0a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f85b 	bl	8005008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f52:	e03f      	b.n	8004fd4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00e      	beq.n	8004f7e <HAL_UART_IRQHandler+0x56a>
 8004f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004f74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fed8 	bl	8005d2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f7c:	e02d      	b.n	8004fda <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00e      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01c      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
    }
    return;
 8004fa6:	e017      	b.n	8004fd8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d012      	beq.n	8004fda <HAL_UART_IRQHandler+0x5c6>
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00c      	beq.n	8004fda <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fce1 	bl	8005988 <UART_EndTransmit_IT>
    return;
 8004fc6:	e008      	b.n	8004fda <HAL_UART_IRQHandler+0x5c6>
      return;
 8004fc8:	bf00      	nop
 8004fca:	e006      	b.n	8004fda <HAL_UART_IRQHandler+0x5c6>
    return;
 8004fcc:	bf00      	nop
 8004fce:	e004      	b.n	8004fda <HAL_UART_IRQHandler+0x5c6>
      return;
 8004fd0:	bf00      	nop
 8004fd2:	e002      	b.n	8004fda <HAL_UART_IRQHandler+0x5c6>
      return;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <HAL_UART_IRQHandler+0x5c6>
    return;
 8004fd8:	bf00      	nop
  }

}
 8004fda:	37e8      	adds	r7, #232	@ 0xe8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800504e:	f023 030c 	bic.w	r3, r3, #12
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	6979      	ldr	r1, [r7, #20]
 8005058:	430b      	orrs	r3, r1
 800505a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4aa7      	ldr	r2, [pc, #668]	@ (8005338 <UART_SetConfig+0x318>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d120      	bne.n	80050e2 <UART_SetConfig+0xc2>
 80050a0:	4ba6      	ldr	r3, [pc, #664]	@ (800533c <UART_SetConfig+0x31c>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d817      	bhi.n	80050dc <UART_SetConfig+0xbc>
 80050ac:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <UART_SetConfig+0x94>)
 80050ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b2:	bf00      	nop
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d7 	.word	0x080050d7
 80050c0:	080050cb 	.word	0x080050cb
 80050c4:	2301      	movs	r3, #1
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e0b5      	b.n	8005236 <UART_SetConfig+0x216>
 80050ca:	2302      	movs	r3, #2
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e0b2      	b.n	8005236 <UART_SetConfig+0x216>
 80050d0:	2304      	movs	r3, #4
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e0af      	b.n	8005236 <UART_SetConfig+0x216>
 80050d6:	2308      	movs	r3, #8
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e0ac      	b.n	8005236 <UART_SetConfig+0x216>
 80050dc:	2310      	movs	r3, #16
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e0a9      	b.n	8005236 <UART_SetConfig+0x216>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a96      	ldr	r2, [pc, #600]	@ (8005340 <UART_SetConfig+0x320>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d124      	bne.n	8005136 <UART_SetConfig+0x116>
 80050ec:	4b93      	ldr	r3, [pc, #588]	@ (800533c <UART_SetConfig+0x31c>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050f8:	d011      	beq.n	800511e <UART_SetConfig+0xfe>
 80050fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050fe:	d817      	bhi.n	8005130 <UART_SetConfig+0x110>
 8005100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005104:	d011      	beq.n	800512a <UART_SetConfig+0x10a>
 8005106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800510a:	d811      	bhi.n	8005130 <UART_SetConfig+0x110>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <UART_SetConfig+0xf8>
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005114:	d006      	beq.n	8005124 <UART_SetConfig+0x104>
 8005116:	e00b      	b.n	8005130 <UART_SetConfig+0x110>
 8005118:	2300      	movs	r3, #0
 800511a:	77fb      	strb	r3, [r7, #31]
 800511c:	e08b      	b.n	8005236 <UART_SetConfig+0x216>
 800511e:	2302      	movs	r3, #2
 8005120:	77fb      	strb	r3, [r7, #31]
 8005122:	e088      	b.n	8005236 <UART_SetConfig+0x216>
 8005124:	2304      	movs	r3, #4
 8005126:	77fb      	strb	r3, [r7, #31]
 8005128:	e085      	b.n	8005236 <UART_SetConfig+0x216>
 800512a:	2308      	movs	r3, #8
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e082      	b.n	8005236 <UART_SetConfig+0x216>
 8005130:	2310      	movs	r3, #16
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e07f      	b.n	8005236 <UART_SetConfig+0x216>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a82      	ldr	r2, [pc, #520]	@ (8005344 <UART_SetConfig+0x324>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d124      	bne.n	800518a <UART_SetConfig+0x16a>
 8005140:	4b7e      	ldr	r3, [pc, #504]	@ (800533c <UART_SetConfig+0x31c>)
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005148:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800514c:	d011      	beq.n	8005172 <UART_SetConfig+0x152>
 800514e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005152:	d817      	bhi.n	8005184 <UART_SetConfig+0x164>
 8005154:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005158:	d011      	beq.n	800517e <UART_SetConfig+0x15e>
 800515a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800515e:	d811      	bhi.n	8005184 <UART_SetConfig+0x164>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <UART_SetConfig+0x14c>
 8005164:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005168:	d006      	beq.n	8005178 <UART_SetConfig+0x158>
 800516a:	e00b      	b.n	8005184 <UART_SetConfig+0x164>
 800516c:	2300      	movs	r3, #0
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e061      	b.n	8005236 <UART_SetConfig+0x216>
 8005172:	2302      	movs	r3, #2
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e05e      	b.n	8005236 <UART_SetConfig+0x216>
 8005178:	2304      	movs	r3, #4
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e05b      	b.n	8005236 <UART_SetConfig+0x216>
 800517e:	2308      	movs	r3, #8
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e058      	b.n	8005236 <UART_SetConfig+0x216>
 8005184:	2310      	movs	r3, #16
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e055      	b.n	8005236 <UART_SetConfig+0x216>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a6e      	ldr	r2, [pc, #440]	@ (8005348 <UART_SetConfig+0x328>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d124      	bne.n	80051de <UART_SetConfig+0x1be>
 8005194:	4b69      	ldr	r3, [pc, #420]	@ (800533c <UART_SetConfig+0x31c>)
 8005196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005198:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800519c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051a0:	d011      	beq.n	80051c6 <UART_SetConfig+0x1a6>
 80051a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051a6:	d817      	bhi.n	80051d8 <UART_SetConfig+0x1b8>
 80051a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051ac:	d011      	beq.n	80051d2 <UART_SetConfig+0x1b2>
 80051ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051b2:	d811      	bhi.n	80051d8 <UART_SetConfig+0x1b8>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <UART_SetConfig+0x1a0>
 80051b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051bc:	d006      	beq.n	80051cc <UART_SetConfig+0x1ac>
 80051be:	e00b      	b.n	80051d8 <UART_SetConfig+0x1b8>
 80051c0:	2300      	movs	r3, #0
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e037      	b.n	8005236 <UART_SetConfig+0x216>
 80051c6:	2302      	movs	r3, #2
 80051c8:	77fb      	strb	r3, [r7, #31]
 80051ca:	e034      	b.n	8005236 <UART_SetConfig+0x216>
 80051cc:	2304      	movs	r3, #4
 80051ce:	77fb      	strb	r3, [r7, #31]
 80051d0:	e031      	b.n	8005236 <UART_SetConfig+0x216>
 80051d2:	2308      	movs	r3, #8
 80051d4:	77fb      	strb	r3, [r7, #31]
 80051d6:	e02e      	b.n	8005236 <UART_SetConfig+0x216>
 80051d8:	2310      	movs	r3, #16
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e02b      	b.n	8005236 <UART_SetConfig+0x216>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a5a      	ldr	r2, [pc, #360]	@ (800534c <UART_SetConfig+0x32c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d124      	bne.n	8005232 <UART_SetConfig+0x212>
 80051e8:	4b54      	ldr	r3, [pc, #336]	@ (800533c <UART_SetConfig+0x31c>)
 80051ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80051f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051f4:	d011      	beq.n	800521a <UART_SetConfig+0x1fa>
 80051f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051fa:	d817      	bhi.n	800522c <UART_SetConfig+0x20c>
 80051fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005200:	d011      	beq.n	8005226 <UART_SetConfig+0x206>
 8005202:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005206:	d811      	bhi.n	800522c <UART_SetConfig+0x20c>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <UART_SetConfig+0x1f4>
 800520c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005210:	d006      	beq.n	8005220 <UART_SetConfig+0x200>
 8005212:	e00b      	b.n	800522c <UART_SetConfig+0x20c>
 8005214:	2300      	movs	r3, #0
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e00d      	b.n	8005236 <UART_SetConfig+0x216>
 800521a:	2302      	movs	r3, #2
 800521c:	77fb      	strb	r3, [r7, #31]
 800521e:	e00a      	b.n	8005236 <UART_SetConfig+0x216>
 8005220:	2304      	movs	r3, #4
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e007      	b.n	8005236 <UART_SetConfig+0x216>
 8005226:	2308      	movs	r3, #8
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e004      	b.n	8005236 <UART_SetConfig+0x216>
 800522c:	2310      	movs	r3, #16
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e001      	b.n	8005236 <UART_SetConfig+0x216>
 8005232:	2310      	movs	r3, #16
 8005234:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800523e:	d15b      	bne.n	80052f8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005240:	7ffb      	ldrb	r3, [r7, #31]
 8005242:	2b08      	cmp	r3, #8
 8005244:	d827      	bhi.n	8005296 <UART_SetConfig+0x276>
 8005246:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <UART_SetConfig+0x22c>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	08005271 	.word	0x08005271
 8005250:	08005279 	.word	0x08005279
 8005254:	08005281 	.word	0x08005281
 8005258:	08005297 	.word	0x08005297
 800525c:	08005287 	.word	0x08005287
 8005260:	08005297 	.word	0x08005297
 8005264:	08005297 	.word	0x08005297
 8005268:	08005297 	.word	0x08005297
 800526c:	0800528f 	.word	0x0800528f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005270:	f7fe f884 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8005274:	61b8      	str	r0, [r7, #24]
        break;
 8005276:	e013      	b.n	80052a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005278:	f7fe f8a2 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 800527c:	61b8      	str	r0, [r7, #24]
        break;
 800527e:	e00f      	b.n	80052a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005280:	4b33      	ldr	r3, [pc, #204]	@ (8005350 <UART_SetConfig+0x330>)
 8005282:	61bb      	str	r3, [r7, #24]
        break;
 8005284:	e00c      	b.n	80052a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005286:	f7fe f803 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800528a:	61b8      	str	r0, [r7, #24]
        break;
 800528c:	e008      	b.n	80052a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005292:	61bb      	str	r3, [r7, #24]
        break;
 8005294:	e004      	b.n	80052a0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	77bb      	strb	r3, [r7, #30]
        break;
 800529e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8082 	beq.w	80053ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	005a      	lsls	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	441a      	add	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b0f      	cmp	r3, #15
 80052c2:	d916      	bls.n	80052f2 <UART_SetConfig+0x2d2>
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ca:	d212      	bcs.n	80052f2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f023 030f 	bic.w	r3, r3, #15
 80052d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	89fb      	ldrh	r3, [r7, #14]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	89fa      	ldrh	r2, [r7, #14]
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	e05c      	b.n	80053ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	77bb      	strb	r3, [r7, #30]
 80052f6:	e059      	b.n	80053ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052f8:	7ffb      	ldrb	r3, [r7, #31]
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d835      	bhi.n	800536a <UART_SetConfig+0x34a>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <UART_SetConfig+0x2e4>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005329 	.word	0x08005329
 8005308:	08005331 	.word	0x08005331
 800530c:	08005355 	.word	0x08005355
 8005310:	0800536b 	.word	0x0800536b
 8005314:	0800535b 	.word	0x0800535b
 8005318:	0800536b 	.word	0x0800536b
 800531c:	0800536b 	.word	0x0800536b
 8005320:	0800536b 	.word	0x0800536b
 8005324:	08005363 	.word	0x08005363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005328:	f7fe f828 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 800532c:	61b8      	str	r0, [r7, #24]
        break;
 800532e:	e021      	b.n	8005374 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005330:	f7fe f846 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8005334:	61b8      	str	r0, [r7, #24]
        break;
 8005336:	e01d      	b.n	8005374 <UART_SetConfig+0x354>
 8005338:	40013800 	.word	0x40013800
 800533c:	40021000 	.word	0x40021000
 8005340:	40004400 	.word	0x40004400
 8005344:	40004800 	.word	0x40004800
 8005348:	40004c00 	.word	0x40004c00
 800534c:	40005000 	.word	0x40005000
 8005350:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <UART_SetConfig+0x3a4>)
 8005356:	61bb      	str	r3, [r7, #24]
        break;
 8005358:	e00c      	b.n	8005374 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7fd ff99 	bl	8003290 <HAL_RCC_GetSysClockFreq>
 800535e:	61b8      	str	r0, [r7, #24]
        break;
 8005360:	e008      	b.n	8005374 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005366:	61bb      	str	r3, [r7, #24]
        break;
 8005368:	e004      	b.n	8005374 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	77bb      	strb	r3, [r7, #30]
        break;
 8005372:	bf00      	nop
    }

    if (pclk != 0U)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d018      	beq.n	80053ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085a      	lsrs	r2, r3, #1
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	441a      	add	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b0f      	cmp	r3, #15
 8005392:	d909      	bls.n	80053a8 <UART_SetConfig+0x388>
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800539a:	d205      	bcs.n	80053a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	e001      	b.n	80053ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	007a1200 	.word	0x007a1200

080053c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01a      	beq.n	80054de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054c6:	d10a      	bne.n	80054de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
  }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b098      	sub	sp, #96	@ 0x60
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800551c:	f7fc f984 	bl	8001828 <HAL_GetTick>
 8005520:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d12e      	bne.n	800558e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005538:	2200      	movs	r2, #0
 800553a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f88c 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d021      	beq.n	800558e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800555e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
 800556a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800556e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e6      	bne.n	800554a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e062      	b.n	8005654 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d149      	bne.n	8005630 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a4:	2200      	movs	r2, #0
 80055a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f856 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d03c      	beq.n	8005630 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	623b      	str	r3, [r7, #32]
   return(result);
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3308      	adds	r3, #8
 80055ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3308      	adds	r3, #8
 8005606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005608:	61fa      	str	r2, [r7, #28]
 800560a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	617b      	str	r3, [r7, #20]
   return(result);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e011      	b.n	8005654 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3758      	adds	r7, #88	@ 0x58
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566c:	e049      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	d045      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005676:	f7fc f8d7 	bl	8001828 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <UART_WaitOnFlagUntilTimeout+0x30>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e048      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d031      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d110      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2208      	movs	r2, #8
 80056b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f8ed 	bl	8005894 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2208      	movs	r2, #8
 80056be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e029      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056dc:	d111      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f8d3 	bl	8005894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e00f      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	429a      	cmp	r2, r3
 800571e:	d0a6      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800572c:	b480      	push	{r7}
 800572e:	b097      	sub	sp, #92	@ 0x5c
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800575e:	d10e      	bne.n	800577e <UART_Start_Receive_IT+0x52>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <UART_Start_Receive_IT+0x48>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800576e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005772:	e01a      	b.n	80057aa <UART_Start_Receive_IT+0x7e>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	22ff      	movs	r2, #255	@ 0xff
 8005778:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800577c:	e015      	b.n	80057aa <UART_Start_Receive_IT+0x7e>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <UART_Start_Receive_IT+0x76>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <UART_Start_Receive_IT+0x6c>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	22ff      	movs	r2, #255	@ 0xff
 8005792:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005796:	e008      	b.n	80057aa <UART_Start_Receive_IT+0x7e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	227f      	movs	r2, #127	@ 0x7f
 800579c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057a0:	e003      	b.n	80057aa <UART_Start_Receive_IT+0x7e>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2222      	movs	r2, #34	@ 0x22
 80057b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057da:	64ba      	str	r2, [r7, #72]	@ 0x48
 80057dc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80057e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f6:	d107      	bne.n	8005808 <UART_Start_Receive_IT+0xdc>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a22      	ldr	r2, [pc, #136]	@ (800588c <UART_Start_Receive_IT+0x160>)
 8005804:	669a      	str	r2, [r3, #104]	@ 0x68
 8005806:	e002      	b.n	800580e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a21      	ldr	r2, [pc, #132]	@ (8005890 <UART_Start_Receive_IT+0x164>)
 800580c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d019      	beq.n	800584a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800582a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
 8005836:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800583a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e6      	bne.n	8005816 <UART_Start_Receive_IT+0xea>
 8005848:	e018      	b.n	800587c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	613b      	str	r3, [r7, #16]
   return(result);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f043 0320 	orr.w	r3, r3, #32
 800585e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	69f9      	ldr	r1, [r7, #28]
 800586e:	6a3a      	ldr	r2, [r7, #32]
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	61bb      	str	r3, [r7, #24]
   return(result);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	375c      	adds	r7, #92	@ 0x5c
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	08005b85 	.word	0x08005b85
 8005890:	080059dd 	.word	0x080059dd

08005894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b095      	sub	sp, #84	@ 0x54
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80058bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e6      	bne.n	800589c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3308      	adds	r3, #8
 80058ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e5      	bne.n	80058ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005906:	2b01      	cmp	r3, #1
 8005908:	d118      	bne.n	800593c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	60bb      	str	r3, [r7, #8]
   return(result);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0310 	bic.w	r3, r3, #16
 800591e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6979      	ldr	r1, [r7, #20]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	613b      	str	r3, [r7, #16]
   return(result);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e6      	bne.n	800590a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005950:	bf00      	nop
 8005952:	3754      	adds	r7, #84	@ 0x54
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff fb3a 	bl	8004ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	60bb      	str	r3, [r7, #8]
   return(result);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	61bb      	str	r3, [r7, #24]
 80059b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6979      	ldr	r1, [r7, #20]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	613b      	str	r3, [r7, #16]
   return(result);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e6      	bne.n	8005990 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fb06 	bl	8004fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d4:	bf00      	nop
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b09c      	sub	sp, #112	@ 0x70
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059f4:	2b22      	cmp	r3, #34	@ 0x22
 80059f6:	f040 80b9 	bne.w	8005b6c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005a00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a08:	b2d9      	uxtb	r1, r3
 8005a0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a14:	400a      	ands	r2, r1
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f040 809c 	bne.w	8005b7c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e6      	bne.n	8005a44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3308      	adds	r3, #8
 8005a94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e5      	bne.n	8005a76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d018      	beq.n	8005afe <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ae0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e6      	bne.n	8005acc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d12e      	bne.n	8005b64 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f023 0310 	bic.w	r3, r3, #16
 8005b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	69b9      	ldr	r1, [r7, #24]
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	617b      	str	r3, [r7, #20]
   return(result);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e6      	bne.n	8005b0c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d103      	bne.n	8005b54 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2210      	movs	r2, #16
 8005b52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fa53 	bl	8005008 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b62:	e00b      	b.n	8005b7c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fb fb23 	bl	80011b0 <HAL_UART_RxCpltCallback>
}
 8005b6a:	e007      	b.n	8005b7c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	619a      	str	r2, [r3, #24]
}
 8005b7c:	bf00      	nop
 8005b7e:	3770      	adds	r7, #112	@ 0x70
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b09c      	sub	sp, #112	@ 0x70
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9c:	2b22      	cmp	r3, #34	@ 0x22
 8005b9e:	f040 80b9 	bne.w	8005d14 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005ba8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bb2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005bb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005bba:	4013      	ands	r3, r2
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc6:	1c9a      	adds	r2, r3, #2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f040 809c 	bne.w	8005d24 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c00:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c0c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e6      	bne.n	8005bec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	f023 0301 	bic.w	r3, r3, #1
 8005c34:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d018      	beq.n	8005ca6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c94:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d12e      	bne.n	8005d0c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0310 	bic.w	r3, r3, #16
 8005cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6979      	ldr	r1, [r7, #20]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e6      	bne.n	8005cb4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d103      	bne.n	8005cfc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff f97f 	bl	8005008 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d0a:	e00b      	b.n	8005d24 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7fb fa4f 	bl	80011b0 <HAL_UART_RxCpltCallback>
}
 8005d12:	e007      	b.n	8005d24 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0208 	orr.w	r2, r2, #8
 8005d22:	619a      	str	r2, [r3, #24]
}
 8005d24:	bf00      	nop
 8005d26:	3770      	adds	r7, #112	@ 0x70
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <__cvt>:
 8005d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	ec57 6b10 	vmov	r6, r7, d0
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	463b      	mov	r3, r7
 8005d50:	bfbb      	ittet	lt
 8005d52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d56:	461f      	movlt	r7, r3
 8005d58:	2300      	movge	r3, #0
 8005d5a:	232d      	movlt	r3, #45	@ 0x2d
 8005d5c:	700b      	strb	r3, [r1, #0]
 8005d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d64:	4691      	mov	r9, r2
 8005d66:	f023 0820 	bic.w	r8, r3, #32
 8005d6a:	bfbc      	itt	lt
 8005d6c:	4632      	movlt	r2, r6
 8005d6e:	4616      	movlt	r6, r2
 8005d70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d74:	d005      	beq.n	8005d82 <__cvt+0x42>
 8005d76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d7a:	d100      	bne.n	8005d7e <__cvt+0x3e>
 8005d7c:	3401      	adds	r4, #1
 8005d7e:	2102      	movs	r1, #2
 8005d80:	e000      	b.n	8005d84 <__cvt+0x44>
 8005d82:	2103      	movs	r1, #3
 8005d84:	ab03      	add	r3, sp, #12
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	ab02      	add	r3, sp, #8
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	ec47 6b10 	vmov	d0, r6, r7
 8005d90:	4653      	mov	r3, sl
 8005d92:	4622      	mov	r2, r4
 8005d94:	f000 fe3c 	bl	8006a10 <_dtoa_r>
 8005d98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	d119      	bne.n	8005dd4 <__cvt+0x94>
 8005da0:	f019 0f01 	tst.w	r9, #1
 8005da4:	d00e      	beq.n	8005dc4 <__cvt+0x84>
 8005da6:	eb00 0904 	add.w	r9, r0, r4
 8005daa:	2200      	movs	r2, #0
 8005dac:	2300      	movs	r3, #0
 8005dae:	4630      	mov	r0, r6
 8005db0:	4639      	mov	r1, r7
 8005db2:	f7fa fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 8005db6:	b108      	cbz	r0, 8005dbc <__cvt+0x7c>
 8005db8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dbc:	2230      	movs	r2, #48	@ 0x30
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	454b      	cmp	r3, r9
 8005dc2:	d31e      	bcc.n	8005e02 <__cvt+0xc2>
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dc8:	1b5b      	subs	r3, r3, r5
 8005dca:	4628      	mov	r0, r5
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	b004      	add	sp, #16
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dd8:	eb00 0904 	add.w	r9, r0, r4
 8005ddc:	d1e5      	bne.n	8005daa <__cvt+0x6a>
 8005dde:	7803      	ldrb	r3, [r0, #0]
 8005de0:	2b30      	cmp	r3, #48	@ 0x30
 8005de2:	d10a      	bne.n	8005dfa <__cvt+0xba>
 8005de4:	2200      	movs	r2, #0
 8005de6:	2300      	movs	r3, #0
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	f7fa fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df0:	b918      	cbnz	r0, 8005dfa <__cvt+0xba>
 8005df2:	f1c4 0401 	rsb	r4, r4, #1
 8005df6:	f8ca 4000 	str.w	r4, [sl]
 8005dfa:	f8da 3000 	ldr.w	r3, [sl]
 8005dfe:	4499      	add	r9, r3
 8005e00:	e7d3      	b.n	8005daa <__cvt+0x6a>
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	9103      	str	r1, [sp, #12]
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e7d9      	b.n	8005dbe <__cvt+0x7e>

08005e0a <__exponent>:
 8005e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	bfba      	itte	lt
 8005e10:	4249      	neglt	r1, r1
 8005e12:	232d      	movlt	r3, #45	@ 0x2d
 8005e14:	232b      	movge	r3, #43	@ 0x2b
 8005e16:	2909      	cmp	r1, #9
 8005e18:	7002      	strb	r2, [r0, #0]
 8005e1a:	7043      	strb	r3, [r0, #1]
 8005e1c:	dd29      	ble.n	8005e72 <__exponent+0x68>
 8005e1e:	f10d 0307 	add.w	r3, sp, #7
 8005e22:	461d      	mov	r5, r3
 8005e24:	270a      	movs	r7, #10
 8005e26:	461a      	mov	r2, r3
 8005e28:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e2c:	fb07 1416 	mls	r4, r7, r6, r1
 8005e30:	3430      	adds	r4, #48	@ 0x30
 8005e32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e36:	460c      	mov	r4, r1
 8005e38:	2c63      	cmp	r4, #99	@ 0x63
 8005e3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e3e:	4631      	mov	r1, r6
 8005e40:	dcf1      	bgt.n	8005e26 <__exponent+0x1c>
 8005e42:	3130      	adds	r1, #48	@ 0x30
 8005e44:	1e94      	subs	r4, r2, #2
 8005e46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e4a:	1c41      	adds	r1, r0, #1
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	42ab      	cmp	r3, r5
 8005e50:	d30a      	bcc.n	8005e68 <__exponent+0x5e>
 8005e52:	f10d 0309 	add.w	r3, sp, #9
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	42ac      	cmp	r4, r5
 8005e5a:	bf88      	it	hi
 8005e5c:	2300      	movhi	r3, #0
 8005e5e:	3302      	adds	r3, #2
 8005e60:	4403      	add	r3, r0
 8005e62:	1a18      	subs	r0, r3, r0
 8005e64:	b003      	add	sp, #12
 8005e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e70:	e7ed      	b.n	8005e4e <__exponent+0x44>
 8005e72:	2330      	movs	r3, #48	@ 0x30
 8005e74:	3130      	adds	r1, #48	@ 0x30
 8005e76:	7083      	strb	r3, [r0, #2]
 8005e78:	70c1      	strb	r1, [r0, #3]
 8005e7a:	1d03      	adds	r3, r0, #4
 8005e7c:	e7f1      	b.n	8005e62 <__exponent+0x58>
	...

08005e80 <_printf_float>:
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	b08d      	sub	sp, #52	@ 0x34
 8005e86:	460c      	mov	r4, r1
 8005e88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	461f      	mov	r7, r3
 8005e90:	4605      	mov	r5, r0
 8005e92:	f000 fcbb 	bl	800680c <_localeconv_r>
 8005e96:	6803      	ldr	r3, [r0, #0]
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fa f9e8 	bl	8000270 <strlen>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea8:	9005      	str	r0, [sp, #20]
 8005eaa:	3307      	adds	r3, #7
 8005eac:	f023 0307 	bic.w	r3, r3, #7
 8005eb0:	f103 0208 	add.w	r2, r3, #8
 8005eb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005eb8:	f8d4 b000 	ldr.w	fp, [r4]
 8005ebc:	f8c8 2000 	str.w	r2, [r8]
 8005ec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ec4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ec8:	9307      	str	r3, [sp, #28]
 8005eca:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ece:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8006148 <_printf_float+0x2c8>)
 8005ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8005edc:	f7fa fe26 	bl	8000b2c <__aeabi_dcmpun>
 8005ee0:	bb70      	cbnz	r0, 8005f40 <_printf_float+0xc0>
 8005ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee6:	4b98      	ldr	r3, [pc, #608]	@ (8006148 <_printf_float+0x2c8>)
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eec:	f7fa fe00 	bl	8000af0 <__aeabi_dcmple>
 8005ef0:	bb30      	cbnz	r0, 8005f40 <_printf_float+0xc0>
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	4649      	mov	r1, r9
 8005efa:	f7fa fdef 	bl	8000adc <__aeabi_dcmplt>
 8005efe:	b110      	cbz	r0, 8005f06 <_printf_float+0x86>
 8005f00:	232d      	movs	r3, #45	@ 0x2d
 8005f02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f06:	4a91      	ldr	r2, [pc, #580]	@ (800614c <_printf_float+0x2cc>)
 8005f08:	4b91      	ldr	r3, [pc, #580]	@ (8006150 <_printf_float+0x2d0>)
 8005f0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f0e:	bf94      	ite	ls
 8005f10:	4690      	movls	r8, r2
 8005f12:	4698      	movhi	r8, r3
 8005f14:	2303      	movs	r3, #3
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	f02b 0304 	bic.w	r3, fp, #4
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	f04f 0900 	mov.w	r9, #0
 8005f22:	9700      	str	r7, [sp, #0]
 8005f24:	4633      	mov	r3, r6
 8005f26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f28:	4621      	mov	r1, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 f9d2 	bl	80062d4 <_printf_common>
 8005f30:	3001      	adds	r0, #1
 8005f32:	f040 808d 	bne.w	8006050 <_printf_float+0x1d0>
 8005f36:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3a:	b00d      	add	sp, #52	@ 0x34
 8005f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	4640      	mov	r0, r8
 8005f46:	4649      	mov	r1, r9
 8005f48:	f7fa fdf0 	bl	8000b2c <__aeabi_dcmpun>
 8005f4c:	b140      	cbz	r0, 8005f60 <_printf_float+0xe0>
 8005f4e:	464b      	mov	r3, r9
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bfbc      	itt	lt
 8005f54:	232d      	movlt	r3, #45	@ 0x2d
 8005f56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8006154 <_printf_float+0x2d4>)
 8005f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8006158 <_printf_float+0x2d8>)
 8005f5e:	e7d4      	b.n	8005f0a <_printf_float+0x8a>
 8005f60:	6863      	ldr	r3, [r4, #4]
 8005f62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f66:	9206      	str	r2, [sp, #24]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	d13b      	bne.n	8005fe4 <_printf_float+0x164>
 8005f6c:	2306      	movs	r3, #6
 8005f6e:	6063      	str	r3, [r4, #4]
 8005f70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f74:	2300      	movs	r3, #0
 8005f76:	6022      	str	r2, [r4, #0]
 8005f78:	9303      	str	r3, [sp, #12]
 8005f7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f80:	ab09      	add	r3, sp, #36	@ 0x24
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	ec49 8b10 	vmov	d0, r8, r9
 8005f8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f7ff fed6 	bl	8005d40 <__cvt>
 8005f94:	9b06      	ldr	r3, [sp, #24]
 8005f96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f98:	2b47      	cmp	r3, #71	@ 0x47
 8005f9a:	4680      	mov	r8, r0
 8005f9c:	d129      	bne.n	8005ff2 <_printf_float+0x172>
 8005f9e:	1cc8      	adds	r0, r1, #3
 8005fa0:	db02      	blt.n	8005fa8 <_printf_float+0x128>
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	4299      	cmp	r1, r3
 8005fa6:	dd41      	ble.n	800602c <_printf_float+0x1ac>
 8005fa8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fac:	fa5f fa8a 	uxtb.w	sl, sl
 8005fb0:	3901      	subs	r1, #1
 8005fb2:	4652      	mov	r2, sl
 8005fb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fba:	f7ff ff26 	bl	8005e0a <__exponent>
 8005fbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fc0:	1813      	adds	r3, r2, r0
 8005fc2:	2a01      	cmp	r2, #1
 8005fc4:	4681      	mov	r9, r0
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	dc02      	bgt.n	8005fd0 <_printf_float+0x150>
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	07d2      	lsls	r2, r2, #31
 8005fce:	d501      	bpl.n	8005fd4 <_printf_float+0x154>
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	6123      	str	r3, [r4, #16]
 8005fd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0a2      	beq.n	8005f22 <_printf_float+0xa2>
 8005fdc:	232d      	movs	r3, #45	@ 0x2d
 8005fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe2:	e79e      	b.n	8005f22 <_printf_float+0xa2>
 8005fe4:	9a06      	ldr	r2, [sp, #24]
 8005fe6:	2a47      	cmp	r2, #71	@ 0x47
 8005fe8:	d1c2      	bne.n	8005f70 <_printf_float+0xf0>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1c0      	bne.n	8005f70 <_printf_float+0xf0>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e7bd      	b.n	8005f6e <_printf_float+0xee>
 8005ff2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ff6:	d9db      	bls.n	8005fb0 <_printf_float+0x130>
 8005ff8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ffc:	d118      	bne.n	8006030 <_printf_float+0x1b0>
 8005ffe:	2900      	cmp	r1, #0
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	dd0b      	ble.n	800601c <_printf_float+0x19c>
 8006004:	6121      	str	r1, [r4, #16]
 8006006:	b913      	cbnz	r3, 800600e <_printf_float+0x18e>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	07d0      	lsls	r0, r2, #31
 800600c:	d502      	bpl.n	8006014 <_printf_float+0x194>
 800600e:	3301      	adds	r3, #1
 8006010:	440b      	add	r3, r1
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006016:	f04f 0900 	mov.w	r9, #0
 800601a:	e7db      	b.n	8005fd4 <_printf_float+0x154>
 800601c:	b913      	cbnz	r3, 8006024 <_printf_float+0x1a4>
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	07d2      	lsls	r2, r2, #31
 8006022:	d501      	bpl.n	8006028 <_printf_float+0x1a8>
 8006024:	3302      	adds	r3, #2
 8006026:	e7f4      	b.n	8006012 <_printf_float+0x192>
 8006028:	2301      	movs	r3, #1
 800602a:	e7f2      	b.n	8006012 <_printf_float+0x192>
 800602c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006032:	4299      	cmp	r1, r3
 8006034:	db05      	blt.n	8006042 <_printf_float+0x1c2>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	6121      	str	r1, [r4, #16]
 800603a:	07d8      	lsls	r0, r3, #31
 800603c:	d5ea      	bpl.n	8006014 <_printf_float+0x194>
 800603e:	1c4b      	adds	r3, r1, #1
 8006040:	e7e7      	b.n	8006012 <_printf_float+0x192>
 8006042:	2900      	cmp	r1, #0
 8006044:	bfd4      	ite	le
 8006046:	f1c1 0202 	rsble	r2, r1, #2
 800604a:	2201      	movgt	r2, #1
 800604c:	4413      	add	r3, r2
 800604e:	e7e0      	b.n	8006012 <_printf_float+0x192>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	055a      	lsls	r2, r3, #21
 8006054:	d407      	bmi.n	8006066 <_printf_float+0x1e6>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	4642      	mov	r2, r8
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	d12b      	bne.n	80060bc <_printf_float+0x23c>
 8006064:	e767      	b.n	8005f36 <_printf_float+0xb6>
 8006066:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800606a:	f240 80dd 	bls.w	8006228 <_printf_float+0x3a8>
 800606e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006072:	2200      	movs	r2, #0
 8006074:	2300      	movs	r3, #0
 8006076:	f7fa fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800607a:	2800      	cmp	r0, #0
 800607c:	d033      	beq.n	80060e6 <_printf_float+0x266>
 800607e:	4a37      	ldr	r2, [pc, #220]	@ (800615c <_printf_float+0x2dc>)
 8006080:	2301      	movs	r3, #1
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f af54 	beq.w	8005f36 <_printf_float+0xb6>
 800608e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006092:	4543      	cmp	r3, r8
 8006094:	db02      	blt.n	800609c <_printf_float+0x21c>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	07d8      	lsls	r0, r3, #31
 800609a:	d50f      	bpl.n	80060bc <_printf_float+0x23c>
 800609c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f af45 	beq.w	8005f36 <_printf_float+0xb6>
 80060ac:	f04f 0900 	mov.w	r9, #0
 80060b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80060b4:	f104 0a1a 	add.w	sl, r4, #26
 80060b8:	45c8      	cmp	r8, r9
 80060ba:	dc09      	bgt.n	80060d0 <_printf_float+0x250>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	079b      	lsls	r3, r3, #30
 80060c0:	f100 8103 	bmi.w	80062ca <_printf_float+0x44a>
 80060c4:	68e0      	ldr	r0, [r4, #12]
 80060c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c8:	4298      	cmp	r0, r3
 80060ca:	bfb8      	it	lt
 80060cc:	4618      	movlt	r0, r3
 80060ce:	e734      	b.n	8005f3a <_printf_float+0xba>
 80060d0:	2301      	movs	r3, #1
 80060d2:	4652      	mov	r2, sl
 80060d4:	4631      	mov	r1, r6
 80060d6:	4628      	mov	r0, r5
 80060d8:	47b8      	blx	r7
 80060da:	3001      	adds	r0, #1
 80060dc:	f43f af2b 	beq.w	8005f36 <_printf_float+0xb6>
 80060e0:	f109 0901 	add.w	r9, r9, #1
 80060e4:	e7e8      	b.n	80060b8 <_printf_float+0x238>
 80060e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	dc39      	bgt.n	8006160 <_printf_float+0x2e0>
 80060ec:	4a1b      	ldr	r2, [pc, #108]	@ (800615c <_printf_float+0x2dc>)
 80060ee:	2301      	movs	r3, #1
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f af1d 	beq.w	8005f36 <_printf_float+0xb6>
 80060fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006100:	ea59 0303 	orrs.w	r3, r9, r3
 8006104:	d102      	bne.n	800610c <_printf_float+0x28c>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	07d9      	lsls	r1, r3, #31
 800610a:	d5d7      	bpl.n	80060bc <_printf_float+0x23c>
 800610c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	f43f af0d 	beq.w	8005f36 <_printf_float+0xb6>
 800611c:	f04f 0a00 	mov.w	sl, #0
 8006120:	f104 0b1a 	add.w	fp, r4, #26
 8006124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006126:	425b      	negs	r3, r3
 8006128:	4553      	cmp	r3, sl
 800612a:	dc01      	bgt.n	8006130 <_printf_float+0x2b0>
 800612c:	464b      	mov	r3, r9
 800612e:	e793      	b.n	8006058 <_printf_float+0x1d8>
 8006130:	2301      	movs	r3, #1
 8006132:	465a      	mov	r2, fp
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	f43f aefb 	beq.w	8005f36 <_printf_float+0xb6>
 8006140:	f10a 0a01 	add.w	sl, sl, #1
 8006144:	e7ee      	b.n	8006124 <_printf_float+0x2a4>
 8006146:	bf00      	nop
 8006148:	7fefffff 	.word	0x7fefffff
 800614c:	080086fc 	.word	0x080086fc
 8006150:	08008700 	.word	0x08008700
 8006154:	08008704 	.word	0x08008704
 8006158:	08008708 	.word	0x08008708
 800615c:	0800870c 	.word	0x0800870c
 8006160:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006162:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006166:	4553      	cmp	r3, sl
 8006168:	bfa8      	it	ge
 800616a:	4653      	movge	r3, sl
 800616c:	2b00      	cmp	r3, #0
 800616e:	4699      	mov	r9, r3
 8006170:	dc36      	bgt.n	80061e0 <_printf_float+0x360>
 8006172:	f04f 0b00 	mov.w	fp, #0
 8006176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800617a:	f104 021a 	add.w	r2, r4, #26
 800617e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006180:	9306      	str	r3, [sp, #24]
 8006182:	eba3 0309 	sub.w	r3, r3, r9
 8006186:	455b      	cmp	r3, fp
 8006188:	dc31      	bgt.n	80061ee <_printf_float+0x36e>
 800618a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618c:	459a      	cmp	sl, r3
 800618e:	dc3a      	bgt.n	8006206 <_printf_float+0x386>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	07da      	lsls	r2, r3, #31
 8006194:	d437      	bmi.n	8006206 <_printf_float+0x386>
 8006196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006198:	ebaa 0903 	sub.w	r9, sl, r3
 800619c:	9b06      	ldr	r3, [sp, #24]
 800619e:	ebaa 0303 	sub.w	r3, sl, r3
 80061a2:	4599      	cmp	r9, r3
 80061a4:	bfa8      	it	ge
 80061a6:	4699      	movge	r9, r3
 80061a8:	f1b9 0f00 	cmp.w	r9, #0
 80061ac:	dc33      	bgt.n	8006216 <_printf_float+0x396>
 80061ae:	f04f 0800 	mov.w	r8, #0
 80061b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061b6:	f104 0b1a 	add.w	fp, r4, #26
 80061ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061bc:	ebaa 0303 	sub.w	r3, sl, r3
 80061c0:	eba3 0309 	sub.w	r3, r3, r9
 80061c4:	4543      	cmp	r3, r8
 80061c6:	f77f af79 	ble.w	80060bc <_printf_float+0x23c>
 80061ca:	2301      	movs	r3, #1
 80061cc:	465a      	mov	r2, fp
 80061ce:	4631      	mov	r1, r6
 80061d0:	4628      	mov	r0, r5
 80061d2:	47b8      	blx	r7
 80061d4:	3001      	adds	r0, #1
 80061d6:	f43f aeae 	beq.w	8005f36 <_printf_float+0xb6>
 80061da:	f108 0801 	add.w	r8, r8, #1
 80061de:	e7ec      	b.n	80061ba <_printf_float+0x33a>
 80061e0:	4642      	mov	r2, r8
 80061e2:	4631      	mov	r1, r6
 80061e4:	4628      	mov	r0, r5
 80061e6:	47b8      	blx	r7
 80061e8:	3001      	adds	r0, #1
 80061ea:	d1c2      	bne.n	8006172 <_printf_float+0x2f2>
 80061ec:	e6a3      	b.n	8005f36 <_printf_float+0xb6>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	9206      	str	r2, [sp, #24]
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae9c 	beq.w	8005f36 <_printf_float+0xb6>
 80061fe:	9a06      	ldr	r2, [sp, #24]
 8006200:	f10b 0b01 	add.w	fp, fp, #1
 8006204:	e7bb      	b.n	800617e <_printf_float+0x2fe>
 8006206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	d1c0      	bne.n	8006196 <_printf_float+0x316>
 8006214:	e68f      	b.n	8005f36 <_printf_float+0xb6>
 8006216:	9a06      	ldr	r2, [sp, #24]
 8006218:	464b      	mov	r3, r9
 800621a:	4442      	add	r2, r8
 800621c:	4631      	mov	r1, r6
 800621e:	4628      	mov	r0, r5
 8006220:	47b8      	blx	r7
 8006222:	3001      	adds	r0, #1
 8006224:	d1c3      	bne.n	80061ae <_printf_float+0x32e>
 8006226:	e686      	b.n	8005f36 <_printf_float+0xb6>
 8006228:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800622c:	f1ba 0f01 	cmp.w	sl, #1
 8006230:	dc01      	bgt.n	8006236 <_printf_float+0x3b6>
 8006232:	07db      	lsls	r3, r3, #31
 8006234:	d536      	bpl.n	80062a4 <_printf_float+0x424>
 8006236:	2301      	movs	r3, #1
 8006238:	4642      	mov	r2, r8
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae78 	beq.w	8005f36 <_printf_float+0xb6>
 8006246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800624a:	4631      	mov	r1, r6
 800624c:	4628      	mov	r0, r5
 800624e:	47b8      	blx	r7
 8006250:	3001      	adds	r0, #1
 8006252:	f43f ae70 	beq.w	8005f36 <_printf_float+0xb6>
 8006256:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800625a:	2200      	movs	r2, #0
 800625c:	2300      	movs	r3, #0
 800625e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006262:	f7fa fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8006266:	b9c0      	cbnz	r0, 800629a <_printf_float+0x41a>
 8006268:	4653      	mov	r3, sl
 800626a:	f108 0201 	add.w	r2, r8, #1
 800626e:	4631      	mov	r1, r6
 8006270:	4628      	mov	r0, r5
 8006272:	47b8      	blx	r7
 8006274:	3001      	adds	r0, #1
 8006276:	d10c      	bne.n	8006292 <_printf_float+0x412>
 8006278:	e65d      	b.n	8005f36 <_printf_float+0xb6>
 800627a:	2301      	movs	r3, #1
 800627c:	465a      	mov	r2, fp
 800627e:	4631      	mov	r1, r6
 8006280:	4628      	mov	r0, r5
 8006282:	47b8      	blx	r7
 8006284:	3001      	adds	r0, #1
 8006286:	f43f ae56 	beq.w	8005f36 <_printf_float+0xb6>
 800628a:	f108 0801 	add.w	r8, r8, #1
 800628e:	45d0      	cmp	r8, sl
 8006290:	dbf3      	blt.n	800627a <_printf_float+0x3fa>
 8006292:	464b      	mov	r3, r9
 8006294:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006298:	e6df      	b.n	800605a <_printf_float+0x1da>
 800629a:	f04f 0800 	mov.w	r8, #0
 800629e:	f104 0b1a 	add.w	fp, r4, #26
 80062a2:	e7f4      	b.n	800628e <_printf_float+0x40e>
 80062a4:	2301      	movs	r3, #1
 80062a6:	4642      	mov	r2, r8
 80062a8:	e7e1      	b.n	800626e <_printf_float+0x3ee>
 80062aa:	2301      	movs	r3, #1
 80062ac:	464a      	mov	r2, r9
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f ae3e 	beq.w	8005f36 <_printf_float+0xb6>
 80062ba:	f108 0801 	add.w	r8, r8, #1
 80062be:	68e3      	ldr	r3, [r4, #12]
 80062c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062c2:	1a5b      	subs	r3, r3, r1
 80062c4:	4543      	cmp	r3, r8
 80062c6:	dcf0      	bgt.n	80062aa <_printf_float+0x42a>
 80062c8:	e6fc      	b.n	80060c4 <_printf_float+0x244>
 80062ca:	f04f 0800 	mov.w	r8, #0
 80062ce:	f104 0919 	add.w	r9, r4, #25
 80062d2:	e7f4      	b.n	80062be <_printf_float+0x43e>

080062d4 <_printf_common>:
 80062d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d8:	4616      	mov	r6, r2
 80062da:	4698      	mov	r8, r3
 80062dc:	688a      	ldr	r2, [r1, #8]
 80062de:	690b      	ldr	r3, [r1, #16]
 80062e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062e4:	4293      	cmp	r3, r2
 80062e6:	bfb8      	it	lt
 80062e8:	4613      	movlt	r3, r2
 80062ea:	6033      	str	r3, [r6, #0]
 80062ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062f0:	4607      	mov	r7, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	b10a      	cbz	r2, 80062fa <_printf_common+0x26>
 80062f6:	3301      	adds	r3, #1
 80062f8:	6033      	str	r3, [r6, #0]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	0699      	lsls	r1, r3, #26
 80062fe:	bf42      	ittt	mi
 8006300:	6833      	ldrmi	r3, [r6, #0]
 8006302:	3302      	addmi	r3, #2
 8006304:	6033      	strmi	r3, [r6, #0]
 8006306:	6825      	ldr	r5, [r4, #0]
 8006308:	f015 0506 	ands.w	r5, r5, #6
 800630c:	d106      	bne.n	800631c <_printf_common+0x48>
 800630e:	f104 0a19 	add.w	sl, r4, #25
 8006312:	68e3      	ldr	r3, [r4, #12]
 8006314:	6832      	ldr	r2, [r6, #0]
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	42ab      	cmp	r3, r5
 800631a:	dc26      	bgt.n	800636a <_printf_common+0x96>
 800631c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	3b00      	subs	r3, #0
 8006324:	bf18      	it	ne
 8006326:	2301      	movne	r3, #1
 8006328:	0692      	lsls	r2, r2, #26
 800632a:	d42b      	bmi.n	8006384 <_printf_common+0xb0>
 800632c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006330:	4641      	mov	r1, r8
 8006332:	4638      	mov	r0, r7
 8006334:	47c8      	blx	r9
 8006336:	3001      	adds	r0, #1
 8006338:	d01e      	beq.n	8006378 <_printf_common+0xa4>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	6922      	ldr	r2, [r4, #16]
 800633e:	f003 0306 	and.w	r3, r3, #6
 8006342:	2b04      	cmp	r3, #4
 8006344:	bf02      	ittt	eq
 8006346:	68e5      	ldreq	r5, [r4, #12]
 8006348:	6833      	ldreq	r3, [r6, #0]
 800634a:	1aed      	subeq	r5, r5, r3
 800634c:	68a3      	ldr	r3, [r4, #8]
 800634e:	bf0c      	ite	eq
 8006350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006354:	2500      	movne	r5, #0
 8006356:	4293      	cmp	r3, r2
 8006358:	bfc4      	itt	gt
 800635a:	1a9b      	subgt	r3, r3, r2
 800635c:	18ed      	addgt	r5, r5, r3
 800635e:	2600      	movs	r6, #0
 8006360:	341a      	adds	r4, #26
 8006362:	42b5      	cmp	r5, r6
 8006364:	d11a      	bne.n	800639c <_printf_common+0xc8>
 8006366:	2000      	movs	r0, #0
 8006368:	e008      	b.n	800637c <_printf_common+0xa8>
 800636a:	2301      	movs	r3, #1
 800636c:	4652      	mov	r2, sl
 800636e:	4641      	mov	r1, r8
 8006370:	4638      	mov	r0, r7
 8006372:	47c8      	blx	r9
 8006374:	3001      	adds	r0, #1
 8006376:	d103      	bne.n	8006380 <_printf_common+0xac>
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006380:	3501      	adds	r5, #1
 8006382:	e7c6      	b.n	8006312 <_printf_common+0x3e>
 8006384:	18e1      	adds	r1, r4, r3
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	2030      	movs	r0, #48	@ 0x30
 800638a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800638e:	4422      	add	r2, r4
 8006390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006398:	3302      	adds	r3, #2
 800639a:	e7c7      	b.n	800632c <_printf_common+0x58>
 800639c:	2301      	movs	r3, #1
 800639e:	4622      	mov	r2, r4
 80063a0:	4641      	mov	r1, r8
 80063a2:	4638      	mov	r0, r7
 80063a4:	47c8      	blx	r9
 80063a6:	3001      	adds	r0, #1
 80063a8:	d0e6      	beq.n	8006378 <_printf_common+0xa4>
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7d9      	b.n	8006362 <_printf_common+0x8e>
	...

080063b0 <_printf_i>:
 80063b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	7e0f      	ldrb	r7, [r1, #24]
 80063b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063b8:	2f78      	cmp	r7, #120	@ 0x78
 80063ba:	4691      	mov	r9, r2
 80063bc:	4680      	mov	r8, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	469a      	mov	sl, r3
 80063c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063c6:	d807      	bhi.n	80063d8 <_printf_i+0x28>
 80063c8:	2f62      	cmp	r7, #98	@ 0x62
 80063ca:	d80a      	bhi.n	80063e2 <_printf_i+0x32>
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	f000 80d2 	beq.w	8006576 <_printf_i+0x1c6>
 80063d2:	2f58      	cmp	r7, #88	@ 0x58
 80063d4:	f000 80b9 	beq.w	800654a <_printf_i+0x19a>
 80063d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063e0:	e03a      	b.n	8006458 <_printf_i+0xa8>
 80063e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063e6:	2b15      	cmp	r3, #21
 80063e8:	d8f6      	bhi.n	80063d8 <_printf_i+0x28>
 80063ea:	a101      	add	r1, pc, #4	@ (adr r1, 80063f0 <_printf_i+0x40>)
 80063ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063f0:	08006449 	.word	0x08006449
 80063f4:	0800645d 	.word	0x0800645d
 80063f8:	080063d9 	.word	0x080063d9
 80063fc:	080063d9 	.word	0x080063d9
 8006400:	080063d9 	.word	0x080063d9
 8006404:	080063d9 	.word	0x080063d9
 8006408:	0800645d 	.word	0x0800645d
 800640c:	080063d9 	.word	0x080063d9
 8006410:	080063d9 	.word	0x080063d9
 8006414:	080063d9 	.word	0x080063d9
 8006418:	080063d9 	.word	0x080063d9
 800641c:	0800655d 	.word	0x0800655d
 8006420:	08006487 	.word	0x08006487
 8006424:	08006517 	.word	0x08006517
 8006428:	080063d9 	.word	0x080063d9
 800642c:	080063d9 	.word	0x080063d9
 8006430:	0800657f 	.word	0x0800657f
 8006434:	080063d9 	.word	0x080063d9
 8006438:	08006487 	.word	0x08006487
 800643c:	080063d9 	.word	0x080063d9
 8006440:	080063d9 	.word	0x080063d9
 8006444:	0800651f 	.word	0x0800651f
 8006448:	6833      	ldr	r3, [r6, #0]
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6032      	str	r2, [r6, #0]
 8006450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006458:	2301      	movs	r3, #1
 800645a:	e09d      	b.n	8006598 <_printf_i+0x1e8>
 800645c:	6833      	ldr	r3, [r6, #0]
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	1d19      	adds	r1, r3, #4
 8006462:	6031      	str	r1, [r6, #0]
 8006464:	0606      	lsls	r6, r0, #24
 8006466:	d501      	bpl.n	800646c <_printf_i+0xbc>
 8006468:	681d      	ldr	r5, [r3, #0]
 800646a:	e003      	b.n	8006474 <_printf_i+0xc4>
 800646c:	0645      	lsls	r5, r0, #25
 800646e:	d5fb      	bpl.n	8006468 <_printf_i+0xb8>
 8006470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006474:	2d00      	cmp	r5, #0
 8006476:	da03      	bge.n	8006480 <_printf_i+0xd0>
 8006478:	232d      	movs	r3, #45	@ 0x2d
 800647a:	426d      	negs	r5, r5
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006480:	4859      	ldr	r0, [pc, #356]	@ (80065e8 <_printf_i+0x238>)
 8006482:	230a      	movs	r3, #10
 8006484:	e011      	b.n	80064aa <_printf_i+0xfa>
 8006486:	6821      	ldr	r1, [r4, #0]
 8006488:	6833      	ldr	r3, [r6, #0]
 800648a:	0608      	lsls	r0, r1, #24
 800648c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006490:	d402      	bmi.n	8006498 <_printf_i+0xe8>
 8006492:	0649      	lsls	r1, r1, #25
 8006494:	bf48      	it	mi
 8006496:	b2ad      	uxthmi	r5, r5
 8006498:	2f6f      	cmp	r7, #111	@ 0x6f
 800649a:	4853      	ldr	r0, [pc, #332]	@ (80065e8 <_printf_i+0x238>)
 800649c:	6033      	str	r3, [r6, #0]
 800649e:	bf14      	ite	ne
 80064a0:	230a      	movne	r3, #10
 80064a2:	2308      	moveq	r3, #8
 80064a4:	2100      	movs	r1, #0
 80064a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064aa:	6866      	ldr	r6, [r4, #4]
 80064ac:	60a6      	str	r6, [r4, #8]
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	bfa2      	ittt	ge
 80064b2:	6821      	ldrge	r1, [r4, #0]
 80064b4:	f021 0104 	bicge.w	r1, r1, #4
 80064b8:	6021      	strge	r1, [r4, #0]
 80064ba:	b90d      	cbnz	r5, 80064c0 <_printf_i+0x110>
 80064bc:	2e00      	cmp	r6, #0
 80064be:	d04b      	beq.n	8006558 <_printf_i+0x1a8>
 80064c0:	4616      	mov	r6, r2
 80064c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c6:	fb03 5711 	mls	r7, r3, r1, r5
 80064ca:	5dc7      	ldrb	r7, [r0, r7]
 80064cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064d0:	462f      	mov	r7, r5
 80064d2:	42bb      	cmp	r3, r7
 80064d4:	460d      	mov	r5, r1
 80064d6:	d9f4      	bls.n	80064c2 <_printf_i+0x112>
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d10b      	bne.n	80064f4 <_printf_i+0x144>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	07df      	lsls	r7, r3, #31
 80064e0:	d508      	bpl.n	80064f4 <_printf_i+0x144>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	6861      	ldr	r1, [r4, #4]
 80064e6:	4299      	cmp	r1, r3
 80064e8:	bfde      	ittt	le
 80064ea:	2330      	movle	r3, #48	@ 0x30
 80064ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064f4:	1b92      	subs	r2, r2, r6
 80064f6:	6122      	str	r2, [r4, #16]
 80064f8:	f8cd a000 	str.w	sl, [sp]
 80064fc:	464b      	mov	r3, r9
 80064fe:	aa03      	add	r2, sp, #12
 8006500:	4621      	mov	r1, r4
 8006502:	4640      	mov	r0, r8
 8006504:	f7ff fee6 	bl	80062d4 <_printf_common>
 8006508:	3001      	adds	r0, #1
 800650a:	d14a      	bne.n	80065a2 <_printf_i+0x1f2>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	b004      	add	sp, #16
 8006512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f043 0320 	orr.w	r3, r3, #32
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	4833      	ldr	r0, [pc, #204]	@ (80065ec <_printf_i+0x23c>)
 8006520:	2778      	movs	r7, #120	@ 0x78
 8006522:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	6831      	ldr	r1, [r6, #0]
 800652a:	061f      	lsls	r7, r3, #24
 800652c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006530:	d402      	bmi.n	8006538 <_printf_i+0x188>
 8006532:	065f      	lsls	r7, r3, #25
 8006534:	bf48      	it	mi
 8006536:	b2ad      	uxthmi	r5, r5
 8006538:	6031      	str	r1, [r6, #0]
 800653a:	07d9      	lsls	r1, r3, #31
 800653c:	bf44      	itt	mi
 800653e:	f043 0320 	orrmi.w	r3, r3, #32
 8006542:	6023      	strmi	r3, [r4, #0]
 8006544:	b11d      	cbz	r5, 800654e <_printf_i+0x19e>
 8006546:	2310      	movs	r3, #16
 8006548:	e7ac      	b.n	80064a4 <_printf_i+0xf4>
 800654a:	4827      	ldr	r0, [pc, #156]	@ (80065e8 <_printf_i+0x238>)
 800654c:	e7e9      	b.n	8006522 <_printf_i+0x172>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	f023 0320 	bic.w	r3, r3, #32
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	e7f6      	b.n	8006546 <_printf_i+0x196>
 8006558:	4616      	mov	r6, r2
 800655a:	e7bd      	b.n	80064d8 <_printf_i+0x128>
 800655c:	6833      	ldr	r3, [r6, #0]
 800655e:	6825      	ldr	r5, [r4, #0]
 8006560:	6961      	ldr	r1, [r4, #20]
 8006562:	1d18      	adds	r0, r3, #4
 8006564:	6030      	str	r0, [r6, #0]
 8006566:	062e      	lsls	r6, r5, #24
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	d501      	bpl.n	8006570 <_printf_i+0x1c0>
 800656c:	6019      	str	r1, [r3, #0]
 800656e:	e002      	b.n	8006576 <_printf_i+0x1c6>
 8006570:	0668      	lsls	r0, r5, #25
 8006572:	d5fb      	bpl.n	800656c <_printf_i+0x1bc>
 8006574:	8019      	strh	r1, [r3, #0]
 8006576:	2300      	movs	r3, #0
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	4616      	mov	r6, r2
 800657c:	e7bc      	b.n	80064f8 <_printf_i+0x148>
 800657e:	6833      	ldr	r3, [r6, #0]
 8006580:	1d1a      	adds	r2, r3, #4
 8006582:	6032      	str	r2, [r6, #0]
 8006584:	681e      	ldr	r6, [r3, #0]
 8006586:	6862      	ldr	r2, [r4, #4]
 8006588:	2100      	movs	r1, #0
 800658a:	4630      	mov	r0, r6
 800658c:	f7f9 fe20 	bl	80001d0 <memchr>
 8006590:	b108      	cbz	r0, 8006596 <_printf_i+0x1e6>
 8006592:	1b80      	subs	r0, r0, r6
 8006594:	6060      	str	r0, [r4, #4]
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	2300      	movs	r3, #0
 800659c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a0:	e7aa      	b.n	80064f8 <_printf_i+0x148>
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	4632      	mov	r2, r6
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	47d0      	blx	sl
 80065ac:	3001      	adds	r0, #1
 80065ae:	d0ad      	beq.n	800650c <_printf_i+0x15c>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	079b      	lsls	r3, r3, #30
 80065b4:	d413      	bmi.n	80065de <_printf_i+0x22e>
 80065b6:	68e0      	ldr	r0, [r4, #12]
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	4298      	cmp	r0, r3
 80065bc:	bfb8      	it	lt
 80065be:	4618      	movlt	r0, r3
 80065c0:	e7a6      	b.n	8006510 <_printf_i+0x160>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4632      	mov	r2, r6
 80065c6:	4649      	mov	r1, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	47d0      	blx	sl
 80065cc:	3001      	adds	r0, #1
 80065ce:	d09d      	beq.n	800650c <_printf_i+0x15c>
 80065d0:	3501      	adds	r5, #1
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	9903      	ldr	r1, [sp, #12]
 80065d6:	1a5b      	subs	r3, r3, r1
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dcf2      	bgt.n	80065c2 <_printf_i+0x212>
 80065dc:	e7eb      	b.n	80065b6 <_printf_i+0x206>
 80065de:	2500      	movs	r5, #0
 80065e0:	f104 0619 	add.w	r6, r4, #25
 80065e4:	e7f5      	b.n	80065d2 <_printf_i+0x222>
 80065e6:	bf00      	nop
 80065e8:	0800870e 	.word	0x0800870e
 80065ec:	0800871f 	.word	0x0800871f

080065f0 <std>:
 80065f0:	2300      	movs	r3, #0
 80065f2:	b510      	push	{r4, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	e9c0 3300 	strd	r3, r3, [r0]
 80065fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065fe:	6083      	str	r3, [r0, #8]
 8006600:	8181      	strh	r1, [r0, #12]
 8006602:	6643      	str	r3, [r0, #100]	@ 0x64
 8006604:	81c2      	strh	r2, [r0, #14]
 8006606:	6183      	str	r3, [r0, #24]
 8006608:	4619      	mov	r1, r3
 800660a:	2208      	movs	r2, #8
 800660c:	305c      	adds	r0, #92	@ 0x5c
 800660e:	f000 f8f4 	bl	80067fa <memset>
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <std+0x58>)
 8006614:	6263      	str	r3, [r4, #36]	@ 0x24
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <std+0x5c>)
 8006618:	62a3      	str	r3, [r4, #40]	@ 0x28
 800661a:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <std+0x60>)
 800661c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <std+0x64>)
 8006620:	6323      	str	r3, [r4, #48]	@ 0x30
 8006622:	4b0d      	ldr	r3, [pc, #52]	@ (8006658 <std+0x68>)
 8006624:	6224      	str	r4, [r4, #32]
 8006626:	429c      	cmp	r4, r3
 8006628:	d006      	beq.n	8006638 <std+0x48>
 800662a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800662e:	4294      	cmp	r4, r2
 8006630:	d002      	beq.n	8006638 <std+0x48>
 8006632:	33d0      	adds	r3, #208	@ 0xd0
 8006634:	429c      	cmp	r4, r3
 8006636:	d105      	bne.n	8006644 <std+0x54>
 8006638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800663c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006640:	f000 b958 	b.w	80068f4 <__retarget_lock_init_recursive>
 8006644:	bd10      	pop	{r4, pc}
 8006646:	bf00      	nop
 8006648:	08006775 	.word	0x08006775
 800664c:	08006797 	.word	0x08006797
 8006650:	080067cf 	.word	0x080067cf
 8006654:	080067f3 	.word	0x080067f3
 8006658:	20000360 	.word	0x20000360

0800665c <stdio_exit_handler>:
 800665c:	4a02      	ldr	r2, [pc, #8]	@ (8006668 <stdio_exit_handler+0xc>)
 800665e:	4903      	ldr	r1, [pc, #12]	@ (800666c <stdio_exit_handler+0x10>)
 8006660:	4803      	ldr	r0, [pc, #12]	@ (8006670 <stdio_exit_handler+0x14>)
 8006662:	f000 b869 	b.w	8006738 <_fwalk_sglue>
 8006666:	bf00      	nop
 8006668:	20000014 	.word	0x20000014
 800666c:	08007fa5 	.word	0x08007fa5
 8006670:	20000024 	.word	0x20000024

08006674 <cleanup_stdio>:
 8006674:	6841      	ldr	r1, [r0, #4]
 8006676:	4b0c      	ldr	r3, [pc, #48]	@ (80066a8 <cleanup_stdio+0x34>)
 8006678:	4299      	cmp	r1, r3
 800667a:	b510      	push	{r4, lr}
 800667c:	4604      	mov	r4, r0
 800667e:	d001      	beq.n	8006684 <cleanup_stdio+0x10>
 8006680:	f001 fc90 	bl	8007fa4 <_fflush_r>
 8006684:	68a1      	ldr	r1, [r4, #8]
 8006686:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <cleanup_stdio+0x38>)
 8006688:	4299      	cmp	r1, r3
 800668a:	d002      	beq.n	8006692 <cleanup_stdio+0x1e>
 800668c:	4620      	mov	r0, r4
 800668e:	f001 fc89 	bl	8007fa4 <_fflush_r>
 8006692:	68e1      	ldr	r1, [r4, #12]
 8006694:	4b06      	ldr	r3, [pc, #24]	@ (80066b0 <cleanup_stdio+0x3c>)
 8006696:	4299      	cmp	r1, r3
 8006698:	d004      	beq.n	80066a4 <cleanup_stdio+0x30>
 800669a:	4620      	mov	r0, r4
 800669c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a0:	f001 bc80 	b.w	8007fa4 <_fflush_r>
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	bf00      	nop
 80066a8:	20000360 	.word	0x20000360
 80066ac:	200003c8 	.word	0x200003c8
 80066b0:	20000430 	.word	0x20000430

080066b4 <global_stdio_init.part.0>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <global_stdio_init.part.0+0x30>)
 80066b8:	4c0b      	ldr	r4, [pc, #44]	@ (80066e8 <global_stdio_init.part.0+0x34>)
 80066ba:	4a0c      	ldr	r2, [pc, #48]	@ (80066ec <global_stdio_init.part.0+0x38>)
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	4620      	mov	r0, r4
 80066c0:	2200      	movs	r2, #0
 80066c2:	2104      	movs	r1, #4
 80066c4:	f7ff ff94 	bl	80065f0 <std>
 80066c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066cc:	2201      	movs	r2, #1
 80066ce:	2109      	movs	r1, #9
 80066d0:	f7ff ff8e 	bl	80065f0 <std>
 80066d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066d8:	2202      	movs	r2, #2
 80066da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066de:	2112      	movs	r1, #18
 80066e0:	f7ff bf86 	b.w	80065f0 <std>
 80066e4:	20000498 	.word	0x20000498
 80066e8:	20000360 	.word	0x20000360
 80066ec:	0800665d 	.word	0x0800665d

080066f0 <__sfp_lock_acquire>:
 80066f0:	4801      	ldr	r0, [pc, #4]	@ (80066f8 <__sfp_lock_acquire+0x8>)
 80066f2:	f000 b900 	b.w	80068f6 <__retarget_lock_acquire_recursive>
 80066f6:	bf00      	nop
 80066f8:	200004a1 	.word	0x200004a1

080066fc <__sfp_lock_release>:
 80066fc:	4801      	ldr	r0, [pc, #4]	@ (8006704 <__sfp_lock_release+0x8>)
 80066fe:	f000 b8fb 	b.w	80068f8 <__retarget_lock_release_recursive>
 8006702:	bf00      	nop
 8006704:	200004a1 	.word	0x200004a1

08006708 <__sinit>:
 8006708:	b510      	push	{r4, lr}
 800670a:	4604      	mov	r4, r0
 800670c:	f7ff fff0 	bl	80066f0 <__sfp_lock_acquire>
 8006710:	6a23      	ldr	r3, [r4, #32]
 8006712:	b11b      	cbz	r3, 800671c <__sinit+0x14>
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006718:	f7ff bff0 	b.w	80066fc <__sfp_lock_release>
 800671c:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <__sinit+0x28>)
 800671e:	6223      	str	r3, [r4, #32]
 8006720:	4b04      	ldr	r3, [pc, #16]	@ (8006734 <__sinit+0x2c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f5      	bne.n	8006714 <__sinit+0xc>
 8006728:	f7ff ffc4 	bl	80066b4 <global_stdio_init.part.0>
 800672c:	e7f2      	b.n	8006714 <__sinit+0xc>
 800672e:	bf00      	nop
 8006730:	08006675 	.word	0x08006675
 8006734:	20000498 	.word	0x20000498

08006738 <_fwalk_sglue>:
 8006738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800673c:	4607      	mov	r7, r0
 800673e:	4688      	mov	r8, r1
 8006740:	4614      	mov	r4, r2
 8006742:	2600      	movs	r6, #0
 8006744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006748:	f1b9 0901 	subs.w	r9, r9, #1
 800674c:	d505      	bpl.n	800675a <_fwalk_sglue+0x22>
 800674e:	6824      	ldr	r4, [r4, #0]
 8006750:	2c00      	cmp	r4, #0
 8006752:	d1f7      	bne.n	8006744 <_fwalk_sglue+0xc>
 8006754:	4630      	mov	r0, r6
 8006756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675a:	89ab      	ldrh	r3, [r5, #12]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d907      	bls.n	8006770 <_fwalk_sglue+0x38>
 8006760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006764:	3301      	adds	r3, #1
 8006766:	d003      	beq.n	8006770 <_fwalk_sglue+0x38>
 8006768:	4629      	mov	r1, r5
 800676a:	4638      	mov	r0, r7
 800676c:	47c0      	blx	r8
 800676e:	4306      	orrs	r6, r0
 8006770:	3568      	adds	r5, #104	@ 0x68
 8006772:	e7e9      	b.n	8006748 <_fwalk_sglue+0x10>

08006774 <__sread>:
 8006774:	b510      	push	{r4, lr}
 8006776:	460c      	mov	r4, r1
 8006778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677c:	f000 f86c 	bl	8006858 <_read_r>
 8006780:	2800      	cmp	r0, #0
 8006782:	bfab      	itete	ge
 8006784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006786:	89a3      	ldrhlt	r3, [r4, #12]
 8006788:	181b      	addge	r3, r3, r0
 800678a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800678e:	bfac      	ite	ge
 8006790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006792:	81a3      	strhlt	r3, [r4, #12]
 8006794:	bd10      	pop	{r4, pc}

08006796 <__swrite>:
 8006796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679a:	461f      	mov	r7, r3
 800679c:	898b      	ldrh	r3, [r1, #12]
 800679e:	05db      	lsls	r3, r3, #23
 80067a0:	4605      	mov	r5, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	4616      	mov	r6, r2
 80067a6:	d505      	bpl.n	80067b4 <__swrite+0x1e>
 80067a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ac:	2302      	movs	r3, #2
 80067ae:	2200      	movs	r2, #0
 80067b0:	f000 f840 	bl	8006834 <_lseek_r>
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	4632      	mov	r2, r6
 80067c2:	463b      	mov	r3, r7
 80067c4:	4628      	mov	r0, r5
 80067c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ca:	f000 b857 	b.w	800687c <_write_r>

080067ce <__sseek>:
 80067ce:	b510      	push	{r4, lr}
 80067d0:	460c      	mov	r4, r1
 80067d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d6:	f000 f82d 	bl	8006834 <_lseek_r>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	bf15      	itete	ne
 80067e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067ea:	81a3      	strheq	r3, [r4, #12]
 80067ec:	bf18      	it	ne
 80067ee:	81a3      	strhne	r3, [r4, #12]
 80067f0:	bd10      	pop	{r4, pc}

080067f2 <__sclose>:
 80067f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f6:	f000 b80d 	b.w	8006814 <_close_r>

080067fa <memset>:
 80067fa:	4402      	add	r2, r0
 80067fc:	4603      	mov	r3, r0
 80067fe:	4293      	cmp	r3, r2
 8006800:	d100      	bne.n	8006804 <memset+0xa>
 8006802:	4770      	bx	lr
 8006804:	f803 1b01 	strb.w	r1, [r3], #1
 8006808:	e7f9      	b.n	80067fe <memset+0x4>
	...

0800680c <_localeconv_r>:
 800680c:	4800      	ldr	r0, [pc, #0]	@ (8006810 <_localeconv_r+0x4>)
 800680e:	4770      	bx	lr
 8006810:	20000160 	.word	0x20000160

08006814 <_close_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d06      	ldr	r5, [pc, #24]	@ (8006830 <_close_r+0x1c>)
 8006818:	2300      	movs	r3, #0
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fa ff02 	bl	8001628 <_close>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_close_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_close_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	2000049c 	.word	0x2000049c

08006834 <_lseek_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d07      	ldr	r5, [pc, #28]	@ (8006854 <_lseek_r+0x20>)
 8006838:	4604      	mov	r4, r0
 800683a:	4608      	mov	r0, r1
 800683c:	4611      	mov	r1, r2
 800683e:	2200      	movs	r2, #0
 8006840:	602a      	str	r2, [r5, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fa ff17 	bl	8001676 <_lseek>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_lseek_r+0x1e>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_lseek_r+0x1e>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	2000049c 	.word	0x2000049c

08006858 <_read_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4d07      	ldr	r5, [pc, #28]	@ (8006878 <_read_r+0x20>)
 800685c:	4604      	mov	r4, r0
 800685e:	4608      	mov	r0, r1
 8006860:	4611      	mov	r1, r2
 8006862:	2200      	movs	r2, #0
 8006864:	602a      	str	r2, [r5, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f7fa fea5 	bl	80015b6 <_read>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_read_r+0x1e>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_read_r+0x1e>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	2000049c 	.word	0x2000049c

0800687c <_write_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4d07      	ldr	r5, [pc, #28]	@ (800689c <_write_r+0x20>)
 8006880:	4604      	mov	r4, r0
 8006882:	4608      	mov	r0, r1
 8006884:	4611      	mov	r1, r2
 8006886:	2200      	movs	r2, #0
 8006888:	602a      	str	r2, [r5, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	f7fa feb0 	bl	80015f0 <_write>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_write_r+0x1e>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b103      	cbz	r3, 800689a <_write_r+0x1e>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	2000049c 	.word	0x2000049c

080068a0 <__errno>:
 80068a0:	4b01      	ldr	r3, [pc, #4]	@ (80068a8 <__errno+0x8>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000020 	.word	0x20000020

080068ac <__libc_init_array>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	4d0d      	ldr	r5, [pc, #52]	@ (80068e4 <__libc_init_array+0x38>)
 80068b0:	4c0d      	ldr	r4, [pc, #52]	@ (80068e8 <__libc_init_array+0x3c>)
 80068b2:	1b64      	subs	r4, r4, r5
 80068b4:	10a4      	asrs	r4, r4, #2
 80068b6:	2600      	movs	r6, #0
 80068b8:	42a6      	cmp	r6, r4
 80068ba:	d109      	bne.n	80068d0 <__libc_init_array+0x24>
 80068bc:	4d0b      	ldr	r5, [pc, #44]	@ (80068ec <__libc_init_array+0x40>)
 80068be:	4c0c      	ldr	r4, [pc, #48]	@ (80068f0 <__libc_init_array+0x44>)
 80068c0:	f001 febe 	bl	8008640 <_init>
 80068c4:	1b64      	subs	r4, r4, r5
 80068c6:	10a4      	asrs	r4, r4, #2
 80068c8:	2600      	movs	r6, #0
 80068ca:	42a6      	cmp	r6, r4
 80068cc:	d105      	bne.n	80068da <__libc_init_array+0x2e>
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d4:	4798      	blx	r3
 80068d6:	3601      	adds	r6, #1
 80068d8:	e7ee      	b.n	80068b8 <__libc_init_array+0xc>
 80068da:	f855 3b04 	ldr.w	r3, [r5], #4
 80068de:	4798      	blx	r3
 80068e0:	3601      	adds	r6, #1
 80068e2:	e7f2      	b.n	80068ca <__libc_init_array+0x1e>
 80068e4:	08008a78 	.word	0x08008a78
 80068e8:	08008a78 	.word	0x08008a78
 80068ec:	08008a78 	.word	0x08008a78
 80068f0:	08008a7c 	.word	0x08008a7c

080068f4 <__retarget_lock_init_recursive>:
 80068f4:	4770      	bx	lr

080068f6 <__retarget_lock_acquire_recursive>:
 80068f6:	4770      	bx	lr

080068f8 <__retarget_lock_release_recursive>:
 80068f8:	4770      	bx	lr

080068fa <quorem>:
 80068fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fe:	6903      	ldr	r3, [r0, #16]
 8006900:	690c      	ldr	r4, [r1, #16]
 8006902:	42a3      	cmp	r3, r4
 8006904:	4607      	mov	r7, r0
 8006906:	db7e      	blt.n	8006a06 <quorem+0x10c>
 8006908:	3c01      	subs	r4, #1
 800690a:	f101 0814 	add.w	r8, r1, #20
 800690e:	00a3      	lsls	r3, r4, #2
 8006910:	f100 0514 	add.w	r5, r0, #20
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006924:	3301      	adds	r3, #1
 8006926:	429a      	cmp	r2, r3
 8006928:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800692c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006930:	d32e      	bcc.n	8006990 <quorem+0x96>
 8006932:	f04f 0a00 	mov.w	sl, #0
 8006936:	46c4      	mov	ip, r8
 8006938:	46ae      	mov	lr, r5
 800693a:	46d3      	mov	fp, sl
 800693c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006940:	b298      	uxth	r0, r3
 8006942:	fb06 a000 	mla	r0, r6, r0, sl
 8006946:	0c02      	lsrs	r2, r0, #16
 8006948:	0c1b      	lsrs	r3, r3, #16
 800694a:	fb06 2303 	mla	r3, r6, r3, r2
 800694e:	f8de 2000 	ldr.w	r2, [lr]
 8006952:	b280      	uxth	r0, r0
 8006954:	b292      	uxth	r2, r2
 8006956:	1a12      	subs	r2, r2, r0
 8006958:	445a      	add	r2, fp
 800695a:	f8de 0000 	ldr.w	r0, [lr]
 800695e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006962:	b29b      	uxth	r3, r3
 8006964:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006968:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800696c:	b292      	uxth	r2, r2
 800696e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006972:	45e1      	cmp	r9, ip
 8006974:	f84e 2b04 	str.w	r2, [lr], #4
 8006978:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800697c:	d2de      	bcs.n	800693c <quorem+0x42>
 800697e:	9b00      	ldr	r3, [sp, #0]
 8006980:	58eb      	ldr	r3, [r5, r3]
 8006982:	b92b      	cbnz	r3, 8006990 <quorem+0x96>
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	3b04      	subs	r3, #4
 8006988:	429d      	cmp	r5, r3
 800698a:	461a      	mov	r2, r3
 800698c:	d32f      	bcc.n	80069ee <quorem+0xf4>
 800698e:	613c      	str	r4, [r7, #16]
 8006990:	4638      	mov	r0, r7
 8006992:	f001 f97b 	bl	8007c8c <__mcmp>
 8006996:	2800      	cmp	r0, #0
 8006998:	db25      	blt.n	80069e6 <quorem+0xec>
 800699a:	4629      	mov	r1, r5
 800699c:	2000      	movs	r0, #0
 800699e:	f858 2b04 	ldr.w	r2, [r8], #4
 80069a2:	f8d1 c000 	ldr.w	ip, [r1]
 80069a6:	fa1f fe82 	uxth.w	lr, r2
 80069aa:	fa1f f38c 	uxth.w	r3, ip
 80069ae:	eba3 030e 	sub.w	r3, r3, lr
 80069b2:	4403      	add	r3, r0
 80069b4:	0c12      	lsrs	r2, r2, #16
 80069b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069be:	b29b      	uxth	r3, r3
 80069c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069c4:	45c1      	cmp	r9, r8
 80069c6:	f841 3b04 	str.w	r3, [r1], #4
 80069ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069ce:	d2e6      	bcs.n	800699e <quorem+0xa4>
 80069d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069d8:	b922      	cbnz	r2, 80069e4 <quorem+0xea>
 80069da:	3b04      	subs	r3, #4
 80069dc:	429d      	cmp	r5, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	d30b      	bcc.n	80069fa <quorem+0x100>
 80069e2:	613c      	str	r4, [r7, #16]
 80069e4:	3601      	adds	r6, #1
 80069e6:	4630      	mov	r0, r6
 80069e8:	b003      	add	sp, #12
 80069ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	3b04      	subs	r3, #4
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	d1cb      	bne.n	800698e <quorem+0x94>
 80069f6:	3c01      	subs	r4, #1
 80069f8:	e7c6      	b.n	8006988 <quorem+0x8e>
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	3b04      	subs	r3, #4
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	d1ef      	bne.n	80069e2 <quorem+0xe8>
 8006a02:	3c01      	subs	r4, #1
 8006a04:	e7ea      	b.n	80069dc <quorem+0xe2>
 8006a06:	2000      	movs	r0, #0
 8006a08:	e7ee      	b.n	80069e8 <quorem+0xee>
 8006a0a:	0000      	movs	r0, r0
 8006a0c:	0000      	movs	r0, r0
	...

08006a10 <_dtoa_r>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	69c7      	ldr	r7, [r0, #28]
 8006a16:	b099      	sub	sp, #100	@ 0x64
 8006a18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a1c:	ec55 4b10 	vmov	r4, r5, d0
 8006a20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a22:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a24:	4683      	mov	fp, r0
 8006a26:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a2a:	b97f      	cbnz	r7, 8006a4c <_dtoa_r+0x3c>
 8006a2c:	2010      	movs	r0, #16
 8006a2e:	f000 fdfd 	bl	800762c <malloc>
 8006a32:	4602      	mov	r2, r0
 8006a34:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a38:	b920      	cbnz	r0, 8006a44 <_dtoa_r+0x34>
 8006a3a:	4ba7      	ldr	r3, [pc, #668]	@ (8006cd8 <_dtoa_r+0x2c8>)
 8006a3c:	21ef      	movs	r1, #239	@ 0xef
 8006a3e:	48a7      	ldr	r0, [pc, #668]	@ (8006cdc <_dtoa_r+0x2cc>)
 8006a40:	f001 faf6 	bl	8008030 <__assert_func>
 8006a44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a48:	6007      	str	r7, [r0, #0]
 8006a4a:	60c7      	str	r7, [r0, #12]
 8006a4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a50:	6819      	ldr	r1, [r3, #0]
 8006a52:	b159      	cbz	r1, 8006a6c <_dtoa_r+0x5c>
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	604a      	str	r2, [r1, #4]
 8006a58:	2301      	movs	r3, #1
 8006a5a:	4093      	lsls	r3, r2
 8006a5c:	608b      	str	r3, [r1, #8]
 8006a5e:	4658      	mov	r0, fp
 8006a60:	f000 feda 	bl	8007818 <_Bfree>
 8006a64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	1e2b      	subs	r3, r5, #0
 8006a6e:	bfb9      	ittee	lt
 8006a70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a74:	9303      	strlt	r3, [sp, #12]
 8006a76:	2300      	movge	r3, #0
 8006a78:	6033      	strge	r3, [r6, #0]
 8006a7a:	9f03      	ldr	r7, [sp, #12]
 8006a7c:	4b98      	ldr	r3, [pc, #608]	@ (8006ce0 <_dtoa_r+0x2d0>)
 8006a7e:	bfbc      	itt	lt
 8006a80:	2201      	movlt	r2, #1
 8006a82:	6032      	strlt	r2, [r6, #0]
 8006a84:	43bb      	bics	r3, r7
 8006a86:	d112      	bne.n	8006aae <_dtoa_r+0x9e>
 8006a88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a94:	4323      	orrs	r3, r4
 8006a96:	f000 854d 	beq.w	8007534 <_dtoa_r+0xb24>
 8006a9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006cf4 <_dtoa_r+0x2e4>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 854f 	beq.w	8007544 <_dtoa_r+0xb34>
 8006aa6:	f10a 0303 	add.w	r3, sl, #3
 8006aaa:	f000 bd49 	b.w	8007540 <_dtoa_r+0xb30>
 8006aae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	ec51 0b17 	vmov	r0, r1, d7
 8006ab8:	2300      	movs	r3, #0
 8006aba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006abe:	f7fa f803 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	b158      	cbz	r0, 8006ade <_dtoa_r+0xce>
 8006ac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ac8:	2301      	movs	r3, #1
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ace:	b113      	cbz	r3, 8006ad6 <_dtoa_r+0xc6>
 8006ad0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ad2:	4b84      	ldr	r3, [pc, #528]	@ (8006ce4 <_dtoa_r+0x2d4>)
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006cf8 <_dtoa_r+0x2e8>
 8006ada:	f000 bd33 	b.w	8007544 <_dtoa_r+0xb34>
 8006ade:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ae2:	aa16      	add	r2, sp, #88	@ 0x58
 8006ae4:	a917      	add	r1, sp, #92	@ 0x5c
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f001 f980 	bl	8007dec <__d2b>
 8006aec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006af0:	4681      	mov	r9, r0
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	d077      	beq.n	8006be6 <_dtoa_r+0x1d6>
 8006af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006af8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b10:	4619      	mov	r1, r3
 8006b12:	2200      	movs	r2, #0
 8006b14:	4b74      	ldr	r3, [pc, #464]	@ (8006ce8 <_dtoa_r+0x2d8>)
 8006b16:	f7f9 fbb7 	bl	8000288 <__aeabi_dsub>
 8006b1a:	a369      	add	r3, pc, #420	@ (adr r3, 8006cc0 <_dtoa_r+0x2b0>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fd6a 	bl	80005f8 <__aeabi_dmul>
 8006b24:	a368      	add	r3, pc, #416	@ (adr r3, 8006cc8 <_dtoa_r+0x2b8>)
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f7f9 fbaf 	bl	800028c <__adddf3>
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4630      	mov	r0, r6
 8006b32:	460d      	mov	r5, r1
 8006b34:	f7f9 fcf6 	bl	8000524 <__aeabi_i2d>
 8006b38:	a365      	add	r3, pc, #404	@ (adr r3, 8006cd0 <_dtoa_r+0x2c0>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f7f9 fd5b 	bl	80005f8 <__aeabi_dmul>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 fb9f 	bl	800028c <__adddf3>
 8006b4e:	4604      	mov	r4, r0
 8006b50:	460d      	mov	r5, r1
 8006b52:	f7fa f801 	bl	8000b58 <__aeabi_d2iz>
 8006b56:	2200      	movs	r2, #0
 8006b58:	4607      	mov	r7, r0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7f9 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8006b64:	b140      	cbz	r0, 8006b78 <_dtoa_r+0x168>
 8006b66:	4638      	mov	r0, r7
 8006b68:	f7f9 fcdc 	bl	8000524 <__aeabi_i2d>
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	462b      	mov	r3, r5
 8006b70:	f7f9 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b74:	b900      	cbnz	r0, 8006b78 <_dtoa_r+0x168>
 8006b76:	3f01      	subs	r7, #1
 8006b78:	2f16      	cmp	r7, #22
 8006b7a:	d851      	bhi.n	8006c20 <_dtoa_r+0x210>
 8006b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006cec <_dtoa_r+0x2dc>)
 8006b7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b8a:	f7f9 ffa7 	bl	8000adc <__aeabi_dcmplt>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d048      	beq.n	8006c24 <_dtoa_r+0x214>
 8006b92:	3f01      	subs	r7, #1
 8006b94:	2300      	movs	r3, #0
 8006b96:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b9a:	1b9b      	subs	r3, r3, r6
 8006b9c:	1e5a      	subs	r2, r3, #1
 8006b9e:	bf44      	itt	mi
 8006ba0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006ba4:	2300      	movmi	r3, #0
 8006ba6:	9208      	str	r2, [sp, #32]
 8006ba8:	bf54      	ite	pl
 8006baa:	f04f 0800 	movpl.w	r8, #0
 8006bae:	9308      	strmi	r3, [sp, #32]
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	db39      	blt.n	8006c28 <_dtoa_r+0x218>
 8006bb4:	9b08      	ldr	r3, [sp, #32]
 8006bb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006bb8:	443b      	add	r3, r7
 8006bba:	9308      	str	r3, [sp, #32]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc2:	2b09      	cmp	r3, #9
 8006bc4:	d864      	bhi.n	8006c90 <_dtoa_r+0x280>
 8006bc6:	2b05      	cmp	r3, #5
 8006bc8:	bfc4      	itt	gt
 8006bca:	3b04      	subgt	r3, #4
 8006bcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd0:	f1a3 0302 	sub.w	r3, r3, #2
 8006bd4:	bfcc      	ite	gt
 8006bd6:	2400      	movgt	r4, #0
 8006bd8:	2401      	movle	r4, #1
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d863      	bhi.n	8006ca6 <_dtoa_r+0x296>
 8006bde:	e8df f003 	tbb	[pc, r3]
 8006be2:	372a      	.short	0x372a
 8006be4:	5535      	.short	0x5535
 8006be6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006bea:	441e      	add	r6, r3
 8006bec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	bfc1      	itttt	gt
 8006bf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bf8:	409f      	lslgt	r7, r3
 8006bfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006bfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c02:	bfd6      	itet	le
 8006c04:	f1c3 0320 	rsble	r3, r3, #32
 8006c08:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c0c:	fa04 f003 	lslle.w	r0, r4, r3
 8006c10:	f7f9 fc78 	bl	8000504 <__aeabi_ui2d>
 8006c14:	2201      	movs	r2, #1
 8006c16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c1a:	3e01      	subs	r6, #1
 8006c1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c1e:	e777      	b.n	8006b10 <_dtoa_r+0x100>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e7b8      	b.n	8006b96 <_dtoa_r+0x186>
 8006c24:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c26:	e7b7      	b.n	8006b98 <_dtoa_r+0x188>
 8006c28:	427b      	negs	r3, r7
 8006c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	eba8 0807 	sub.w	r8, r8, r7
 8006c32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c34:	e7c4      	b.n	8006bc0 <_dtoa_r+0x1b0>
 8006c36:	2300      	movs	r3, #0
 8006c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dc35      	bgt.n	8006cac <_dtoa_r+0x29c>
 8006c40:	2301      	movs	r3, #1
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	461a      	mov	r2, r3
 8006c48:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c4a:	e00b      	b.n	8006c64 <_dtoa_r+0x254>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e7f3      	b.n	8006c38 <_dtoa_r+0x228>
 8006c50:	2300      	movs	r3, #0
 8006c52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c56:	18fb      	adds	r3, r7, r3
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	9307      	str	r3, [sp, #28]
 8006c60:	bfb8      	it	lt
 8006c62:	2301      	movlt	r3, #1
 8006c64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c68:	2100      	movs	r1, #0
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f102 0514 	add.w	r5, r2, #20
 8006c70:	429d      	cmp	r5, r3
 8006c72:	d91f      	bls.n	8006cb4 <_dtoa_r+0x2a4>
 8006c74:	6041      	str	r1, [r0, #4]
 8006c76:	4658      	mov	r0, fp
 8006c78:	f000 fd8e 	bl	8007798 <_Balloc>
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d13c      	bne.n	8006cfc <_dtoa_r+0x2ec>
 8006c82:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf0 <_dtoa_r+0x2e0>)
 8006c84:	4602      	mov	r2, r0
 8006c86:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c8a:	e6d8      	b.n	8006a3e <_dtoa_r+0x2e>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e7e0      	b.n	8006c52 <_dtoa_r+0x242>
 8006c90:	2401      	movs	r4, #1
 8006c92:	2300      	movs	r3, #0
 8006c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c98:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	9307      	str	r3, [sp, #28]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2312      	movs	r3, #18
 8006ca4:	e7d0      	b.n	8006c48 <_dtoa_r+0x238>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006caa:	e7f5      	b.n	8006c98 <_dtoa_r+0x288>
 8006cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	9307      	str	r3, [sp, #28]
 8006cb2:	e7d7      	b.n	8006c64 <_dtoa_r+0x254>
 8006cb4:	3101      	adds	r1, #1
 8006cb6:	0052      	lsls	r2, r2, #1
 8006cb8:	e7d8      	b.n	8006c6c <_dtoa_r+0x25c>
 8006cba:	bf00      	nop
 8006cbc:	f3af 8000 	nop.w
 8006cc0:	636f4361 	.word	0x636f4361
 8006cc4:	3fd287a7 	.word	0x3fd287a7
 8006cc8:	8b60c8b3 	.word	0x8b60c8b3
 8006ccc:	3fc68a28 	.word	0x3fc68a28
 8006cd0:	509f79fb 	.word	0x509f79fb
 8006cd4:	3fd34413 	.word	0x3fd34413
 8006cd8:	0800873d 	.word	0x0800873d
 8006cdc:	08008754 	.word	0x08008754
 8006ce0:	7ff00000 	.word	0x7ff00000
 8006ce4:	0800870d 	.word	0x0800870d
 8006ce8:	3ff80000 	.word	0x3ff80000
 8006cec:	08008850 	.word	0x08008850
 8006cf0:	080087ac 	.word	0x080087ac
 8006cf4:	08008739 	.word	0x08008739
 8006cf8:	0800870c 	.word	0x0800870c
 8006cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d00:	6018      	str	r0, [r3, #0]
 8006d02:	9b07      	ldr	r3, [sp, #28]
 8006d04:	2b0e      	cmp	r3, #14
 8006d06:	f200 80a4 	bhi.w	8006e52 <_dtoa_r+0x442>
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	f000 80a1 	beq.w	8006e52 <_dtoa_r+0x442>
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	dd33      	ble.n	8006d7c <_dtoa_r+0x36c>
 8006d14:	4bad      	ldr	r3, [pc, #692]	@ (8006fcc <_dtoa_r+0x5bc>)
 8006d16:	f007 020f 	and.w	r2, r7, #15
 8006d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1e:	ed93 7b00 	vldr	d7, [r3]
 8006d22:	05f8      	lsls	r0, r7, #23
 8006d24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d2c:	d516      	bpl.n	8006d5c <_dtoa_r+0x34c>
 8006d2e:	4ba8      	ldr	r3, [pc, #672]	@ (8006fd0 <_dtoa_r+0x5c0>)
 8006d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d38:	f7f9 fd88 	bl	800084c <__aeabi_ddiv>
 8006d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d40:	f004 040f 	and.w	r4, r4, #15
 8006d44:	2603      	movs	r6, #3
 8006d46:	4da2      	ldr	r5, [pc, #648]	@ (8006fd0 <_dtoa_r+0x5c0>)
 8006d48:	b954      	cbnz	r4, 8006d60 <_dtoa_r+0x350>
 8006d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d52:	f7f9 fd7b 	bl	800084c <__aeabi_ddiv>
 8006d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5a:	e028      	b.n	8006dae <_dtoa_r+0x39e>
 8006d5c:	2602      	movs	r6, #2
 8006d5e:	e7f2      	b.n	8006d46 <_dtoa_r+0x336>
 8006d60:	07e1      	lsls	r1, r4, #31
 8006d62:	d508      	bpl.n	8006d76 <_dtoa_r+0x366>
 8006d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d6c:	f7f9 fc44 	bl	80005f8 <__aeabi_dmul>
 8006d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d74:	3601      	adds	r6, #1
 8006d76:	1064      	asrs	r4, r4, #1
 8006d78:	3508      	adds	r5, #8
 8006d7a:	e7e5      	b.n	8006d48 <_dtoa_r+0x338>
 8006d7c:	f000 80d2 	beq.w	8006f24 <_dtoa_r+0x514>
 8006d80:	427c      	negs	r4, r7
 8006d82:	4b92      	ldr	r3, [pc, #584]	@ (8006fcc <_dtoa_r+0x5bc>)
 8006d84:	4d92      	ldr	r5, [pc, #584]	@ (8006fd0 <_dtoa_r+0x5c0>)
 8006d86:	f004 020f 	and.w	r2, r4, #15
 8006d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d96:	f7f9 fc2f 	bl	80005f8 <__aeabi_dmul>
 8006d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9e:	1124      	asrs	r4, r4, #4
 8006da0:	2300      	movs	r3, #0
 8006da2:	2602      	movs	r6, #2
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	f040 80b2 	bne.w	8006f0e <_dtoa_r+0x4fe>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1d3      	bne.n	8006d56 <_dtoa_r+0x346>
 8006dae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006db0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80b7 	beq.w	8006f28 <_dtoa_r+0x518>
 8006dba:	4b86      	ldr	r3, [pc, #536]	@ (8006fd4 <_dtoa_r+0x5c4>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7f9 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f000 80ae 	beq.w	8006f28 <_dtoa_r+0x518>
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 80aa 	beq.w	8006f28 <_dtoa_r+0x518>
 8006dd4:	9b00      	ldr	r3, [sp, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dd37      	ble.n	8006e4a <_dtoa_r+0x43a>
 8006dda:	1e7b      	subs	r3, r7, #1
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	4620      	mov	r0, r4
 8006de0:	4b7d      	ldr	r3, [pc, #500]	@ (8006fd8 <_dtoa_r+0x5c8>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	4629      	mov	r1, r5
 8006de6:	f7f9 fc07 	bl	80005f8 <__aeabi_dmul>
 8006dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dee:	9c00      	ldr	r4, [sp, #0]
 8006df0:	3601      	adds	r6, #1
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7f9 fb96 	bl	8000524 <__aeabi_i2d>
 8006df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dfc:	f7f9 fbfc 	bl	80005f8 <__aeabi_dmul>
 8006e00:	4b76      	ldr	r3, [pc, #472]	@ (8006fdc <_dtoa_r+0x5cc>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	f7f9 fa42 	bl	800028c <__adddf3>
 8006e08:	4605      	mov	r5, r0
 8006e0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e0e:	2c00      	cmp	r4, #0
 8006e10:	f040 808d 	bne.w	8006f2e <_dtoa_r+0x51e>
 8006e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e18:	4b71      	ldr	r3, [pc, #452]	@ (8006fe0 <_dtoa_r+0x5d0>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f7f9 fa34 	bl	8000288 <__aeabi_dsub>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4633      	mov	r3, r6
 8006e2c:	f7f9 fe74 	bl	8000b18 <__aeabi_dcmpgt>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	f040 828b 	bne.w	800734c <_dtoa_r+0x93c>
 8006e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e40:	f7f9 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f040 8128 	bne.w	800709a <_dtoa_r+0x68a>
 8006e4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f2c0 815a 	blt.w	800710e <_dtoa_r+0x6fe>
 8006e5a:	2f0e      	cmp	r7, #14
 8006e5c:	f300 8157 	bgt.w	800710e <_dtoa_r+0x6fe>
 8006e60:	4b5a      	ldr	r3, [pc, #360]	@ (8006fcc <_dtoa_r+0x5bc>)
 8006e62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e66:	ed93 7b00 	vldr	d7, [r3]
 8006e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	ed8d 7b00 	vstr	d7, [sp]
 8006e72:	da03      	bge.n	8006e7c <_dtoa_r+0x46c>
 8006e74:	9b07      	ldr	r3, [sp, #28]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f340 8101 	ble.w	800707e <_dtoa_r+0x66e>
 8006e7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e80:	4656      	mov	r6, sl
 8006e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fcdf 	bl	800084c <__aeabi_ddiv>
 8006e8e:	f7f9 fe63 	bl	8000b58 <__aeabi_d2iz>
 8006e92:	4680      	mov	r8, r0
 8006e94:	f7f9 fb46 	bl	8000524 <__aeabi_i2d>
 8006e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e9c:	f7f9 fbac 	bl	80005f8 <__aeabi_dmul>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006eac:	f7f9 f9ec 	bl	8000288 <__aeabi_dsub>
 8006eb0:	f806 4b01 	strb.w	r4, [r6], #1
 8006eb4:	9d07      	ldr	r5, [sp, #28]
 8006eb6:	eba6 040a 	sub.w	r4, r6, sl
 8006eba:	42a5      	cmp	r5, r4
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	f040 8117 	bne.w	80070f2 <_dtoa_r+0x6e2>
 8006ec4:	f7f9 f9e2 	bl	800028c <__adddf3>
 8006ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	f7f9 fe22 	bl	8000b18 <__aeabi_dcmpgt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f040 80f9 	bne.w	80070cc <_dtoa_r+0x6bc>
 8006eda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee6:	b118      	cbz	r0, 8006ef0 <_dtoa_r+0x4e0>
 8006ee8:	f018 0f01 	tst.w	r8, #1
 8006eec:	f040 80ee 	bne.w	80070cc <_dtoa_r+0x6bc>
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4658      	mov	r0, fp
 8006ef4:	f000 fc90 	bl	8007818 <_Bfree>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	7033      	strb	r3, [r6, #0]
 8006efc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006efe:	3701      	adds	r7, #1
 8006f00:	601f      	str	r7, [r3, #0]
 8006f02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 831d 	beq.w	8007544 <_dtoa_r+0xb34>
 8006f0a:	601e      	str	r6, [r3, #0]
 8006f0c:	e31a      	b.n	8007544 <_dtoa_r+0xb34>
 8006f0e:	07e2      	lsls	r2, r4, #31
 8006f10:	d505      	bpl.n	8006f1e <_dtoa_r+0x50e>
 8006f12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f16:	f7f9 fb6f 	bl	80005f8 <__aeabi_dmul>
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	1064      	asrs	r4, r4, #1
 8006f20:	3508      	adds	r5, #8
 8006f22:	e73f      	b.n	8006da4 <_dtoa_r+0x394>
 8006f24:	2602      	movs	r6, #2
 8006f26:	e742      	b.n	8006dae <_dtoa_r+0x39e>
 8006f28:	9c07      	ldr	r4, [sp, #28]
 8006f2a:	9704      	str	r7, [sp, #16]
 8006f2c:	e761      	b.n	8006df2 <_dtoa_r+0x3e2>
 8006f2e:	4b27      	ldr	r3, [pc, #156]	@ (8006fcc <_dtoa_r+0x5bc>)
 8006f30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f3a:	4454      	add	r4, sl
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	d053      	beq.n	8006fe8 <_dtoa_r+0x5d8>
 8006f40:	4928      	ldr	r1, [pc, #160]	@ (8006fe4 <_dtoa_r+0x5d4>)
 8006f42:	2000      	movs	r0, #0
 8006f44:	f7f9 fc82 	bl	800084c <__aeabi_ddiv>
 8006f48:	4633      	mov	r3, r6
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	f7f9 f99c 	bl	8000288 <__aeabi_dsub>
 8006f50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f54:	4656      	mov	r6, sl
 8006f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f5a:	f7f9 fdfd 	bl	8000b58 <__aeabi_d2iz>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	f7f9 fae0 	bl	8000524 <__aeabi_i2d>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f6c:	f7f9 f98c 	bl	8000288 <__aeabi_dsub>
 8006f70:	3530      	adds	r5, #48	@ 0x30
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f7a:	f806 5b01 	strb.w	r5, [r6], #1
 8006f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f82:	f7f9 fdab 	bl	8000adc <__aeabi_dcmplt>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d171      	bne.n	800706e <_dtoa_r+0x65e>
 8006f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f8e:	4911      	ldr	r1, [pc, #68]	@ (8006fd4 <_dtoa_r+0x5c4>)
 8006f90:	2000      	movs	r0, #0
 8006f92:	f7f9 f979 	bl	8000288 <__aeabi_dsub>
 8006f96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f9a:	f7f9 fd9f 	bl	8000adc <__aeabi_dcmplt>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f040 8095 	bne.w	80070ce <_dtoa_r+0x6be>
 8006fa4:	42a6      	cmp	r6, r4
 8006fa6:	f43f af50 	beq.w	8006e4a <_dtoa_r+0x43a>
 8006faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fae:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <_dtoa_r+0x5c8>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f7f9 fb21 	bl	80005f8 <__aeabi_dmul>
 8006fb6:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <_dtoa_r+0x5c8>)
 8006fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fc2:	f7f9 fb19 	bl	80005f8 <__aeabi_dmul>
 8006fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fca:	e7c4      	b.n	8006f56 <_dtoa_r+0x546>
 8006fcc:	08008850 	.word	0x08008850
 8006fd0:	08008828 	.word	0x08008828
 8006fd4:	3ff00000 	.word	0x3ff00000
 8006fd8:	40240000 	.word	0x40240000
 8006fdc:	401c0000 	.word	0x401c0000
 8006fe0:	40140000 	.word	0x40140000
 8006fe4:	3fe00000 	.word	0x3fe00000
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4628      	mov	r0, r5
 8006fec:	f7f9 fb04 	bl	80005f8 <__aeabi_dmul>
 8006ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ff4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ff6:	4656      	mov	r6, sl
 8006ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffc:	f7f9 fdac 	bl	8000b58 <__aeabi_d2iz>
 8007000:	4605      	mov	r5, r0
 8007002:	f7f9 fa8f 	bl	8000524 <__aeabi_i2d>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700e:	f7f9 f93b 	bl	8000288 <__aeabi_dsub>
 8007012:	3530      	adds	r5, #48	@ 0x30
 8007014:	f806 5b01 	strb.w	r5, [r6], #1
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	42a6      	cmp	r6, r4
 800701e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	d124      	bne.n	8007072 <_dtoa_r+0x662>
 8007028:	4bac      	ldr	r3, [pc, #688]	@ (80072dc <_dtoa_r+0x8cc>)
 800702a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800702e:	f7f9 f92d 	bl	800028c <__adddf3>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800703a:	f7f9 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 800703e:	2800      	cmp	r0, #0
 8007040:	d145      	bne.n	80070ce <_dtoa_r+0x6be>
 8007042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007046:	49a5      	ldr	r1, [pc, #660]	@ (80072dc <_dtoa_r+0x8cc>)
 8007048:	2000      	movs	r0, #0
 800704a:	f7f9 f91d 	bl	8000288 <__aeabi_dsub>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007056:	f7f9 fd41 	bl	8000adc <__aeabi_dcmplt>
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f aef5 	beq.w	8006e4a <_dtoa_r+0x43a>
 8007060:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007062:	1e73      	subs	r3, r6, #1
 8007064:	9315      	str	r3, [sp, #84]	@ 0x54
 8007066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800706a:	2b30      	cmp	r3, #48	@ 0x30
 800706c:	d0f8      	beq.n	8007060 <_dtoa_r+0x650>
 800706e:	9f04      	ldr	r7, [sp, #16]
 8007070:	e73e      	b.n	8006ef0 <_dtoa_r+0x4e0>
 8007072:	4b9b      	ldr	r3, [pc, #620]	@ (80072e0 <_dtoa_r+0x8d0>)
 8007074:	f7f9 fac0 	bl	80005f8 <__aeabi_dmul>
 8007078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800707c:	e7bc      	b.n	8006ff8 <_dtoa_r+0x5e8>
 800707e:	d10c      	bne.n	800709a <_dtoa_r+0x68a>
 8007080:	4b98      	ldr	r3, [pc, #608]	@ (80072e4 <_dtoa_r+0x8d4>)
 8007082:	2200      	movs	r2, #0
 8007084:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007088:	f7f9 fab6 	bl	80005f8 <__aeabi_dmul>
 800708c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007090:	f7f9 fd38 	bl	8000b04 <__aeabi_dcmpge>
 8007094:	2800      	cmp	r0, #0
 8007096:	f000 8157 	beq.w	8007348 <_dtoa_r+0x938>
 800709a:	2400      	movs	r4, #0
 800709c:	4625      	mov	r5, r4
 800709e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a0:	43db      	mvns	r3, r3
 80070a2:	9304      	str	r3, [sp, #16]
 80070a4:	4656      	mov	r6, sl
 80070a6:	2700      	movs	r7, #0
 80070a8:	4621      	mov	r1, r4
 80070aa:	4658      	mov	r0, fp
 80070ac:	f000 fbb4 	bl	8007818 <_Bfree>
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	d0dc      	beq.n	800706e <_dtoa_r+0x65e>
 80070b4:	b12f      	cbz	r7, 80070c2 <_dtoa_r+0x6b2>
 80070b6:	42af      	cmp	r7, r5
 80070b8:	d003      	beq.n	80070c2 <_dtoa_r+0x6b2>
 80070ba:	4639      	mov	r1, r7
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fbab 	bl	8007818 <_Bfree>
 80070c2:	4629      	mov	r1, r5
 80070c4:	4658      	mov	r0, fp
 80070c6:	f000 fba7 	bl	8007818 <_Bfree>
 80070ca:	e7d0      	b.n	800706e <_dtoa_r+0x65e>
 80070cc:	9704      	str	r7, [sp, #16]
 80070ce:	4633      	mov	r3, r6
 80070d0:	461e      	mov	r6, r3
 80070d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070d6:	2a39      	cmp	r2, #57	@ 0x39
 80070d8:	d107      	bne.n	80070ea <_dtoa_r+0x6da>
 80070da:	459a      	cmp	sl, r3
 80070dc:	d1f8      	bne.n	80070d0 <_dtoa_r+0x6c0>
 80070de:	9a04      	ldr	r2, [sp, #16]
 80070e0:	3201      	adds	r2, #1
 80070e2:	9204      	str	r2, [sp, #16]
 80070e4:	2230      	movs	r2, #48	@ 0x30
 80070e6:	f88a 2000 	strb.w	r2, [sl]
 80070ea:	781a      	ldrb	r2, [r3, #0]
 80070ec:	3201      	adds	r2, #1
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	e7bd      	b.n	800706e <_dtoa_r+0x65e>
 80070f2:	4b7b      	ldr	r3, [pc, #492]	@ (80072e0 <_dtoa_r+0x8d0>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	f7f9 fa7f 	bl	80005f8 <__aeabi_dmul>
 80070fa:	2200      	movs	r2, #0
 80070fc:	2300      	movs	r3, #0
 80070fe:	4604      	mov	r4, r0
 8007100:	460d      	mov	r5, r1
 8007102:	f7f9 fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007106:	2800      	cmp	r0, #0
 8007108:	f43f aebb 	beq.w	8006e82 <_dtoa_r+0x472>
 800710c:	e6f0      	b.n	8006ef0 <_dtoa_r+0x4e0>
 800710e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007110:	2a00      	cmp	r2, #0
 8007112:	f000 80db 	beq.w	80072cc <_dtoa_r+0x8bc>
 8007116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007118:	2a01      	cmp	r2, #1
 800711a:	f300 80bf 	bgt.w	800729c <_dtoa_r+0x88c>
 800711e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007120:	2a00      	cmp	r2, #0
 8007122:	f000 80b7 	beq.w	8007294 <_dtoa_r+0x884>
 8007126:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800712a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800712c:	4646      	mov	r6, r8
 800712e:	9a08      	ldr	r2, [sp, #32]
 8007130:	2101      	movs	r1, #1
 8007132:	441a      	add	r2, r3
 8007134:	4658      	mov	r0, fp
 8007136:	4498      	add	r8, r3
 8007138:	9208      	str	r2, [sp, #32]
 800713a:	f000 fc21 	bl	8007980 <__i2b>
 800713e:	4605      	mov	r5, r0
 8007140:	b15e      	cbz	r6, 800715a <_dtoa_r+0x74a>
 8007142:	9b08      	ldr	r3, [sp, #32]
 8007144:	2b00      	cmp	r3, #0
 8007146:	dd08      	ble.n	800715a <_dtoa_r+0x74a>
 8007148:	42b3      	cmp	r3, r6
 800714a:	9a08      	ldr	r2, [sp, #32]
 800714c:	bfa8      	it	ge
 800714e:	4633      	movge	r3, r6
 8007150:	eba8 0803 	sub.w	r8, r8, r3
 8007154:	1af6      	subs	r6, r6, r3
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	9308      	str	r3, [sp, #32]
 800715a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800715c:	b1f3      	cbz	r3, 800719c <_dtoa_r+0x78c>
 800715e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80b7 	beq.w	80072d4 <_dtoa_r+0x8c4>
 8007166:	b18c      	cbz	r4, 800718c <_dtoa_r+0x77c>
 8007168:	4629      	mov	r1, r5
 800716a:	4622      	mov	r2, r4
 800716c:	4658      	mov	r0, fp
 800716e:	f000 fcc7 	bl	8007b00 <__pow5mult>
 8007172:	464a      	mov	r2, r9
 8007174:	4601      	mov	r1, r0
 8007176:	4605      	mov	r5, r0
 8007178:	4658      	mov	r0, fp
 800717a:	f000 fc17 	bl	80079ac <__multiply>
 800717e:	4649      	mov	r1, r9
 8007180:	9004      	str	r0, [sp, #16]
 8007182:	4658      	mov	r0, fp
 8007184:	f000 fb48 	bl	8007818 <_Bfree>
 8007188:	9b04      	ldr	r3, [sp, #16]
 800718a:	4699      	mov	r9, r3
 800718c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800718e:	1b1a      	subs	r2, r3, r4
 8007190:	d004      	beq.n	800719c <_dtoa_r+0x78c>
 8007192:	4649      	mov	r1, r9
 8007194:	4658      	mov	r0, fp
 8007196:	f000 fcb3 	bl	8007b00 <__pow5mult>
 800719a:	4681      	mov	r9, r0
 800719c:	2101      	movs	r1, #1
 800719e:	4658      	mov	r0, fp
 80071a0:	f000 fbee 	bl	8007980 <__i2b>
 80071a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071a6:	4604      	mov	r4, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 81cf 	beq.w	800754c <_dtoa_r+0xb3c>
 80071ae:	461a      	mov	r2, r3
 80071b0:	4601      	mov	r1, r0
 80071b2:	4658      	mov	r0, fp
 80071b4:	f000 fca4 	bl	8007b00 <__pow5mult>
 80071b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	4604      	mov	r4, r0
 80071be:	f300 8095 	bgt.w	80072ec <_dtoa_r+0x8dc>
 80071c2:	9b02      	ldr	r3, [sp, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 8087 	bne.w	80072d8 <_dtoa_r+0x8c8>
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8089 	bne.w	80072e8 <_dtoa_r+0x8d8>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071dc:	0d1b      	lsrs	r3, r3, #20
 80071de:	051b      	lsls	r3, r3, #20
 80071e0:	b12b      	cbz	r3, 80071ee <_dtoa_r+0x7de>
 80071e2:	9b08      	ldr	r3, [sp, #32]
 80071e4:	3301      	adds	r3, #1
 80071e6:	9308      	str	r3, [sp, #32]
 80071e8:	f108 0801 	add.w	r8, r8, #1
 80071ec:	2301      	movs	r3, #1
 80071ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 81b0 	beq.w	8007558 <_dtoa_r+0xb48>
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071fe:	6918      	ldr	r0, [r3, #16]
 8007200:	f000 fb72 	bl	80078e8 <__hi0bits>
 8007204:	f1c0 0020 	rsb	r0, r0, #32
 8007208:	9b08      	ldr	r3, [sp, #32]
 800720a:	4418      	add	r0, r3
 800720c:	f010 001f 	ands.w	r0, r0, #31
 8007210:	d077      	beq.n	8007302 <_dtoa_r+0x8f2>
 8007212:	f1c0 0320 	rsb	r3, r0, #32
 8007216:	2b04      	cmp	r3, #4
 8007218:	dd6b      	ble.n	80072f2 <_dtoa_r+0x8e2>
 800721a:	9b08      	ldr	r3, [sp, #32]
 800721c:	f1c0 001c 	rsb	r0, r0, #28
 8007220:	4403      	add	r3, r0
 8007222:	4480      	add	r8, r0
 8007224:	4406      	add	r6, r0
 8007226:	9308      	str	r3, [sp, #32]
 8007228:	f1b8 0f00 	cmp.w	r8, #0
 800722c:	dd05      	ble.n	800723a <_dtoa_r+0x82a>
 800722e:	4649      	mov	r1, r9
 8007230:	4642      	mov	r2, r8
 8007232:	4658      	mov	r0, fp
 8007234:	f000 fcbe 	bl	8007bb4 <__lshift>
 8007238:	4681      	mov	r9, r0
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	2b00      	cmp	r3, #0
 800723e:	dd05      	ble.n	800724c <_dtoa_r+0x83c>
 8007240:	4621      	mov	r1, r4
 8007242:	461a      	mov	r2, r3
 8007244:	4658      	mov	r0, fp
 8007246:	f000 fcb5 	bl	8007bb4 <__lshift>
 800724a:	4604      	mov	r4, r0
 800724c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800724e:	2b00      	cmp	r3, #0
 8007250:	d059      	beq.n	8007306 <_dtoa_r+0x8f6>
 8007252:	4621      	mov	r1, r4
 8007254:	4648      	mov	r0, r9
 8007256:	f000 fd19 	bl	8007c8c <__mcmp>
 800725a:	2800      	cmp	r0, #0
 800725c:	da53      	bge.n	8007306 <_dtoa_r+0x8f6>
 800725e:	1e7b      	subs	r3, r7, #1
 8007260:	9304      	str	r3, [sp, #16]
 8007262:	4649      	mov	r1, r9
 8007264:	2300      	movs	r3, #0
 8007266:	220a      	movs	r2, #10
 8007268:	4658      	mov	r0, fp
 800726a:	f000 faf7 	bl	800785c <__multadd>
 800726e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007270:	4681      	mov	r9, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 8172 	beq.w	800755c <_dtoa_r+0xb4c>
 8007278:	2300      	movs	r3, #0
 800727a:	4629      	mov	r1, r5
 800727c:	220a      	movs	r2, #10
 800727e:	4658      	mov	r0, fp
 8007280:	f000 faec 	bl	800785c <__multadd>
 8007284:	9b00      	ldr	r3, [sp, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	4605      	mov	r5, r0
 800728a:	dc67      	bgt.n	800735c <_dtoa_r+0x94c>
 800728c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800728e:	2b02      	cmp	r3, #2
 8007290:	dc41      	bgt.n	8007316 <_dtoa_r+0x906>
 8007292:	e063      	b.n	800735c <_dtoa_r+0x94c>
 8007294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800729a:	e746      	b.n	800712a <_dtoa_r+0x71a>
 800729c:	9b07      	ldr	r3, [sp, #28]
 800729e:	1e5c      	subs	r4, r3, #1
 80072a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072a2:	42a3      	cmp	r3, r4
 80072a4:	bfbf      	itttt	lt
 80072a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80072a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80072aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072ac:	1ae3      	sublt	r3, r4, r3
 80072ae:	bfb4      	ite	lt
 80072b0:	18d2      	addlt	r2, r2, r3
 80072b2:	1b1c      	subge	r4, r3, r4
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	bfbc      	itt	lt
 80072b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80072ba:	2400      	movlt	r4, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfb5      	itete	lt
 80072c0:	eba8 0603 	sublt.w	r6, r8, r3
 80072c4:	9b07      	ldrge	r3, [sp, #28]
 80072c6:	2300      	movlt	r3, #0
 80072c8:	4646      	movge	r6, r8
 80072ca:	e730      	b.n	800712e <_dtoa_r+0x71e>
 80072cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072d0:	4646      	mov	r6, r8
 80072d2:	e735      	b.n	8007140 <_dtoa_r+0x730>
 80072d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072d6:	e75c      	b.n	8007192 <_dtoa_r+0x782>
 80072d8:	2300      	movs	r3, #0
 80072da:	e788      	b.n	80071ee <_dtoa_r+0x7de>
 80072dc:	3fe00000 	.word	0x3fe00000
 80072e0:	40240000 	.word	0x40240000
 80072e4:	40140000 	.word	0x40140000
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	e780      	b.n	80071ee <_dtoa_r+0x7de>
 80072ec:	2300      	movs	r3, #0
 80072ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f0:	e782      	b.n	80071f8 <_dtoa_r+0x7e8>
 80072f2:	d099      	beq.n	8007228 <_dtoa_r+0x818>
 80072f4:	9a08      	ldr	r2, [sp, #32]
 80072f6:	331c      	adds	r3, #28
 80072f8:	441a      	add	r2, r3
 80072fa:	4498      	add	r8, r3
 80072fc:	441e      	add	r6, r3
 80072fe:	9208      	str	r2, [sp, #32]
 8007300:	e792      	b.n	8007228 <_dtoa_r+0x818>
 8007302:	4603      	mov	r3, r0
 8007304:	e7f6      	b.n	80072f4 <_dtoa_r+0x8e4>
 8007306:	9b07      	ldr	r3, [sp, #28]
 8007308:	9704      	str	r7, [sp, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	dc20      	bgt.n	8007350 <_dtoa_r+0x940>
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007312:	2b02      	cmp	r3, #2
 8007314:	dd1e      	ble.n	8007354 <_dtoa_r+0x944>
 8007316:	9b00      	ldr	r3, [sp, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f47f aec0 	bne.w	800709e <_dtoa_r+0x68e>
 800731e:	4621      	mov	r1, r4
 8007320:	2205      	movs	r2, #5
 8007322:	4658      	mov	r0, fp
 8007324:	f000 fa9a 	bl	800785c <__multadd>
 8007328:	4601      	mov	r1, r0
 800732a:	4604      	mov	r4, r0
 800732c:	4648      	mov	r0, r9
 800732e:	f000 fcad 	bl	8007c8c <__mcmp>
 8007332:	2800      	cmp	r0, #0
 8007334:	f77f aeb3 	ble.w	800709e <_dtoa_r+0x68e>
 8007338:	4656      	mov	r6, sl
 800733a:	2331      	movs	r3, #49	@ 0x31
 800733c:	f806 3b01 	strb.w	r3, [r6], #1
 8007340:	9b04      	ldr	r3, [sp, #16]
 8007342:	3301      	adds	r3, #1
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	e6ae      	b.n	80070a6 <_dtoa_r+0x696>
 8007348:	9c07      	ldr	r4, [sp, #28]
 800734a:	9704      	str	r7, [sp, #16]
 800734c:	4625      	mov	r5, r4
 800734e:	e7f3      	b.n	8007338 <_dtoa_r+0x928>
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8104 	beq.w	8007564 <_dtoa_r+0xb54>
 800735c:	2e00      	cmp	r6, #0
 800735e:	dd05      	ble.n	800736c <_dtoa_r+0x95c>
 8007360:	4629      	mov	r1, r5
 8007362:	4632      	mov	r2, r6
 8007364:	4658      	mov	r0, fp
 8007366:	f000 fc25 	bl	8007bb4 <__lshift>
 800736a:	4605      	mov	r5, r0
 800736c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	d05a      	beq.n	8007428 <_dtoa_r+0xa18>
 8007372:	6869      	ldr	r1, [r5, #4]
 8007374:	4658      	mov	r0, fp
 8007376:	f000 fa0f 	bl	8007798 <_Balloc>
 800737a:	4606      	mov	r6, r0
 800737c:	b928      	cbnz	r0, 800738a <_dtoa_r+0x97a>
 800737e:	4b84      	ldr	r3, [pc, #528]	@ (8007590 <_dtoa_r+0xb80>)
 8007380:	4602      	mov	r2, r0
 8007382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007386:	f7ff bb5a 	b.w	8006a3e <_dtoa_r+0x2e>
 800738a:	692a      	ldr	r2, [r5, #16]
 800738c:	3202      	adds	r2, #2
 800738e:	0092      	lsls	r2, r2, #2
 8007390:	f105 010c 	add.w	r1, r5, #12
 8007394:	300c      	adds	r0, #12
 8007396:	f000 fe3d 	bl	8008014 <memcpy>
 800739a:	2201      	movs	r2, #1
 800739c:	4631      	mov	r1, r6
 800739e:	4658      	mov	r0, fp
 80073a0:	f000 fc08 	bl	8007bb4 <__lshift>
 80073a4:	f10a 0301 	add.w	r3, sl, #1
 80073a8:	9307      	str	r3, [sp, #28]
 80073aa:	9b00      	ldr	r3, [sp, #0]
 80073ac:	4453      	add	r3, sl
 80073ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073b0:	9b02      	ldr	r3, [sp, #8]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	462f      	mov	r7, r5
 80073b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ba:	4605      	mov	r5, r0
 80073bc:	9b07      	ldr	r3, [sp, #28]
 80073be:	4621      	mov	r1, r4
 80073c0:	3b01      	subs	r3, #1
 80073c2:	4648      	mov	r0, r9
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	f7ff fa98 	bl	80068fa <quorem>
 80073ca:	4639      	mov	r1, r7
 80073cc:	9002      	str	r0, [sp, #8]
 80073ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073d2:	4648      	mov	r0, r9
 80073d4:	f000 fc5a 	bl	8007c8c <__mcmp>
 80073d8:	462a      	mov	r2, r5
 80073da:	9008      	str	r0, [sp, #32]
 80073dc:	4621      	mov	r1, r4
 80073de:	4658      	mov	r0, fp
 80073e0:	f000 fc70 	bl	8007cc4 <__mdiff>
 80073e4:	68c2      	ldr	r2, [r0, #12]
 80073e6:	4606      	mov	r6, r0
 80073e8:	bb02      	cbnz	r2, 800742c <_dtoa_r+0xa1c>
 80073ea:	4601      	mov	r1, r0
 80073ec:	4648      	mov	r0, r9
 80073ee:	f000 fc4d 	bl	8007c8c <__mcmp>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4631      	mov	r1, r6
 80073f6:	4658      	mov	r0, fp
 80073f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80073fa:	f000 fa0d 	bl	8007818 <_Bfree>
 80073fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007402:	9e07      	ldr	r6, [sp, #28]
 8007404:	ea43 0102 	orr.w	r1, r3, r2
 8007408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800740a:	4319      	orrs	r1, r3
 800740c:	d110      	bne.n	8007430 <_dtoa_r+0xa20>
 800740e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007412:	d029      	beq.n	8007468 <_dtoa_r+0xa58>
 8007414:	9b08      	ldr	r3, [sp, #32]
 8007416:	2b00      	cmp	r3, #0
 8007418:	dd02      	ble.n	8007420 <_dtoa_r+0xa10>
 800741a:	9b02      	ldr	r3, [sp, #8]
 800741c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007420:	9b00      	ldr	r3, [sp, #0]
 8007422:	f883 8000 	strb.w	r8, [r3]
 8007426:	e63f      	b.n	80070a8 <_dtoa_r+0x698>
 8007428:	4628      	mov	r0, r5
 800742a:	e7bb      	b.n	80073a4 <_dtoa_r+0x994>
 800742c:	2201      	movs	r2, #1
 800742e:	e7e1      	b.n	80073f4 <_dtoa_r+0x9e4>
 8007430:	9b08      	ldr	r3, [sp, #32]
 8007432:	2b00      	cmp	r3, #0
 8007434:	db04      	blt.n	8007440 <_dtoa_r+0xa30>
 8007436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007438:	430b      	orrs	r3, r1
 800743a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800743c:	430b      	orrs	r3, r1
 800743e:	d120      	bne.n	8007482 <_dtoa_r+0xa72>
 8007440:	2a00      	cmp	r2, #0
 8007442:	dded      	ble.n	8007420 <_dtoa_r+0xa10>
 8007444:	4649      	mov	r1, r9
 8007446:	2201      	movs	r2, #1
 8007448:	4658      	mov	r0, fp
 800744a:	f000 fbb3 	bl	8007bb4 <__lshift>
 800744e:	4621      	mov	r1, r4
 8007450:	4681      	mov	r9, r0
 8007452:	f000 fc1b 	bl	8007c8c <__mcmp>
 8007456:	2800      	cmp	r0, #0
 8007458:	dc03      	bgt.n	8007462 <_dtoa_r+0xa52>
 800745a:	d1e1      	bne.n	8007420 <_dtoa_r+0xa10>
 800745c:	f018 0f01 	tst.w	r8, #1
 8007460:	d0de      	beq.n	8007420 <_dtoa_r+0xa10>
 8007462:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007466:	d1d8      	bne.n	800741a <_dtoa_r+0xa0a>
 8007468:	9a00      	ldr	r2, [sp, #0]
 800746a:	2339      	movs	r3, #57	@ 0x39
 800746c:	7013      	strb	r3, [r2, #0]
 800746e:	4633      	mov	r3, r6
 8007470:	461e      	mov	r6, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007478:	2a39      	cmp	r2, #57	@ 0x39
 800747a:	d052      	beq.n	8007522 <_dtoa_r+0xb12>
 800747c:	3201      	adds	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	e612      	b.n	80070a8 <_dtoa_r+0x698>
 8007482:	2a00      	cmp	r2, #0
 8007484:	dd07      	ble.n	8007496 <_dtoa_r+0xa86>
 8007486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800748a:	d0ed      	beq.n	8007468 <_dtoa_r+0xa58>
 800748c:	9a00      	ldr	r2, [sp, #0]
 800748e:	f108 0301 	add.w	r3, r8, #1
 8007492:	7013      	strb	r3, [r2, #0]
 8007494:	e608      	b.n	80070a8 <_dtoa_r+0x698>
 8007496:	9b07      	ldr	r3, [sp, #28]
 8007498:	9a07      	ldr	r2, [sp, #28]
 800749a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800749e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d028      	beq.n	80074f6 <_dtoa_r+0xae6>
 80074a4:	4649      	mov	r1, r9
 80074a6:	2300      	movs	r3, #0
 80074a8:	220a      	movs	r2, #10
 80074aa:	4658      	mov	r0, fp
 80074ac:	f000 f9d6 	bl	800785c <__multadd>
 80074b0:	42af      	cmp	r7, r5
 80074b2:	4681      	mov	r9, r0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	f04f 020a 	mov.w	r2, #10
 80074bc:	4639      	mov	r1, r7
 80074be:	4658      	mov	r0, fp
 80074c0:	d107      	bne.n	80074d2 <_dtoa_r+0xac2>
 80074c2:	f000 f9cb 	bl	800785c <__multadd>
 80074c6:	4607      	mov	r7, r0
 80074c8:	4605      	mov	r5, r0
 80074ca:	9b07      	ldr	r3, [sp, #28]
 80074cc:	3301      	adds	r3, #1
 80074ce:	9307      	str	r3, [sp, #28]
 80074d0:	e774      	b.n	80073bc <_dtoa_r+0x9ac>
 80074d2:	f000 f9c3 	bl	800785c <__multadd>
 80074d6:	4629      	mov	r1, r5
 80074d8:	4607      	mov	r7, r0
 80074da:	2300      	movs	r3, #0
 80074dc:	220a      	movs	r2, #10
 80074de:	4658      	mov	r0, fp
 80074e0:	f000 f9bc 	bl	800785c <__multadd>
 80074e4:	4605      	mov	r5, r0
 80074e6:	e7f0      	b.n	80074ca <_dtoa_r+0xaba>
 80074e8:	9b00      	ldr	r3, [sp, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bfcc      	ite	gt
 80074ee:	461e      	movgt	r6, r3
 80074f0:	2601      	movle	r6, #1
 80074f2:	4456      	add	r6, sl
 80074f4:	2700      	movs	r7, #0
 80074f6:	4649      	mov	r1, r9
 80074f8:	2201      	movs	r2, #1
 80074fa:	4658      	mov	r0, fp
 80074fc:	f000 fb5a 	bl	8007bb4 <__lshift>
 8007500:	4621      	mov	r1, r4
 8007502:	4681      	mov	r9, r0
 8007504:	f000 fbc2 	bl	8007c8c <__mcmp>
 8007508:	2800      	cmp	r0, #0
 800750a:	dcb0      	bgt.n	800746e <_dtoa_r+0xa5e>
 800750c:	d102      	bne.n	8007514 <_dtoa_r+0xb04>
 800750e:	f018 0f01 	tst.w	r8, #1
 8007512:	d1ac      	bne.n	800746e <_dtoa_r+0xa5e>
 8007514:	4633      	mov	r3, r6
 8007516:	461e      	mov	r6, r3
 8007518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800751c:	2a30      	cmp	r2, #48	@ 0x30
 800751e:	d0fa      	beq.n	8007516 <_dtoa_r+0xb06>
 8007520:	e5c2      	b.n	80070a8 <_dtoa_r+0x698>
 8007522:	459a      	cmp	sl, r3
 8007524:	d1a4      	bne.n	8007470 <_dtoa_r+0xa60>
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	3301      	adds	r3, #1
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	2331      	movs	r3, #49	@ 0x31
 800752e:	f88a 3000 	strb.w	r3, [sl]
 8007532:	e5b9      	b.n	80070a8 <_dtoa_r+0x698>
 8007534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007536:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007594 <_dtoa_r+0xb84>
 800753a:	b11b      	cbz	r3, 8007544 <_dtoa_r+0xb34>
 800753c:	f10a 0308 	add.w	r3, sl, #8
 8007540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	4650      	mov	r0, sl
 8007546:	b019      	add	sp, #100	@ 0x64
 8007548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754e:	2b01      	cmp	r3, #1
 8007550:	f77f ae37 	ble.w	80071c2 <_dtoa_r+0x7b2>
 8007554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007556:	930a      	str	r3, [sp, #40]	@ 0x28
 8007558:	2001      	movs	r0, #1
 800755a:	e655      	b.n	8007208 <_dtoa_r+0x7f8>
 800755c:	9b00      	ldr	r3, [sp, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f77f aed6 	ble.w	8007310 <_dtoa_r+0x900>
 8007564:	4656      	mov	r6, sl
 8007566:	4621      	mov	r1, r4
 8007568:	4648      	mov	r0, r9
 800756a:	f7ff f9c6 	bl	80068fa <quorem>
 800756e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007572:	f806 8b01 	strb.w	r8, [r6], #1
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	eba6 020a 	sub.w	r2, r6, sl
 800757c:	4293      	cmp	r3, r2
 800757e:	ddb3      	ble.n	80074e8 <_dtoa_r+0xad8>
 8007580:	4649      	mov	r1, r9
 8007582:	2300      	movs	r3, #0
 8007584:	220a      	movs	r2, #10
 8007586:	4658      	mov	r0, fp
 8007588:	f000 f968 	bl	800785c <__multadd>
 800758c:	4681      	mov	r9, r0
 800758e:	e7ea      	b.n	8007566 <_dtoa_r+0xb56>
 8007590:	080087ac 	.word	0x080087ac
 8007594:	08008730 	.word	0x08008730

08007598 <_free_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4605      	mov	r5, r0
 800759c:	2900      	cmp	r1, #0
 800759e:	d041      	beq.n	8007624 <_free_r+0x8c>
 80075a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a4:	1f0c      	subs	r4, r1, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bfb8      	it	lt
 80075aa:	18e4      	addlt	r4, r4, r3
 80075ac:	f000 f8e8 	bl	8007780 <__malloc_lock>
 80075b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007628 <_free_r+0x90>)
 80075b2:	6813      	ldr	r3, [r2, #0]
 80075b4:	b933      	cbnz	r3, 80075c4 <_free_r+0x2c>
 80075b6:	6063      	str	r3, [r4, #4]
 80075b8:	6014      	str	r4, [r2, #0]
 80075ba:	4628      	mov	r0, r5
 80075bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c0:	f000 b8e4 	b.w	800778c <__malloc_unlock>
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	d908      	bls.n	80075da <_free_r+0x42>
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	1821      	adds	r1, r4, r0
 80075cc:	428b      	cmp	r3, r1
 80075ce:	bf01      	itttt	eq
 80075d0:	6819      	ldreq	r1, [r3, #0]
 80075d2:	685b      	ldreq	r3, [r3, #4]
 80075d4:	1809      	addeq	r1, r1, r0
 80075d6:	6021      	streq	r1, [r4, #0]
 80075d8:	e7ed      	b.n	80075b6 <_free_r+0x1e>
 80075da:	461a      	mov	r2, r3
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	b10b      	cbz	r3, 80075e4 <_free_r+0x4c>
 80075e0:	42a3      	cmp	r3, r4
 80075e2:	d9fa      	bls.n	80075da <_free_r+0x42>
 80075e4:	6811      	ldr	r1, [r2, #0]
 80075e6:	1850      	adds	r0, r2, r1
 80075e8:	42a0      	cmp	r0, r4
 80075ea:	d10b      	bne.n	8007604 <_free_r+0x6c>
 80075ec:	6820      	ldr	r0, [r4, #0]
 80075ee:	4401      	add	r1, r0
 80075f0:	1850      	adds	r0, r2, r1
 80075f2:	4283      	cmp	r3, r0
 80075f4:	6011      	str	r1, [r2, #0]
 80075f6:	d1e0      	bne.n	80075ba <_free_r+0x22>
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	6053      	str	r3, [r2, #4]
 80075fe:	4408      	add	r0, r1
 8007600:	6010      	str	r0, [r2, #0]
 8007602:	e7da      	b.n	80075ba <_free_r+0x22>
 8007604:	d902      	bls.n	800760c <_free_r+0x74>
 8007606:	230c      	movs	r3, #12
 8007608:	602b      	str	r3, [r5, #0]
 800760a:	e7d6      	b.n	80075ba <_free_r+0x22>
 800760c:	6820      	ldr	r0, [r4, #0]
 800760e:	1821      	adds	r1, r4, r0
 8007610:	428b      	cmp	r3, r1
 8007612:	bf04      	itt	eq
 8007614:	6819      	ldreq	r1, [r3, #0]
 8007616:	685b      	ldreq	r3, [r3, #4]
 8007618:	6063      	str	r3, [r4, #4]
 800761a:	bf04      	itt	eq
 800761c:	1809      	addeq	r1, r1, r0
 800761e:	6021      	streq	r1, [r4, #0]
 8007620:	6054      	str	r4, [r2, #4]
 8007622:	e7ca      	b.n	80075ba <_free_r+0x22>
 8007624:	bd38      	pop	{r3, r4, r5, pc}
 8007626:	bf00      	nop
 8007628:	200004a8 	.word	0x200004a8

0800762c <malloc>:
 800762c:	4b02      	ldr	r3, [pc, #8]	@ (8007638 <malloc+0xc>)
 800762e:	4601      	mov	r1, r0
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f000 b825 	b.w	8007680 <_malloc_r>
 8007636:	bf00      	nop
 8007638:	20000020 	.word	0x20000020

0800763c <sbrk_aligned>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4e0f      	ldr	r6, [pc, #60]	@ (800767c <sbrk_aligned+0x40>)
 8007640:	460c      	mov	r4, r1
 8007642:	6831      	ldr	r1, [r6, #0]
 8007644:	4605      	mov	r5, r0
 8007646:	b911      	cbnz	r1, 800764e <sbrk_aligned+0x12>
 8007648:	f000 fcd4 	bl	8007ff4 <_sbrk_r>
 800764c:	6030      	str	r0, [r6, #0]
 800764e:	4621      	mov	r1, r4
 8007650:	4628      	mov	r0, r5
 8007652:	f000 fccf 	bl	8007ff4 <_sbrk_r>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	d103      	bne.n	8007662 <sbrk_aligned+0x26>
 800765a:	f04f 34ff 	mov.w	r4, #4294967295
 800765e:	4620      	mov	r0, r4
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	1cc4      	adds	r4, r0, #3
 8007664:	f024 0403 	bic.w	r4, r4, #3
 8007668:	42a0      	cmp	r0, r4
 800766a:	d0f8      	beq.n	800765e <sbrk_aligned+0x22>
 800766c:	1a21      	subs	r1, r4, r0
 800766e:	4628      	mov	r0, r5
 8007670:	f000 fcc0 	bl	8007ff4 <_sbrk_r>
 8007674:	3001      	adds	r0, #1
 8007676:	d1f2      	bne.n	800765e <sbrk_aligned+0x22>
 8007678:	e7ef      	b.n	800765a <sbrk_aligned+0x1e>
 800767a:	bf00      	nop
 800767c:	200004a4 	.word	0x200004a4

08007680 <_malloc_r>:
 8007680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007684:	1ccd      	adds	r5, r1, #3
 8007686:	f025 0503 	bic.w	r5, r5, #3
 800768a:	3508      	adds	r5, #8
 800768c:	2d0c      	cmp	r5, #12
 800768e:	bf38      	it	cc
 8007690:	250c      	movcc	r5, #12
 8007692:	2d00      	cmp	r5, #0
 8007694:	4606      	mov	r6, r0
 8007696:	db01      	blt.n	800769c <_malloc_r+0x1c>
 8007698:	42a9      	cmp	r1, r5
 800769a:	d904      	bls.n	80076a6 <_malloc_r+0x26>
 800769c:	230c      	movs	r3, #12
 800769e:	6033      	str	r3, [r6, #0]
 80076a0:	2000      	movs	r0, #0
 80076a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800777c <_malloc_r+0xfc>
 80076aa:	f000 f869 	bl	8007780 <__malloc_lock>
 80076ae:	f8d8 3000 	ldr.w	r3, [r8]
 80076b2:	461c      	mov	r4, r3
 80076b4:	bb44      	cbnz	r4, 8007708 <_malloc_r+0x88>
 80076b6:	4629      	mov	r1, r5
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff ffbf 	bl	800763c <sbrk_aligned>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	4604      	mov	r4, r0
 80076c2:	d158      	bne.n	8007776 <_malloc_r+0xf6>
 80076c4:	f8d8 4000 	ldr.w	r4, [r8]
 80076c8:	4627      	mov	r7, r4
 80076ca:	2f00      	cmp	r7, #0
 80076cc:	d143      	bne.n	8007756 <_malloc_r+0xd6>
 80076ce:	2c00      	cmp	r4, #0
 80076d0:	d04b      	beq.n	800776a <_malloc_r+0xea>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	4639      	mov	r1, r7
 80076d6:	4630      	mov	r0, r6
 80076d8:	eb04 0903 	add.w	r9, r4, r3
 80076dc:	f000 fc8a 	bl	8007ff4 <_sbrk_r>
 80076e0:	4581      	cmp	r9, r0
 80076e2:	d142      	bne.n	800776a <_malloc_r+0xea>
 80076e4:	6821      	ldr	r1, [r4, #0]
 80076e6:	1a6d      	subs	r5, r5, r1
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ffa6 	bl	800763c <sbrk_aligned>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d03a      	beq.n	800776a <_malloc_r+0xea>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	442b      	add	r3, r5
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	f8d8 3000 	ldr.w	r3, [r8]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	bb62      	cbnz	r2, 800775c <_malloc_r+0xdc>
 8007702:	f8c8 7000 	str.w	r7, [r8]
 8007706:	e00f      	b.n	8007728 <_malloc_r+0xa8>
 8007708:	6822      	ldr	r2, [r4, #0]
 800770a:	1b52      	subs	r2, r2, r5
 800770c:	d420      	bmi.n	8007750 <_malloc_r+0xd0>
 800770e:	2a0b      	cmp	r2, #11
 8007710:	d917      	bls.n	8007742 <_malloc_r+0xc2>
 8007712:	1961      	adds	r1, r4, r5
 8007714:	42a3      	cmp	r3, r4
 8007716:	6025      	str	r5, [r4, #0]
 8007718:	bf18      	it	ne
 800771a:	6059      	strne	r1, [r3, #4]
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	bf08      	it	eq
 8007720:	f8c8 1000 	streq.w	r1, [r8]
 8007724:	5162      	str	r2, [r4, r5]
 8007726:	604b      	str	r3, [r1, #4]
 8007728:	4630      	mov	r0, r6
 800772a:	f000 f82f 	bl	800778c <__malloc_unlock>
 800772e:	f104 000b 	add.w	r0, r4, #11
 8007732:	1d23      	adds	r3, r4, #4
 8007734:	f020 0007 	bic.w	r0, r0, #7
 8007738:	1ac2      	subs	r2, r0, r3
 800773a:	bf1c      	itt	ne
 800773c:	1a1b      	subne	r3, r3, r0
 800773e:	50a3      	strne	r3, [r4, r2]
 8007740:	e7af      	b.n	80076a2 <_malloc_r+0x22>
 8007742:	6862      	ldr	r2, [r4, #4]
 8007744:	42a3      	cmp	r3, r4
 8007746:	bf0c      	ite	eq
 8007748:	f8c8 2000 	streq.w	r2, [r8]
 800774c:	605a      	strne	r2, [r3, #4]
 800774e:	e7eb      	b.n	8007728 <_malloc_r+0xa8>
 8007750:	4623      	mov	r3, r4
 8007752:	6864      	ldr	r4, [r4, #4]
 8007754:	e7ae      	b.n	80076b4 <_malloc_r+0x34>
 8007756:	463c      	mov	r4, r7
 8007758:	687f      	ldr	r7, [r7, #4]
 800775a:	e7b6      	b.n	80076ca <_malloc_r+0x4a>
 800775c:	461a      	mov	r2, r3
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	42a3      	cmp	r3, r4
 8007762:	d1fb      	bne.n	800775c <_malloc_r+0xdc>
 8007764:	2300      	movs	r3, #0
 8007766:	6053      	str	r3, [r2, #4]
 8007768:	e7de      	b.n	8007728 <_malloc_r+0xa8>
 800776a:	230c      	movs	r3, #12
 800776c:	6033      	str	r3, [r6, #0]
 800776e:	4630      	mov	r0, r6
 8007770:	f000 f80c 	bl	800778c <__malloc_unlock>
 8007774:	e794      	b.n	80076a0 <_malloc_r+0x20>
 8007776:	6005      	str	r5, [r0, #0]
 8007778:	e7d6      	b.n	8007728 <_malloc_r+0xa8>
 800777a:	bf00      	nop
 800777c:	200004a8 	.word	0x200004a8

08007780 <__malloc_lock>:
 8007780:	4801      	ldr	r0, [pc, #4]	@ (8007788 <__malloc_lock+0x8>)
 8007782:	f7ff b8b8 	b.w	80068f6 <__retarget_lock_acquire_recursive>
 8007786:	bf00      	nop
 8007788:	200004a0 	.word	0x200004a0

0800778c <__malloc_unlock>:
 800778c:	4801      	ldr	r0, [pc, #4]	@ (8007794 <__malloc_unlock+0x8>)
 800778e:	f7ff b8b3 	b.w	80068f8 <__retarget_lock_release_recursive>
 8007792:	bf00      	nop
 8007794:	200004a0 	.word	0x200004a0

08007798 <_Balloc>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	69c6      	ldr	r6, [r0, #28]
 800779c:	4604      	mov	r4, r0
 800779e:	460d      	mov	r5, r1
 80077a0:	b976      	cbnz	r6, 80077c0 <_Balloc+0x28>
 80077a2:	2010      	movs	r0, #16
 80077a4:	f7ff ff42 	bl	800762c <malloc>
 80077a8:	4602      	mov	r2, r0
 80077aa:	61e0      	str	r0, [r4, #28]
 80077ac:	b920      	cbnz	r0, 80077b8 <_Balloc+0x20>
 80077ae:	4b18      	ldr	r3, [pc, #96]	@ (8007810 <_Balloc+0x78>)
 80077b0:	4818      	ldr	r0, [pc, #96]	@ (8007814 <_Balloc+0x7c>)
 80077b2:	216b      	movs	r1, #107	@ 0x6b
 80077b4:	f000 fc3c 	bl	8008030 <__assert_func>
 80077b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077bc:	6006      	str	r6, [r0, #0]
 80077be:	60c6      	str	r6, [r0, #12]
 80077c0:	69e6      	ldr	r6, [r4, #28]
 80077c2:	68f3      	ldr	r3, [r6, #12]
 80077c4:	b183      	cbz	r3, 80077e8 <_Balloc+0x50>
 80077c6:	69e3      	ldr	r3, [r4, #28]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077ce:	b9b8      	cbnz	r0, 8007800 <_Balloc+0x68>
 80077d0:	2101      	movs	r1, #1
 80077d2:	fa01 f605 	lsl.w	r6, r1, r5
 80077d6:	1d72      	adds	r2, r6, #5
 80077d8:	0092      	lsls	r2, r2, #2
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 fc46 	bl	800806c <_calloc_r>
 80077e0:	b160      	cbz	r0, 80077fc <_Balloc+0x64>
 80077e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077e6:	e00e      	b.n	8007806 <_Balloc+0x6e>
 80077e8:	2221      	movs	r2, #33	@ 0x21
 80077ea:	2104      	movs	r1, #4
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fc3d 	bl	800806c <_calloc_r>
 80077f2:	69e3      	ldr	r3, [r4, #28]
 80077f4:	60f0      	str	r0, [r6, #12]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e4      	bne.n	80077c6 <_Balloc+0x2e>
 80077fc:	2000      	movs	r0, #0
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	6802      	ldr	r2, [r0, #0]
 8007802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007806:	2300      	movs	r3, #0
 8007808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800780c:	e7f7      	b.n	80077fe <_Balloc+0x66>
 800780e:	bf00      	nop
 8007810:	0800873d 	.word	0x0800873d
 8007814:	080087bd 	.word	0x080087bd

08007818 <_Bfree>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	69c6      	ldr	r6, [r0, #28]
 800781c:	4605      	mov	r5, r0
 800781e:	460c      	mov	r4, r1
 8007820:	b976      	cbnz	r6, 8007840 <_Bfree+0x28>
 8007822:	2010      	movs	r0, #16
 8007824:	f7ff ff02 	bl	800762c <malloc>
 8007828:	4602      	mov	r2, r0
 800782a:	61e8      	str	r0, [r5, #28]
 800782c:	b920      	cbnz	r0, 8007838 <_Bfree+0x20>
 800782e:	4b09      	ldr	r3, [pc, #36]	@ (8007854 <_Bfree+0x3c>)
 8007830:	4809      	ldr	r0, [pc, #36]	@ (8007858 <_Bfree+0x40>)
 8007832:	218f      	movs	r1, #143	@ 0x8f
 8007834:	f000 fbfc 	bl	8008030 <__assert_func>
 8007838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800783c:	6006      	str	r6, [r0, #0]
 800783e:	60c6      	str	r6, [r0, #12]
 8007840:	b13c      	cbz	r4, 8007852 <_Bfree+0x3a>
 8007842:	69eb      	ldr	r3, [r5, #28]
 8007844:	6862      	ldr	r2, [r4, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800784c:	6021      	str	r1, [r4, #0]
 800784e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	0800873d 	.word	0x0800873d
 8007858:	080087bd 	.word	0x080087bd

0800785c <__multadd>:
 800785c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007860:	690d      	ldr	r5, [r1, #16]
 8007862:	4607      	mov	r7, r0
 8007864:	460c      	mov	r4, r1
 8007866:	461e      	mov	r6, r3
 8007868:	f101 0c14 	add.w	ip, r1, #20
 800786c:	2000      	movs	r0, #0
 800786e:	f8dc 3000 	ldr.w	r3, [ip]
 8007872:	b299      	uxth	r1, r3
 8007874:	fb02 6101 	mla	r1, r2, r1, r6
 8007878:	0c1e      	lsrs	r6, r3, #16
 800787a:	0c0b      	lsrs	r3, r1, #16
 800787c:	fb02 3306 	mla	r3, r2, r6, r3
 8007880:	b289      	uxth	r1, r1
 8007882:	3001      	adds	r0, #1
 8007884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007888:	4285      	cmp	r5, r0
 800788a:	f84c 1b04 	str.w	r1, [ip], #4
 800788e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007892:	dcec      	bgt.n	800786e <__multadd+0x12>
 8007894:	b30e      	cbz	r6, 80078da <__multadd+0x7e>
 8007896:	68a3      	ldr	r3, [r4, #8]
 8007898:	42ab      	cmp	r3, r5
 800789a:	dc19      	bgt.n	80078d0 <__multadd+0x74>
 800789c:	6861      	ldr	r1, [r4, #4]
 800789e:	4638      	mov	r0, r7
 80078a0:	3101      	adds	r1, #1
 80078a2:	f7ff ff79 	bl	8007798 <_Balloc>
 80078a6:	4680      	mov	r8, r0
 80078a8:	b928      	cbnz	r0, 80078b6 <__multadd+0x5a>
 80078aa:	4602      	mov	r2, r0
 80078ac:	4b0c      	ldr	r3, [pc, #48]	@ (80078e0 <__multadd+0x84>)
 80078ae:	480d      	ldr	r0, [pc, #52]	@ (80078e4 <__multadd+0x88>)
 80078b0:	21ba      	movs	r1, #186	@ 0xba
 80078b2:	f000 fbbd 	bl	8008030 <__assert_func>
 80078b6:	6922      	ldr	r2, [r4, #16]
 80078b8:	3202      	adds	r2, #2
 80078ba:	f104 010c 	add.w	r1, r4, #12
 80078be:	0092      	lsls	r2, r2, #2
 80078c0:	300c      	adds	r0, #12
 80078c2:	f000 fba7 	bl	8008014 <memcpy>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7ff ffa5 	bl	8007818 <_Bfree>
 80078ce:	4644      	mov	r4, r8
 80078d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078d4:	3501      	adds	r5, #1
 80078d6:	615e      	str	r6, [r3, #20]
 80078d8:	6125      	str	r5, [r4, #16]
 80078da:	4620      	mov	r0, r4
 80078dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e0:	080087ac 	.word	0x080087ac
 80078e4:	080087bd 	.word	0x080087bd

080078e8 <__hi0bits>:
 80078e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80078ec:	4603      	mov	r3, r0
 80078ee:	bf36      	itet	cc
 80078f0:	0403      	lslcc	r3, r0, #16
 80078f2:	2000      	movcs	r0, #0
 80078f4:	2010      	movcc	r0, #16
 80078f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078fa:	bf3c      	itt	cc
 80078fc:	021b      	lslcc	r3, r3, #8
 80078fe:	3008      	addcc	r0, #8
 8007900:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007904:	bf3c      	itt	cc
 8007906:	011b      	lslcc	r3, r3, #4
 8007908:	3004      	addcc	r0, #4
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800790e:	bf3c      	itt	cc
 8007910:	009b      	lslcc	r3, r3, #2
 8007912:	3002      	addcc	r0, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	db05      	blt.n	8007924 <__hi0bits+0x3c>
 8007918:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800791c:	f100 0001 	add.w	r0, r0, #1
 8007920:	bf08      	it	eq
 8007922:	2020      	moveq	r0, #32
 8007924:	4770      	bx	lr

08007926 <__lo0bits>:
 8007926:	6803      	ldr	r3, [r0, #0]
 8007928:	4602      	mov	r2, r0
 800792a:	f013 0007 	ands.w	r0, r3, #7
 800792e:	d00b      	beq.n	8007948 <__lo0bits+0x22>
 8007930:	07d9      	lsls	r1, r3, #31
 8007932:	d421      	bmi.n	8007978 <__lo0bits+0x52>
 8007934:	0798      	lsls	r0, r3, #30
 8007936:	bf49      	itett	mi
 8007938:	085b      	lsrmi	r3, r3, #1
 800793a:	089b      	lsrpl	r3, r3, #2
 800793c:	2001      	movmi	r0, #1
 800793e:	6013      	strmi	r3, [r2, #0]
 8007940:	bf5c      	itt	pl
 8007942:	6013      	strpl	r3, [r2, #0]
 8007944:	2002      	movpl	r0, #2
 8007946:	4770      	bx	lr
 8007948:	b299      	uxth	r1, r3
 800794a:	b909      	cbnz	r1, 8007950 <__lo0bits+0x2a>
 800794c:	0c1b      	lsrs	r3, r3, #16
 800794e:	2010      	movs	r0, #16
 8007950:	b2d9      	uxtb	r1, r3
 8007952:	b909      	cbnz	r1, 8007958 <__lo0bits+0x32>
 8007954:	3008      	adds	r0, #8
 8007956:	0a1b      	lsrs	r3, r3, #8
 8007958:	0719      	lsls	r1, r3, #28
 800795a:	bf04      	itt	eq
 800795c:	091b      	lsreq	r3, r3, #4
 800795e:	3004      	addeq	r0, #4
 8007960:	0799      	lsls	r1, r3, #30
 8007962:	bf04      	itt	eq
 8007964:	089b      	lsreq	r3, r3, #2
 8007966:	3002      	addeq	r0, #2
 8007968:	07d9      	lsls	r1, r3, #31
 800796a:	d403      	bmi.n	8007974 <__lo0bits+0x4e>
 800796c:	085b      	lsrs	r3, r3, #1
 800796e:	f100 0001 	add.w	r0, r0, #1
 8007972:	d003      	beq.n	800797c <__lo0bits+0x56>
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	4770      	bx	lr
 8007978:	2000      	movs	r0, #0
 800797a:	4770      	bx	lr
 800797c:	2020      	movs	r0, #32
 800797e:	4770      	bx	lr

08007980 <__i2b>:
 8007980:	b510      	push	{r4, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	2101      	movs	r1, #1
 8007986:	f7ff ff07 	bl	8007798 <_Balloc>
 800798a:	4602      	mov	r2, r0
 800798c:	b928      	cbnz	r0, 800799a <__i2b+0x1a>
 800798e:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <__i2b+0x24>)
 8007990:	4805      	ldr	r0, [pc, #20]	@ (80079a8 <__i2b+0x28>)
 8007992:	f240 1145 	movw	r1, #325	@ 0x145
 8007996:	f000 fb4b 	bl	8008030 <__assert_func>
 800799a:	2301      	movs	r3, #1
 800799c:	6144      	str	r4, [r0, #20]
 800799e:	6103      	str	r3, [r0, #16]
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	bf00      	nop
 80079a4:	080087ac 	.word	0x080087ac
 80079a8:	080087bd 	.word	0x080087bd

080079ac <__multiply>:
 80079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b0:	4614      	mov	r4, r2
 80079b2:	690a      	ldr	r2, [r1, #16]
 80079b4:	6923      	ldr	r3, [r4, #16]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	bfa8      	it	ge
 80079ba:	4623      	movge	r3, r4
 80079bc:	460f      	mov	r7, r1
 80079be:	bfa4      	itt	ge
 80079c0:	460c      	movge	r4, r1
 80079c2:	461f      	movge	r7, r3
 80079c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80079c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80079cc:	68a3      	ldr	r3, [r4, #8]
 80079ce:	6861      	ldr	r1, [r4, #4]
 80079d0:	eb0a 0609 	add.w	r6, sl, r9
 80079d4:	42b3      	cmp	r3, r6
 80079d6:	b085      	sub	sp, #20
 80079d8:	bfb8      	it	lt
 80079da:	3101      	addlt	r1, #1
 80079dc:	f7ff fedc 	bl	8007798 <_Balloc>
 80079e0:	b930      	cbnz	r0, 80079f0 <__multiply+0x44>
 80079e2:	4602      	mov	r2, r0
 80079e4:	4b44      	ldr	r3, [pc, #272]	@ (8007af8 <__multiply+0x14c>)
 80079e6:	4845      	ldr	r0, [pc, #276]	@ (8007afc <__multiply+0x150>)
 80079e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80079ec:	f000 fb20 	bl	8008030 <__assert_func>
 80079f0:	f100 0514 	add.w	r5, r0, #20
 80079f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079f8:	462b      	mov	r3, r5
 80079fa:	2200      	movs	r2, #0
 80079fc:	4543      	cmp	r3, r8
 80079fe:	d321      	bcc.n	8007a44 <__multiply+0x98>
 8007a00:	f107 0114 	add.w	r1, r7, #20
 8007a04:	f104 0214 	add.w	r2, r4, #20
 8007a08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a10:	9302      	str	r3, [sp, #8]
 8007a12:	1b13      	subs	r3, r2, r4
 8007a14:	3b15      	subs	r3, #21
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	f104 0715 	add.w	r7, r4, #21
 8007a20:	42ba      	cmp	r2, r7
 8007a22:	bf38      	it	cc
 8007a24:	2304      	movcc	r3, #4
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	9b02      	ldr	r3, [sp, #8]
 8007a2a:	9103      	str	r1, [sp, #12]
 8007a2c:	428b      	cmp	r3, r1
 8007a2e:	d80c      	bhi.n	8007a4a <__multiply+0x9e>
 8007a30:	2e00      	cmp	r6, #0
 8007a32:	dd03      	ble.n	8007a3c <__multiply+0x90>
 8007a34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d05b      	beq.n	8007af4 <__multiply+0x148>
 8007a3c:	6106      	str	r6, [r0, #16]
 8007a3e:	b005      	add	sp, #20
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	f843 2b04 	str.w	r2, [r3], #4
 8007a48:	e7d8      	b.n	80079fc <__multiply+0x50>
 8007a4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a4e:	f1ba 0f00 	cmp.w	sl, #0
 8007a52:	d024      	beq.n	8007a9e <__multiply+0xf2>
 8007a54:	f104 0e14 	add.w	lr, r4, #20
 8007a58:	46a9      	mov	r9, r5
 8007a5a:	f04f 0c00 	mov.w	ip, #0
 8007a5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a62:	f8d9 3000 	ldr.w	r3, [r9]
 8007a66:	fa1f fb87 	uxth.w	fp, r7
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007a74:	f8d9 7000 	ldr.w	r7, [r9]
 8007a78:	4463      	add	r3, ip
 8007a7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a7e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007a82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a8c:	4572      	cmp	r2, lr
 8007a8e:	f849 3b04 	str.w	r3, [r9], #4
 8007a92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a96:	d8e2      	bhi.n	8007a5e <__multiply+0xb2>
 8007a98:	9b01      	ldr	r3, [sp, #4]
 8007a9a:	f845 c003 	str.w	ip, [r5, r3]
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007aa4:	3104      	adds	r1, #4
 8007aa6:	f1b9 0f00 	cmp.w	r9, #0
 8007aaa:	d021      	beq.n	8007af0 <__multiply+0x144>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	f104 0c14 	add.w	ip, r4, #20
 8007ab2:	46ae      	mov	lr, r5
 8007ab4:	f04f 0a00 	mov.w	sl, #0
 8007ab8:	f8bc b000 	ldrh.w	fp, [ip]
 8007abc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ac0:	fb09 770b 	mla	r7, r9, fp, r7
 8007ac4:	4457      	add	r7, sl
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007acc:	f84e 3b04 	str.w	r3, [lr], #4
 8007ad0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ad8:	f8be 3000 	ldrh.w	r3, [lr]
 8007adc:	fb09 330a 	mla	r3, r9, sl, r3
 8007ae0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ae4:	4562      	cmp	r2, ip
 8007ae6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007aea:	d8e5      	bhi.n	8007ab8 <__multiply+0x10c>
 8007aec:	9f01      	ldr	r7, [sp, #4]
 8007aee:	51eb      	str	r3, [r5, r7]
 8007af0:	3504      	adds	r5, #4
 8007af2:	e799      	b.n	8007a28 <__multiply+0x7c>
 8007af4:	3e01      	subs	r6, #1
 8007af6:	e79b      	b.n	8007a30 <__multiply+0x84>
 8007af8:	080087ac 	.word	0x080087ac
 8007afc:	080087bd 	.word	0x080087bd

08007b00 <__pow5mult>:
 8007b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b04:	4615      	mov	r5, r2
 8007b06:	f012 0203 	ands.w	r2, r2, #3
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	460e      	mov	r6, r1
 8007b0e:	d007      	beq.n	8007b20 <__pow5mult+0x20>
 8007b10:	4c25      	ldr	r4, [pc, #148]	@ (8007ba8 <__pow5mult+0xa8>)
 8007b12:	3a01      	subs	r2, #1
 8007b14:	2300      	movs	r3, #0
 8007b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b1a:	f7ff fe9f 	bl	800785c <__multadd>
 8007b1e:	4606      	mov	r6, r0
 8007b20:	10ad      	asrs	r5, r5, #2
 8007b22:	d03d      	beq.n	8007ba0 <__pow5mult+0xa0>
 8007b24:	69fc      	ldr	r4, [r7, #28]
 8007b26:	b97c      	cbnz	r4, 8007b48 <__pow5mult+0x48>
 8007b28:	2010      	movs	r0, #16
 8007b2a:	f7ff fd7f 	bl	800762c <malloc>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	61f8      	str	r0, [r7, #28]
 8007b32:	b928      	cbnz	r0, 8007b40 <__pow5mult+0x40>
 8007b34:	4b1d      	ldr	r3, [pc, #116]	@ (8007bac <__pow5mult+0xac>)
 8007b36:	481e      	ldr	r0, [pc, #120]	@ (8007bb0 <__pow5mult+0xb0>)
 8007b38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b3c:	f000 fa78 	bl	8008030 <__assert_func>
 8007b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b44:	6004      	str	r4, [r0, #0]
 8007b46:	60c4      	str	r4, [r0, #12]
 8007b48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b50:	b94c      	cbnz	r4, 8007b66 <__pow5mult+0x66>
 8007b52:	f240 2171 	movw	r1, #625	@ 0x271
 8007b56:	4638      	mov	r0, r7
 8007b58:	f7ff ff12 	bl	8007980 <__i2b>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b62:	4604      	mov	r4, r0
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	f04f 0900 	mov.w	r9, #0
 8007b6a:	07eb      	lsls	r3, r5, #31
 8007b6c:	d50a      	bpl.n	8007b84 <__pow5mult+0x84>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4622      	mov	r2, r4
 8007b72:	4638      	mov	r0, r7
 8007b74:	f7ff ff1a 	bl	80079ac <__multiply>
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f7ff fe4b 	bl	8007818 <_Bfree>
 8007b82:	4646      	mov	r6, r8
 8007b84:	106d      	asrs	r5, r5, #1
 8007b86:	d00b      	beq.n	8007ba0 <__pow5mult+0xa0>
 8007b88:	6820      	ldr	r0, [r4, #0]
 8007b8a:	b938      	cbnz	r0, 8007b9c <__pow5mult+0x9c>
 8007b8c:	4622      	mov	r2, r4
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff ff0b 	bl	80079ac <__multiply>
 8007b96:	6020      	str	r0, [r4, #0]
 8007b98:	f8c0 9000 	str.w	r9, [r0]
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	e7e4      	b.n	8007b6a <__pow5mult+0x6a>
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba6:	bf00      	nop
 8007ba8:	08008818 	.word	0x08008818
 8007bac:	0800873d 	.word	0x0800873d
 8007bb0:	080087bd 	.word	0x080087bd

08007bb4 <__lshift>:
 8007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	460c      	mov	r4, r1
 8007bba:	6849      	ldr	r1, [r1, #4]
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bc2:	68a3      	ldr	r3, [r4, #8]
 8007bc4:	4607      	mov	r7, r0
 8007bc6:	4691      	mov	r9, r2
 8007bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bcc:	f108 0601 	add.w	r6, r8, #1
 8007bd0:	42b3      	cmp	r3, r6
 8007bd2:	db0b      	blt.n	8007bec <__lshift+0x38>
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff fddf 	bl	8007798 <_Balloc>
 8007bda:	4605      	mov	r5, r0
 8007bdc:	b948      	cbnz	r0, 8007bf2 <__lshift+0x3e>
 8007bde:	4602      	mov	r2, r0
 8007be0:	4b28      	ldr	r3, [pc, #160]	@ (8007c84 <__lshift+0xd0>)
 8007be2:	4829      	ldr	r0, [pc, #164]	@ (8007c88 <__lshift+0xd4>)
 8007be4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007be8:	f000 fa22 	bl	8008030 <__assert_func>
 8007bec:	3101      	adds	r1, #1
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	e7ee      	b.n	8007bd0 <__lshift+0x1c>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f100 0114 	add.w	r1, r0, #20
 8007bf8:	f100 0210 	add.w	r2, r0, #16
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	4553      	cmp	r3, sl
 8007c00:	db33      	blt.n	8007c6a <__lshift+0xb6>
 8007c02:	6920      	ldr	r0, [r4, #16]
 8007c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c08:	f104 0314 	add.w	r3, r4, #20
 8007c0c:	f019 091f 	ands.w	r9, r9, #31
 8007c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c18:	d02b      	beq.n	8007c72 <__lshift+0xbe>
 8007c1a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c1e:	468a      	mov	sl, r1
 8007c20:	2200      	movs	r2, #0
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	fa00 f009 	lsl.w	r0, r0, r9
 8007c28:	4310      	orrs	r0, r2
 8007c2a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c32:	459c      	cmp	ip, r3
 8007c34:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c38:	d8f3      	bhi.n	8007c22 <__lshift+0x6e>
 8007c3a:	ebac 0304 	sub.w	r3, ip, r4
 8007c3e:	3b15      	subs	r3, #21
 8007c40:	f023 0303 	bic.w	r3, r3, #3
 8007c44:	3304      	adds	r3, #4
 8007c46:	f104 0015 	add.w	r0, r4, #21
 8007c4a:	4584      	cmp	ip, r0
 8007c4c:	bf38      	it	cc
 8007c4e:	2304      	movcc	r3, #4
 8007c50:	50ca      	str	r2, [r1, r3]
 8007c52:	b10a      	cbz	r2, 8007c58 <__lshift+0xa4>
 8007c54:	f108 0602 	add.w	r6, r8, #2
 8007c58:	3e01      	subs	r6, #1
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	612e      	str	r6, [r5, #16]
 8007c5e:	4621      	mov	r1, r4
 8007c60:	f7ff fdda 	bl	8007818 <_Bfree>
 8007c64:	4628      	mov	r0, r5
 8007c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c6e:	3301      	adds	r3, #1
 8007c70:	e7c5      	b.n	8007bfe <__lshift+0x4a>
 8007c72:	3904      	subs	r1, #4
 8007c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c78:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c7c:	459c      	cmp	ip, r3
 8007c7e:	d8f9      	bhi.n	8007c74 <__lshift+0xc0>
 8007c80:	e7ea      	b.n	8007c58 <__lshift+0xa4>
 8007c82:	bf00      	nop
 8007c84:	080087ac 	.word	0x080087ac
 8007c88:	080087bd 	.word	0x080087bd

08007c8c <__mcmp>:
 8007c8c:	690a      	ldr	r2, [r1, #16]
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6900      	ldr	r0, [r0, #16]
 8007c92:	1a80      	subs	r0, r0, r2
 8007c94:	b530      	push	{r4, r5, lr}
 8007c96:	d10e      	bne.n	8007cb6 <__mcmp+0x2a>
 8007c98:	3314      	adds	r3, #20
 8007c9a:	3114      	adds	r1, #20
 8007c9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cac:	4295      	cmp	r5, r2
 8007cae:	d003      	beq.n	8007cb8 <__mcmp+0x2c>
 8007cb0:	d205      	bcs.n	8007cbe <__mcmp+0x32>
 8007cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb6:	bd30      	pop	{r4, r5, pc}
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	d3f3      	bcc.n	8007ca4 <__mcmp+0x18>
 8007cbc:	e7fb      	b.n	8007cb6 <__mcmp+0x2a>
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	e7f9      	b.n	8007cb6 <__mcmp+0x2a>
	...

08007cc4 <__mdiff>:
 8007cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	4689      	mov	r9, r1
 8007cca:	4606      	mov	r6, r0
 8007ccc:	4611      	mov	r1, r2
 8007cce:	4648      	mov	r0, r9
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	f7ff ffdb 	bl	8007c8c <__mcmp>
 8007cd6:	1e05      	subs	r5, r0, #0
 8007cd8:	d112      	bne.n	8007d00 <__mdiff+0x3c>
 8007cda:	4629      	mov	r1, r5
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff fd5b 	bl	8007798 <_Balloc>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	b928      	cbnz	r0, 8007cf2 <__mdiff+0x2e>
 8007ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8007de4 <__mdiff+0x120>)
 8007ce8:	f240 2137 	movw	r1, #567	@ 0x237
 8007cec:	483e      	ldr	r0, [pc, #248]	@ (8007de8 <__mdiff+0x124>)
 8007cee:	f000 f99f 	bl	8008030 <__assert_func>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	b003      	add	sp, #12
 8007cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d00:	bfbc      	itt	lt
 8007d02:	464b      	movlt	r3, r9
 8007d04:	46a1      	movlt	r9, r4
 8007d06:	4630      	mov	r0, r6
 8007d08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d0c:	bfba      	itte	lt
 8007d0e:	461c      	movlt	r4, r3
 8007d10:	2501      	movlt	r5, #1
 8007d12:	2500      	movge	r5, #0
 8007d14:	f7ff fd40 	bl	8007798 <_Balloc>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	b918      	cbnz	r0, 8007d24 <__mdiff+0x60>
 8007d1c:	4b31      	ldr	r3, [pc, #196]	@ (8007de4 <__mdiff+0x120>)
 8007d1e:	f240 2145 	movw	r1, #581	@ 0x245
 8007d22:	e7e3      	b.n	8007cec <__mdiff+0x28>
 8007d24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d28:	6926      	ldr	r6, [r4, #16]
 8007d2a:	60c5      	str	r5, [r0, #12]
 8007d2c:	f109 0310 	add.w	r3, r9, #16
 8007d30:	f109 0514 	add.w	r5, r9, #20
 8007d34:	f104 0e14 	add.w	lr, r4, #20
 8007d38:	f100 0b14 	add.w	fp, r0, #20
 8007d3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	46d9      	mov	r9, fp
 8007d48:	f04f 0c00 	mov.w	ip, #0
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	fa1f f38a 	uxth.w	r3, sl
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	b283      	uxth	r3, r0
 8007d60:	1acb      	subs	r3, r1, r3
 8007d62:	0c00      	lsrs	r0, r0, #16
 8007d64:	4463      	add	r3, ip
 8007d66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d74:	4576      	cmp	r6, lr
 8007d76:	f849 3b04 	str.w	r3, [r9], #4
 8007d7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d7e:	d8e5      	bhi.n	8007d4c <__mdiff+0x88>
 8007d80:	1b33      	subs	r3, r6, r4
 8007d82:	3b15      	subs	r3, #21
 8007d84:	f023 0303 	bic.w	r3, r3, #3
 8007d88:	3415      	adds	r4, #21
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	42a6      	cmp	r6, r4
 8007d8e:	bf38      	it	cc
 8007d90:	2304      	movcc	r3, #4
 8007d92:	441d      	add	r5, r3
 8007d94:	445b      	add	r3, fp
 8007d96:	461e      	mov	r6, r3
 8007d98:	462c      	mov	r4, r5
 8007d9a:	4544      	cmp	r4, r8
 8007d9c:	d30e      	bcc.n	8007dbc <__mdiff+0xf8>
 8007d9e:	f108 0103 	add.w	r1, r8, #3
 8007da2:	1b49      	subs	r1, r1, r5
 8007da4:	f021 0103 	bic.w	r1, r1, #3
 8007da8:	3d03      	subs	r5, #3
 8007daa:	45a8      	cmp	r8, r5
 8007dac:	bf38      	it	cc
 8007dae:	2100      	movcc	r1, #0
 8007db0:	440b      	add	r3, r1
 8007db2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007db6:	b191      	cbz	r1, 8007dde <__mdiff+0x11a>
 8007db8:	6117      	str	r7, [r2, #16]
 8007dba:	e79d      	b.n	8007cf8 <__mdiff+0x34>
 8007dbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007dc0:	46e6      	mov	lr, ip
 8007dc2:	0c08      	lsrs	r0, r1, #16
 8007dc4:	fa1c fc81 	uxtah	ip, ip, r1
 8007dc8:	4471      	add	r1, lr
 8007dca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007dce:	b289      	uxth	r1, r1
 8007dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007dd4:	f846 1b04 	str.w	r1, [r6], #4
 8007dd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ddc:	e7dd      	b.n	8007d9a <__mdiff+0xd6>
 8007dde:	3f01      	subs	r7, #1
 8007de0:	e7e7      	b.n	8007db2 <__mdiff+0xee>
 8007de2:	bf00      	nop
 8007de4:	080087ac 	.word	0x080087ac
 8007de8:	080087bd 	.word	0x080087bd

08007dec <__d2b>:
 8007dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	460f      	mov	r7, r1
 8007df2:	2101      	movs	r1, #1
 8007df4:	ec59 8b10 	vmov	r8, r9, d0
 8007df8:	4616      	mov	r6, r2
 8007dfa:	f7ff fccd 	bl	8007798 <_Balloc>
 8007dfe:	4604      	mov	r4, r0
 8007e00:	b930      	cbnz	r0, 8007e10 <__d2b+0x24>
 8007e02:	4602      	mov	r2, r0
 8007e04:	4b23      	ldr	r3, [pc, #140]	@ (8007e94 <__d2b+0xa8>)
 8007e06:	4824      	ldr	r0, [pc, #144]	@ (8007e98 <__d2b+0xac>)
 8007e08:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e0c:	f000 f910 	bl	8008030 <__assert_func>
 8007e10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e18:	b10d      	cbz	r5, 8007e1e <__d2b+0x32>
 8007e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	f1b8 0300 	subs.w	r3, r8, #0
 8007e24:	d023      	beq.n	8007e6e <__d2b+0x82>
 8007e26:	4668      	mov	r0, sp
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	f7ff fd7c 	bl	8007926 <__lo0bits>
 8007e2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e32:	b1d0      	cbz	r0, 8007e6a <__d2b+0x7e>
 8007e34:	f1c0 0320 	rsb	r3, r0, #32
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	40c2      	lsrs	r2, r0
 8007e40:	6163      	str	r3, [r4, #20]
 8007e42:	9201      	str	r2, [sp, #4]
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	61a3      	str	r3, [r4, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	bf0c      	ite	eq
 8007e4c:	2201      	moveq	r2, #1
 8007e4e:	2202      	movne	r2, #2
 8007e50:	6122      	str	r2, [r4, #16]
 8007e52:	b1a5      	cbz	r5, 8007e7e <__d2b+0x92>
 8007e54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e58:	4405      	add	r5, r0
 8007e5a:	603d      	str	r5, [r7, #0]
 8007e5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e60:	6030      	str	r0, [r6, #0]
 8007e62:	4620      	mov	r0, r4
 8007e64:	b003      	add	sp, #12
 8007e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e6a:	6161      	str	r1, [r4, #20]
 8007e6c:	e7ea      	b.n	8007e44 <__d2b+0x58>
 8007e6e:	a801      	add	r0, sp, #4
 8007e70:	f7ff fd59 	bl	8007926 <__lo0bits>
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	6163      	str	r3, [r4, #20]
 8007e78:	3020      	adds	r0, #32
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	e7e8      	b.n	8007e50 <__d2b+0x64>
 8007e7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e86:	6038      	str	r0, [r7, #0]
 8007e88:	6918      	ldr	r0, [r3, #16]
 8007e8a:	f7ff fd2d 	bl	80078e8 <__hi0bits>
 8007e8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e92:	e7e5      	b.n	8007e60 <__d2b+0x74>
 8007e94:	080087ac 	.word	0x080087ac
 8007e98:	080087bd 	.word	0x080087bd

08007e9c <__sflush_r>:
 8007e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea4:	0716      	lsls	r6, r2, #28
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	d454      	bmi.n	8007f56 <__sflush_r+0xba>
 8007eac:	684b      	ldr	r3, [r1, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dc02      	bgt.n	8007eb8 <__sflush_r+0x1c>
 8007eb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd48      	ble.n	8007f4a <__sflush_r+0xae>
 8007eb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	d045      	beq.n	8007f4a <__sflush_r+0xae>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ec4:	682f      	ldr	r7, [r5, #0]
 8007ec6:	6a21      	ldr	r1, [r4, #32]
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	d030      	beq.n	8007f2e <__sflush_r+0x92>
 8007ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	0759      	lsls	r1, r3, #29
 8007ed2:	d505      	bpl.n	8007ee0 <__sflush_r+0x44>
 8007ed4:	6863      	ldr	r3, [r4, #4]
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eda:	b10b      	cbz	r3, 8007ee0 <__sflush_r+0x44>
 8007edc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ede:	1ad2      	subs	r2, r2, r3
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ee4:	6a21      	ldr	r1, [r4, #32]
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b0      	blx	r6
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	d106      	bne.n	8007efe <__sflush_r+0x62>
 8007ef0:	6829      	ldr	r1, [r5, #0]
 8007ef2:	291d      	cmp	r1, #29
 8007ef4:	d82b      	bhi.n	8007f4e <__sflush_r+0xb2>
 8007ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa0 <__sflush_r+0x104>)
 8007ef8:	410a      	asrs	r2, r1
 8007efa:	07d6      	lsls	r6, r2, #31
 8007efc:	d427      	bmi.n	8007f4e <__sflush_r+0xb2>
 8007efe:	2200      	movs	r2, #0
 8007f00:	6062      	str	r2, [r4, #4]
 8007f02:	04d9      	lsls	r1, r3, #19
 8007f04:	6922      	ldr	r2, [r4, #16]
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	d504      	bpl.n	8007f14 <__sflush_r+0x78>
 8007f0a:	1c42      	adds	r2, r0, #1
 8007f0c:	d101      	bne.n	8007f12 <__sflush_r+0x76>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	b903      	cbnz	r3, 8007f14 <__sflush_r+0x78>
 8007f12:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f16:	602f      	str	r7, [r5, #0]
 8007f18:	b1b9      	cbz	r1, 8007f4a <__sflush_r+0xae>
 8007f1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	d002      	beq.n	8007f28 <__sflush_r+0x8c>
 8007f22:	4628      	mov	r0, r5
 8007f24:	f7ff fb38 	bl	8007598 <_free_r>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f2c:	e00d      	b.n	8007f4a <__sflush_r+0xae>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b0      	blx	r6
 8007f34:	4602      	mov	r2, r0
 8007f36:	1c50      	adds	r0, r2, #1
 8007f38:	d1c9      	bne.n	8007ece <__sflush_r+0x32>
 8007f3a:	682b      	ldr	r3, [r5, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0c6      	beq.n	8007ece <__sflush_r+0x32>
 8007f40:	2b1d      	cmp	r3, #29
 8007f42:	d001      	beq.n	8007f48 <__sflush_r+0xac>
 8007f44:	2b16      	cmp	r3, #22
 8007f46:	d11e      	bne.n	8007f86 <__sflush_r+0xea>
 8007f48:	602f      	str	r7, [r5, #0]
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e022      	b.n	8007f94 <__sflush_r+0xf8>
 8007f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f52:	b21b      	sxth	r3, r3
 8007f54:	e01b      	b.n	8007f8e <__sflush_r+0xf2>
 8007f56:	690f      	ldr	r7, [r1, #16]
 8007f58:	2f00      	cmp	r7, #0
 8007f5a:	d0f6      	beq.n	8007f4a <__sflush_r+0xae>
 8007f5c:	0793      	lsls	r3, r2, #30
 8007f5e:	680e      	ldr	r6, [r1, #0]
 8007f60:	bf08      	it	eq
 8007f62:	694b      	ldreq	r3, [r1, #20]
 8007f64:	600f      	str	r7, [r1, #0]
 8007f66:	bf18      	it	ne
 8007f68:	2300      	movne	r3, #0
 8007f6a:	eba6 0807 	sub.w	r8, r6, r7
 8007f6e:	608b      	str	r3, [r1, #8]
 8007f70:	f1b8 0f00 	cmp.w	r8, #0
 8007f74:	dde9      	ble.n	8007f4a <__sflush_r+0xae>
 8007f76:	6a21      	ldr	r1, [r4, #32]
 8007f78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f7a:	4643      	mov	r3, r8
 8007f7c:	463a      	mov	r2, r7
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b0      	blx	r6
 8007f82:	2800      	cmp	r0, #0
 8007f84:	dc08      	bgt.n	8007f98 <__sflush_r+0xfc>
 8007f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f98:	4407      	add	r7, r0
 8007f9a:	eba8 0800 	sub.w	r8, r8, r0
 8007f9e:	e7e7      	b.n	8007f70 <__sflush_r+0xd4>
 8007fa0:	dfbffffe 	.word	0xdfbffffe

08007fa4 <_fflush_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	690b      	ldr	r3, [r1, #16]
 8007fa8:	4605      	mov	r5, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	b913      	cbnz	r3, 8007fb4 <_fflush_r+0x10>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	b118      	cbz	r0, 8007fbe <_fflush_r+0x1a>
 8007fb6:	6a03      	ldr	r3, [r0, #32]
 8007fb8:	b90b      	cbnz	r3, 8007fbe <_fflush_r+0x1a>
 8007fba:	f7fe fba5 	bl	8006708 <__sinit>
 8007fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0f3      	beq.n	8007fae <_fflush_r+0xa>
 8007fc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fc8:	07d0      	lsls	r0, r2, #31
 8007fca:	d404      	bmi.n	8007fd6 <_fflush_r+0x32>
 8007fcc:	0599      	lsls	r1, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_fflush_r+0x32>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fd2:	f7fe fc90 	bl	80068f6 <__retarget_lock_acquire_recursive>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	4621      	mov	r1, r4
 8007fda:	f7ff ff5f 	bl	8007e9c <__sflush_r>
 8007fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fe0:	07da      	lsls	r2, r3, #31
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	d4e4      	bmi.n	8007fb0 <_fflush_r+0xc>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	059b      	lsls	r3, r3, #22
 8007fea:	d4e1      	bmi.n	8007fb0 <_fflush_r+0xc>
 8007fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fee:	f7fe fc83 	bl	80068f8 <__retarget_lock_release_recursive>
 8007ff2:	e7dd      	b.n	8007fb0 <_fflush_r+0xc>

08007ff4 <_sbrk_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d06      	ldr	r5, [pc, #24]	@ (8008010 <_sbrk_r+0x1c>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7f9 fb46 	bl	8001690 <_sbrk>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_sbrk_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_sbrk_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	2000049c 	.word	0x2000049c

08008014 <memcpy>:
 8008014:	440a      	add	r2, r1
 8008016:	4291      	cmp	r1, r2
 8008018:	f100 33ff 	add.w	r3, r0, #4294967295
 800801c:	d100      	bne.n	8008020 <memcpy+0xc>
 800801e:	4770      	bx	lr
 8008020:	b510      	push	{r4, lr}
 8008022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800802a:	4291      	cmp	r1, r2
 800802c:	d1f9      	bne.n	8008022 <memcpy+0xe>
 800802e:	bd10      	pop	{r4, pc}

08008030 <__assert_func>:
 8008030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008032:	4614      	mov	r4, r2
 8008034:	461a      	mov	r2, r3
 8008036:	4b09      	ldr	r3, [pc, #36]	@ (800805c <__assert_func+0x2c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4605      	mov	r5, r0
 800803c:	68d8      	ldr	r0, [r3, #12]
 800803e:	b954      	cbnz	r4, 8008056 <__assert_func+0x26>
 8008040:	4b07      	ldr	r3, [pc, #28]	@ (8008060 <__assert_func+0x30>)
 8008042:	461c      	mov	r4, r3
 8008044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008048:	9100      	str	r1, [sp, #0]
 800804a:	462b      	mov	r3, r5
 800804c:	4905      	ldr	r1, [pc, #20]	@ (8008064 <__assert_func+0x34>)
 800804e:	f000 f841 	bl	80080d4 <fiprintf>
 8008052:	f000 f851 	bl	80080f8 <abort>
 8008056:	4b04      	ldr	r3, [pc, #16]	@ (8008068 <__assert_func+0x38>)
 8008058:	e7f4      	b.n	8008044 <__assert_func+0x14>
 800805a:	bf00      	nop
 800805c:	20000020 	.word	0x20000020
 8008060:	0800895d 	.word	0x0800895d
 8008064:	0800892f 	.word	0x0800892f
 8008068:	08008922 	.word	0x08008922

0800806c <_calloc_r>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	fba1 5402 	umull	r5, r4, r1, r2
 8008072:	b93c      	cbnz	r4, 8008084 <_calloc_r+0x18>
 8008074:	4629      	mov	r1, r5
 8008076:	f7ff fb03 	bl	8007680 <_malloc_r>
 800807a:	4606      	mov	r6, r0
 800807c:	b928      	cbnz	r0, 800808a <_calloc_r+0x1e>
 800807e:	2600      	movs	r6, #0
 8008080:	4630      	mov	r0, r6
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	220c      	movs	r2, #12
 8008086:	6002      	str	r2, [r0, #0]
 8008088:	e7f9      	b.n	800807e <_calloc_r+0x12>
 800808a:	462a      	mov	r2, r5
 800808c:	4621      	mov	r1, r4
 800808e:	f7fe fbb4 	bl	80067fa <memset>
 8008092:	e7f5      	b.n	8008080 <_calloc_r+0x14>

08008094 <__ascii_mbtowc>:
 8008094:	b082      	sub	sp, #8
 8008096:	b901      	cbnz	r1, 800809a <__ascii_mbtowc+0x6>
 8008098:	a901      	add	r1, sp, #4
 800809a:	b142      	cbz	r2, 80080ae <__ascii_mbtowc+0x1a>
 800809c:	b14b      	cbz	r3, 80080b2 <__ascii_mbtowc+0x1e>
 800809e:	7813      	ldrb	r3, [r2, #0]
 80080a0:	600b      	str	r3, [r1, #0]
 80080a2:	7812      	ldrb	r2, [r2, #0]
 80080a4:	1e10      	subs	r0, r2, #0
 80080a6:	bf18      	it	ne
 80080a8:	2001      	movne	r0, #1
 80080aa:	b002      	add	sp, #8
 80080ac:	4770      	bx	lr
 80080ae:	4610      	mov	r0, r2
 80080b0:	e7fb      	b.n	80080aa <__ascii_mbtowc+0x16>
 80080b2:	f06f 0001 	mvn.w	r0, #1
 80080b6:	e7f8      	b.n	80080aa <__ascii_mbtowc+0x16>

080080b8 <__ascii_wctomb>:
 80080b8:	4603      	mov	r3, r0
 80080ba:	4608      	mov	r0, r1
 80080bc:	b141      	cbz	r1, 80080d0 <__ascii_wctomb+0x18>
 80080be:	2aff      	cmp	r2, #255	@ 0xff
 80080c0:	d904      	bls.n	80080cc <__ascii_wctomb+0x14>
 80080c2:	228a      	movs	r2, #138	@ 0x8a
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ca:	4770      	bx	lr
 80080cc:	700a      	strb	r2, [r1, #0]
 80080ce:	2001      	movs	r0, #1
 80080d0:	4770      	bx	lr
	...

080080d4 <fiprintf>:
 80080d4:	b40e      	push	{r1, r2, r3}
 80080d6:	b503      	push	{r0, r1, lr}
 80080d8:	4601      	mov	r1, r0
 80080da:	ab03      	add	r3, sp, #12
 80080dc:	4805      	ldr	r0, [pc, #20]	@ (80080f4 <fiprintf+0x20>)
 80080de:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e2:	6800      	ldr	r0, [r0, #0]
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	f000 f837 	bl	8008158 <_vfiprintf_r>
 80080ea:	b002      	add	sp, #8
 80080ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80080f0:	b003      	add	sp, #12
 80080f2:	4770      	bx	lr
 80080f4:	20000020 	.word	0x20000020

080080f8 <abort>:
 80080f8:	b508      	push	{r3, lr}
 80080fa:	2006      	movs	r0, #6
 80080fc:	f000 fa00 	bl	8008500 <raise>
 8008100:	2001      	movs	r0, #1
 8008102:	f7f9 fa4d 	bl	80015a0 <_exit>

08008106 <__sfputc_r>:
 8008106:	6893      	ldr	r3, [r2, #8]
 8008108:	3b01      	subs	r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	b410      	push	{r4}
 800810e:	6093      	str	r3, [r2, #8]
 8008110:	da08      	bge.n	8008124 <__sfputc_r+0x1e>
 8008112:	6994      	ldr	r4, [r2, #24]
 8008114:	42a3      	cmp	r3, r4
 8008116:	db01      	blt.n	800811c <__sfputc_r+0x16>
 8008118:	290a      	cmp	r1, #10
 800811a:	d103      	bne.n	8008124 <__sfputc_r+0x1e>
 800811c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008120:	f000 b932 	b.w	8008388 <__swbuf_r>
 8008124:	6813      	ldr	r3, [r2, #0]
 8008126:	1c58      	adds	r0, r3, #1
 8008128:	6010      	str	r0, [r2, #0]
 800812a:	7019      	strb	r1, [r3, #0]
 800812c:	4608      	mov	r0, r1
 800812e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008132:	4770      	bx	lr

08008134 <__sfputs_r>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	4606      	mov	r6, r0
 8008138:	460f      	mov	r7, r1
 800813a:	4614      	mov	r4, r2
 800813c:	18d5      	adds	r5, r2, r3
 800813e:	42ac      	cmp	r4, r5
 8008140:	d101      	bne.n	8008146 <__sfputs_r+0x12>
 8008142:	2000      	movs	r0, #0
 8008144:	e007      	b.n	8008156 <__sfputs_r+0x22>
 8008146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814a:	463a      	mov	r2, r7
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff ffda 	bl	8008106 <__sfputc_r>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	d1f3      	bne.n	800813e <__sfputs_r+0xa>
 8008156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008158 <_vfiprintf_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	460d      	mov	r5, r1
 800815e:	b09d      	sub	sp, #116	@ 0x74
 8008160:	4614      	mov	r4, r2
 8008162:	4698      	mov	r8, r3
 8008164:	4606      	mov	r6, r0
 8008166:	b118      	cbz	r0, 8008170 <_vfiprintf_r+0x18>
 8008168:	6a03      	ldr	r3, [r0, #32]
 800816a:	b90b      	cbnz	r3, 8008170 <_vfiprintf_r+0x18>
 800816c:	f7fe facc 	bl	8006708 <__sinit>
 8008170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008172:	07d9      	lsls	r1, r3, #31
 8008174:	d405      	bmi.n	8008182 <_vfiprintf_r+0x2a>
 8008176:	89ab      	ldrh	r3, [r5, #12]
 8008178:	059a      	lsls	r2, r3, #22
 800817a:	d402      	bmi.n	8008182 <_vfiprintf_r+0x2a>
 800817c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800817e:	f7fe fbba 	bl	80068f6 <__retarget_lock_acquire_recursive>
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	071b      	lsls	r3, r3, #28
 8008186:	d501      	bpl.n	800818c <_vfiprintf_r+0x34>
 8008188:	692b      	ldr	r3, [r5, #16]
 800818a:	b99b      	cbnz	r3, 80081b4 <_vfiprintf_r+0x5c>
 800818c:	4629      	mov	r1, r5
 800818e:	4630      	mov	r0, r6
 8008190:	f000 f938 	bl	8008404 <__swsetup_r>
 8008194:	b170      	cbz	r0, 80081b4 <_vfiprintf_r+0x5c>
 8008196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008198:	07dc      	lsls	r4, r3, #31
 800819a:	d504      	bpl.n	80081a6 <_vfiprintf_r+0x4e>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	b01d      	add	sp, #116	@ 0x74
 80081a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a6:	89ab      	ldrh	r3, [r5, #12]
 80081a8:	0598      	lsls	r0, r3, #22
 80081aa:	d4f7      	bmi.n	800819c <_vfiprintf_r+0x44>
 80081ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ae:	f7fe fba3 	bl	80068f8 <__retarget_lock_release_recursive>
 80081b2:	e7f3      	b.n	800819c <_vfiprintf_r+0x44>
 80081b4:	2300      	movs	r3, #0
 80081b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b8:	2320      	movs	r3, #32
 80081ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081be:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c2:	2330      	movs	r3, #48	@ 0x30
 80081c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008374 <_vfiprintf_r+0x21c>
 80081c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081cc:	f04f 0901 	mov.w	r9, #1
 80081d0:	4623      	mov	r3, r4
 80081d2:	469a      	mov	sl, r3
 80081d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d8:	b10a      	cbz	r2, 80081de <_vfiprintf_r+0x86>
 80081da:	2a25      	cmp	r2, #37	@ 0x25
 80081dc:	d1f9      	bne.n	80081d2 <_vfiprintf_r+0x7a>
 80081de:	ebba 0b04 	subs.w	fp, sl, r4
 80081e2:	d00b      	beq.n	80081fc <_vfiprintf_r+0xa4>
 80081e4:	465b      	mov	r3, fp
 80081e6:	4622      	mov	r2, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff ffa2 	bl	8008134 <__sfputs_r>
 80081f0:	3001      	adds	r0, #1
 80081f2:	f000 80a7 	beq.w	8008344 <_vfiprintf_r+0x1ec>
 80081f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081f8:	445a      	add	r2, fp
 80081fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80081fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 809f 	beq.w	8008344 <_vfiprintf_r+0x1ec>
 8008206:	2300      	movs	r3, #0
 8008208:	f04f 32ff 	mov.w	r2, #4294967295
 800820c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008210:	f10a 0a01 	add.w	sl, sl, #1
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800821c:	931a      	str	r3, [sp, #104]	@ 0x68
 800821e:	4654      	mov	r4, sl
 8008220:	2205      	movs	r2, #5
 8008222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008226:	4853      	ldr	r0, [pc, #332]	@ (8008374 <_vfiprintf_r+0x21c>)
 8008228:	f7f7 ffd2 	bl	80001d0 <memchr>
 800822c:	9a04      	ldr	r2, [sp, #16]
 800822e:	b9d8      	cbnz	r0, 8008268 <_vfiprintf_r+0x110>
 8008230:	06d1      	lsls	r1, r2, #27
 8008232:	bf44      	itt	mi
 8008234:	2320      	movmi	r3, #32
 8008236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800823a:	0713      	lsls	r3, r2, #28
 800823c:	bf44      	itt	mi
 800823e:	232b      	movmi	r3, #43	@ 0x2b
 8008240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008244:	f89a 3000 	ldrb.w	r3, [sl]
 8008248:	2b2a      	cmp	r3, #42	@ 0x2a
 800824a:	d015      	beq.n	8008278 <_vfiprintf_r+0x120>
 800824c:	9a07      	ldr	r2, [sp, #28]
 800824e:	4654      	mov	r4, sl
 8008250:	2000      	movs	r0, #0
 8008252:	f04f 0c0a 	mov.w	ip, #10
 8008256:	4621      	mov	r1, r4
 8008258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800825c:	3b30      	subs	r3, #48	@ 0x30
 800825e:	2b09      	cmp	r3, #9
 8008260:	d94b      	bls.n	80082fa <_vfiprintf_r+0x1a2>
 8008262:	b1b0      	cbz	r0, 8008292 <_vfiprintf_r+0x13a>
 8008264:	9207      	str	r2, [sp, #28]
 8008266:	e014      	b.n	8008292 <_vfiprintf_r+0x13a>
 8008268:	eba0 0308 	sub.w	r3, r0, r8
 800826c:	fa09 f303 	lsl.w	r3, r9, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	46a2      	mov	sl, r4
 8008276:	e7d2      	b.n	800821e <_vfiprintf_r+0xc6>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	1d19      	adds	r1, r3, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	9103      	str	r1, [sp, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	bfbb      	ittet	lt
 8008284:	425b      	neglt	r3, r3
 8008286:	f042 0202 	orrlt.w	r2, r2, #2
 800828a:	9307      	strge	r3, [sp, #28]
 800828c:	9307      	strlt	r3, [sp, #28]
 800828e:	bfb8      	it	lt
 8008290:	9204      	strlt	r2, [sp, #16]
 8008292:	7823      	ldrb	r3, [r4, #0]
 8008294:	2b2e      	cmp	r3, #46	@ 0x2e
 8008296:	d10a      	bne.n	80082ae <_vfiprintf_r+0x156>
 8008298:	7863      	ldrb	r3, [r4, #1]
 800829a:	2b2a      	cmp	r3, #42	@ 0x2a
 800829c:	d132      	bne.n	8008304 <_vfiprintf_r+0x1ac>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	1d1a      	adds	r2, r3, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	9203      	str	r2, [sp, #12]
 80082a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082aa:	3402      	adds	r4, #2
 80082ac:	9305      	str	r3, [sp, #20]
 80082ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008384 <_vfiprintf_r+0x22c>
 80082b2:	7821      	ldrb	r1, [r4, #0]
 80082b4:	2203      	movs	r2, #3
 80082b6:	4650      	mov	r0, sl
 80082b8:	f7f7 ff8a 	bl	80001d0 <memchr>
 80082bc:	b138      	cbz	r0, 80082ce <_vfiprintf_r+0x176>
 80082be:	9b04      	ldr	r3, [sp, #16]
 80082c0:	eba0 000a 	sub.w	r0, r0, sl
 80082c4:	2240      	movs	r2, #64	@ 0x40
 80082c6:	4082      	lsls	r2, r0
 80082c8:	4313      	orrs	r3, r2
 80082ca:	3401      	adds	r4, #1
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d2:	4829      	ldr	r0, [pc, #164]	@ (8008378 <_vfiprintf_r+0x220>)
 80082d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082d8:	2206      	movs	r2, #6
 80082da:	f7f7 ff79 	bl	80001d0 <memchr>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d03f      	beq.n	8008362 <_vfiprintf_r+0x20a>
 80082e2:	4b26      	ldr	r3, [pc, #152]	@ (800837c <_vfiprintf_r+0x224>)
 80082e4:	bb1b      	cbnz	r3, 800832e <_vfiprintf_r+0x1d6>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	3307      	adds	r3, #7
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	3308      	adds	r3, #8
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f4:	443b      	add	r3, r7
 80082f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f8:	e76a      	b.n	80081d0 <_vfiprintf_r+0x78>
 80082fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80082fe:	460c      	mov	r4, r1
 8008300:	2001      	movs	r0, #1
 8008302:	e7a8      	b.n	8008256 <_vfiprintf_r+0xfe>
 8008304:	2300      	movs	r3, #0
 8008306:	3401      	adds	r4, #1
 8008308:	9305      	str	r3, [sp, #20]
 800830a:	4619      	mov	r1, r3
 800830c:	f04f 0c0a 	mov.w	ip, #10
 8008310:	4620      	mov	r0, r4
 8008312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008316:	3a30      	subs	r2, #48	@ 0x30
 8008318:	2a09      	cmp	r2, #9
 800831a:	d903      	bls.n	8008324 <_vfiprintf_r+0x1cc>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d0c6      	beq.n	80082ae <_vfiprintf_r+0x156>
 8008320:	9105      	str	r1, [sp, #20]
 8008322:	e7c4      	b.n	80082ae <_vfiprintf_r+0x156>
 8008324:	fb0c 2101 	mla	r1, ip, r1, r2
 8008328:	4604      	mov	r4, r0
 800832a:	2301      	movs	r3, #1
 800832c:	e7f0      	b.n	8008310 <_vfiprintf_r+0x1b8>
 800832e:	ab03      	add	r3, sp, #12
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	462a      	mov	r2, r5
 8008334:	4b12      	ldr	r3, [pc, #72]	@ (8008380 <_vfiprintf_r+0x228>)
 8008336:	a904      	add	r1, sp, #16
 8008338:	4630      	mov	r0, r6
 800833a:	f7fd fda1 	bl	8005e80 <_printf_float>
 800833e:	4607      	mov	r7, r0
 8008340:	1c78      	adds	r0, r7, #1
 8008342:	d1d6      	bne.n	80082f2 <_vfiprintf_r+0x19a>
 8008344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008346:	07d9      	lsls	r1, r3, #31
 8008348:	d405      	bmi.n	8008356 <_vfiprintf_r+0x1fe>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	059a      	lsls	r2, r3, #22
 800834e:	d402      	bmi.n	8008356 <_vfiprintf_r+0x1fe>
 8008350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008352:	f7fe fad1 	bl	80068f8 <__retarget_lock_release_recursive>
 8008356:	89ab      	ldrh	r3, [r5, #12]
 8008358:	065b      	lsls	r3, r3, #25
 800835a:	f53f af1f 	bmi.w	800819c <_vfiprintf_r+0x44>
 800835e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008360:	e71e      	b.n	80081a0 <_vfiprintf_r+0x48>
 8008362:	ab03      	add	r3, sp, #12
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	462a      	mov	r2, r5
 8008368:	4b05      	ldr	r3, [pc, #20]	@ (8008380 <_vfiprintf_r+0x228>)
 800836a:	a904      	add	r1, sp, #16
 800836c:	4630      	mov	r0, r6
 800836e:	f7fe f81f 	bl	80063b0 <_printf_i>
 8008372:	e7e4      	b.n	800833e <_vfiprintf_r+0x1e6>
 8008374:	08008a5f 	.word	0x08008a5f
 8008378:	08008a69 	.word	0x08008a69
 800837c:	08005e81 	.word	0x08005e81
 8008380:	08008135 	.word	0x08008135
 8008384:	08008a65 	.word	0x08008a65

08008388 <__swbuf_r>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	460e      	mov	r6, r1
 800838c:	4614      	mov	r4, r2
 800838e:	4605      	mov	r5, r0
 8008390:	b118      	cbz	r0, 800839a <__swbuf_r+0x12>
 8008392:	6a03      	ldr	r3, [r0, #32]
 8008394:	b90b      	cbnz	r3, 800839a <__swbuf_r+0x12>
 8008396:	f7fe f9b7 	bl	8006708 <__sinit>
 800839a:	69a3      	ldr	r3, [r4, #24]
 800839c:	60a3      	str	r3, [r4, #8]
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	071a      	lsls	r2, r3, #28
 80083a2:	d501      	bpl.n	80083a8 <__swbuf_r+0x20>
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	b943      	cbnz	r3, 80083ba <__swbuf_r+0x32>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f82a 	bl	8008404 <__swsetup_r>
 80083b0:	b118      	cbz	r0, 80083ba <__swbuf_r+0x32>
 80083b2:	f04f 37ff 	mov.w	r7, #4294967295
 80083b6:	4638      	mov	r0, r7
 80083b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	6922      	ldr	r2, [r4, #16]
 80083be:	1a98      	subs	r0, r3, r2
 80083c0:	6963      	ldr	r3, [r4, #20]
 80083c2:	b2f6      	uxtb	r6, r6
 80083c4:	4283      	cmp	r3, r0
 80083c6:	4637      	mov	r7, r6
 80083c8:	dc05      	bgt.n	80083d6 <__swbuf_r+0x4e>
 80083ca:	4621      	mov	r1, r4
 80083cc:	4628      	mov	r0, r5
 80083ce:	f7ff fde9 	bl	8007fa4 <_fflush_r>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d1ed      	bne.n	80083b2 <__swbuf_r+0x2a>
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	3b01      	subs	r3, #1
 80083da:	60a3      	str	r3, [r4, #8]
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	6022      	str	r2, [r4, #0]
 80083e2:	701e      	strb	r6, [r3, #0]
 80083e4:	6962      	ldr	r2, [r4, #20]
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d004      	beq.n	80083f6 <__swbuf_r+0x6e>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	07db      	lsls	r3, r3, #31
 80083f0:	d5e1      	bpl.n	80083b6 <__swbuf_r+0x2e>
 80083f2:	2e0a      	cmp	r6, #10
 80083f4:	d1df      	bne.n	80083b6 <__swbuf_r+0x2e>
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f7ff fdd3 	bl	8007fa4 <_fflush_r>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d0d9      	beq.n	80083b6 <__swbuf_r+0x2e>
 8008402:	e7d6      	b.n	80083b2 <__swbuf_r+0x2a>

08008404 <__swsetup_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4b29      	ldr	r3, [pc, #164]	@ (80084ac <__swsetup_r+0xa8>)
 8008408:	4605      	mov	r5, r0
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	460c      	mov	r4, r1
 800840e:	b118      	cbz	r0, 8008418 <__swsetup_r+0x14>
 8008410:	6a03      	ldr	r3, [r0, #32]
 8008412:	b90b      	cbnz	r3, 8008418 <__swsetup_r+0x14>
 8008414:	f7fe f978 	bl	8006708 <__sinit>
 8008418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841c:	0719      	lsls	r1, r3, #28
 800841e:	d422      	bmi.n	8008466 <__swsetup_r+0x62>
 8008420:	06da      	lsls	r2, r3, #27
 8008422:	d407      	bmi.n	8008434 <__swsetup_r+0x30>
 8008424:	2209      	movs	r2, #9
 8008426:	602a      	str	r2, [r5, #0]
 8008428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	f04f 30ff 	mov.w	r0, #4294967295
 8008432:	e033      	b.n	800849c <__swsetup_r+0x98>
 8008434:	0758      	lsls	r0, r3, #29
 8008436:	d512      	bpl.n	800845e <__swsetup_r+0x5a>
 8008438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800843a:	b141      	cbz	r1, 800844e <__swsetup_r+0x4a>
 800843c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008440:	4299      	cmp	r1, r3
 8008442:	d002      	beq.n	800844a <__swsetup_r+0x46>
 8008444:	4628      	mov	r0, r5
 8008446:	f7ff f8a7 	bl	8007598 <_free_r>
 800844a:	2300      	movs	r3, #0
 800844c:	6363      	str	r3, [r4, #52]	@ 0x34
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008454:	81a3      	strh	r3, [r4, #12]
 8008456:	2300      	movs	r3, #0
 8008458:	6063      	str	r3, [r4, #4]
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	f043 0308 	orr.w	r3, r3, #8
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	b94b      	cbnz	r3, 800847e <__swsetup_r+0x7a>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008474:	d003      	beq.n	800847e <__swsetup_r+0x7a>
 8008476:	4621      	mov	r1, r4
 8008478:	4628      	mov	r0, r5
 800847a:	f000 f883 	bl	8008584 <__smakebuf_r>
 800847e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008482:	f013 0201 	ands.w	r2, r3, #1
 8008486:	d00a      	beq.n	800849e <__swsetup_r+0x9a>
 8008488:	2200      	movs	r2, #0
 800848a:	60a2      	str	r2, [r4, #8]
 800848c:	6962      	ldr	r2, [r4, #20]
 800848e:	4252      	negs	r2, r2
 8008490:	61a2      	str	r2, [r4, #24]
 8008492:	6922      	ldr	r2, [r4, #16]
 8008494:	b942      	cbnz	r2, 80084a8 <__swsetup_r+0xa4>
 8008496:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800849a:	d1c5      	bne.n	8008428 <__swsetup_r+0x24>
 800849c:	bd38      	pop	{r3, r4, r5, pc}
 800849e:	0799      	lsls	r1, r3, #30
 80084a0:	bf58      	it	pl
 80084a2:	6962      	ldrpl	r2, [r4, #20]
 80084a4:	60a2      	str	r2, [r4, #8]
 80084a6:	e7f4      	b.n	8008492 <__swsetup_r+0x8e>
 80084a8:	2000      	movs	r0, #0
 80084aa:	e7f7      	b.n	800849c <__swsetup_r+0x98>
 80084ac:	20000020 	.word	0x20000020

080084b0 <_raise_r>:
 80084b0:	291f      	cmp	r1, #31
 80084b2:	b538      	push	{r3, r4, r5, lr}
 80084b4:	4605      	mov	r5, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	d904      	bls.n	80084c4 <_raise_r+0x14>
 80084ba:	2316      	movs	r3, #22
 80084bc:	6003      	str	r3, [r0, #0]
 80084be:	f04f 30ff 	mov.w	r0, #4294967295
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084c6:	b112      	cbz	r2, 80084ce <_raise_r+0x1e>
 80084c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084cc:	b94b      	cbnz	r3, 80084e2 <_raise_r+0x32>
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f830 	bl	8008534 <_getpid_r>
 80084d4:	4622      	mov	r2, r4
 80084d6:	4601      	mov	r1, r0
 80084d8:	4628      	mov	r0, r5
 80084da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084de:	f000 b817 	b.w	8008510 <_kill_r>
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d00a      	beq.n	80084fc <_raise_r+0x4c>
 80084e6:	1c59      	adds	r1, r3, #1
 80084e8:	d103      	bne.n	80084f2 <_raise_r+0x42>
 80084ea:	2316      	movs	r3, #22
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7e7      	b.n	80084c2 <_raise_r+0x12>
 80084f2:	2100      	movs	r1, #0
 80084f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084f8:	4620      	mov	r0, r4
 80084fa:	4798      	blx	r3
 80084fc:	2000      	movs	r0, #0
 80084fe:	e7e0      	b.n	80084c2 <_raise_r+0x12>

08008500 <raise>:
 8008500:	4b02      	ldr	r3, [pc, #8]	@ (800850c <raise+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f7ff bfd3 	b.w	80084b0 <_raise_r>
 800850a:	bf00      	nop
 800850c:	20000020 	.word	0x20000020

08008510 <_kill_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d07      	ldr	r5, [pc, #28]	@ (8008530 <_kill_r+0x20>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	f7f9 f82f 	bl	8001580 <_kill>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d102      	bne.n	800852c <_kill_r+0x1c>
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	b103      	cbz	r3, 800852c <_kill_r+0x1c>
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	2000049c 	.word	0x2000049c

08008534 <_getpid_r>:
 8008534:	f7f9 b81c 	b.w	8001570 <_getpid>

08008538 <__swhatbuf_r>:
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	460c      	mov	r4, r1
 800853c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008540:	2900      	cmp	r1, #0
 8008542:	b096      	sub	sp, #88	@ 0x58
 8008544:	4615      	mov	r5, r2
 8008546:	461e      	mov	r6, r3
 8008548:	da0d      	bge.n	8008566 <__swhatbuf_r+0x2e>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	bf14      	ite	ne
 8008556:	2340      	movne	r3, #64	@ 0x40
 8008558:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800855c:	2000      	movs	r0, #0
 800855e:	6031      	str	r1, [r6, #0]
 8008560:	602b      	str	r3, [r5, #0]
 8008562:	b016      	add	sp, #88	@ 0x58
 8008564:	bd70      	pop	{r4, r5, r6, pc}
 8008566:	466a      	mov	r2, sp
 8008568:	f000 f848 	bl	80085fc <_fstat_r>
 800856c:	2800      	cmp	r0, #0
 800856e:	dbec      	blt.n	800854a <__swhatbuf_r+0x12>
 8008570:	9901      	ldr	r1, [sp, #4]
 8008572:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008576:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800857a:	4259      	negs	r1, r3
 800857c:	4159      	adcs	r1, r3
 800857e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008582:	e7eb      	b.n	800855c <__swhatbuf_r+0x24>

08008584 <__smakebuf_r>:
 8008584:	898b      	ldrh	r3, [r1, #12]
 8008586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008588:	079d      	lsls	r5, r3, #30
 800858a:	4606      	mov	r6, r0
 800858c:	460c      	mov	r4, r1
 800858e:	d507      	bpl.n	80085a0 <__smakebuf_r+0x1c>
 8008590:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	6123      	str	r3, [r4, #16]
 8008598:	2301      	movs	r3, #1
 800859a:	6163      	str	r3, [r4, #20]
 800859c:	b003      	add	sp, #12
 800859e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085a0:	ab01      	add	r3, sp, #4
 80085a2:	466a      	mov	r2, sp
 80085a4:	f7ff ffc8 	bl	8008538 <__swhatbuf_r>
 80085a8:	9f00      	ldr	r7, [sp, #0]
 80085aa:	4605      	mov	r5, r0
 80085ac:	4639      	mov	r1, r7
 80085ae:	4630      	mov	r0, r6
 80085b0:	f7ff f866 	bl	8007680 <_malloc_r>
 80085b4:	b948      	cbnz	r0, 80085ca <__smakebuf_r+0x46>
 80085b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ba:	059a      	lsls	r2, r3, #22
 80085bc:	d4ee      	bmi.n	800859c <__smakebuf_r+0x18>
 80085be:	f023 0303 	bic.w	r3, r3, #3
 80085c2:	f043 0302 	orr.w	r3, r3, #2
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	e7e2      	b.n	8008590 <__smakebuf_r+0xc>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	6020      	str	r0, [r4, #0]
 80085ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085da:	b15b      	cbz	r3, 80085f4 <__smakebuf_r+0x70>
 80085dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e0:	4630      	mov	r0, r6
 80085e2:	f000 f81d 	bl	8008620 <_isatty_r>
 80085e6:	b128      	cbz	r0, 80085f4 <__smakebuf_r+0x70>
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	f023 0303 	bic.w	r3, r3, #3
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	81a3      	strh	r3, [r4, #12]
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	431d      	orrs	r5, r3
 80085f8:	81a5      	strh	r5, [r4, #12]
 80085fa:	e7cf      	b.n	800859c <__smakebuf_r+0x18>

080085fc <_fstat_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4d07      	ldr	r5, [pc, #28]	@ (800861c <_fstat_r+0x20>)
 8008600:	2300      	movs	r3, #0
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	4611      	mov	r1, r2
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	f7f9 f819 	bl	8001640 <_fstat>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d102      	bne.n	8008618 <_fstat_r+0x1c>
 8008612:	682b      	ldr	r3, [r5, #0]
 8008614:	b103      	cbz	r3, 8008618 <_fstat_r+0x1c>
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	bd38      	pop	{r3, r4, r5, pc}
 800861a:	bf00      	nop
 800861c:	2000049c 	.word	0x2000049c

08008620 <_isatty_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4d06      	ldr	r5, [pc, #24]	@ (800863c <_isatty_r+0x1c>)
 8008624:	2300      	movs	r3, #0
 8008626:	4604      	mov	r4, r0
 8008628:	4608      	mov	r0, r1
 800862a:	602b      	str	r3, [r5, #0]
 800862c:	f7f9 f818 	bl	8001660 <_isatty>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d102      	bne.n	800863a <_isatty_r+0x1a>
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	b103      	cbz	r3, 800863a <_isatty_r+0x1a>
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	bd38      	pop	{r3, r4, r5, pc}
 800863c:	2000049c 	.word	0x2000049c

08008640 <_init>:
 8008640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008642:	bf00      	nop
 8008644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008646:	bc08      	pop	{r3}
 8008648:	469e      	mov	lr, r3
 800864a:	4770      	bx	lr

0800864c <_fini>:
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864e:	bf00      	nop
 8008650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008652:	bc08      	pop	{r3}
 8008654:	469e      	mov	lr, r3
 8008656:	4770      	bx	lr
