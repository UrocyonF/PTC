
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08008a90  08008a90  00009a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea8  08008ea8  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea8  08008ea8  00009ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb0  08008eb0  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00009eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00009eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008eb8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1e0  2**0
                  CONTENTS
 10 .bss          000002d0  200001e0  200001e0  0000a1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b0  200004b0  0000a1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff20  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ce  00000000  00000000  0001a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  0001c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b66  00000000  00000000  0001d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f045  00000000  00000000  0001de06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e39  00000000  00000000  0003ce4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9e96  00000000  00000000  0004ec84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108b1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cc4  00000000  00000000  00108b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a78 	.word	0x08008a78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008a78 	.word	0x08008a78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 ffff 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f895 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f9d1 	bl	8000f5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f99f 	bl	8000efc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000bbe:	f000 f96d 	bl	8000e9c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000bc2:	f000 f8e5 	bl	8000d90 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

    HAL_UART_Receive_IT(&huart1, uart1_buffer, 1); // Prepare UART1 reception
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	493b      	ldr	r1, [pc, #236]	@ (8000cb8 <main+0x110>)
 8000bca:	483c      	ldr	r0, [pc, #240]	@ (8000cbc <main+0x114>)
 8000bcc:	f004 f8fb 	bl	8004dc6 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, uart2_buffer, 1); // Prepare UART2 reception
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	493b      	ldr	r1, [pc, #236]	@ (8000cc0 <main+0x118>)
 8000bd4:	483b      	ldr	r0, [pc, #236]	@ (8000cc4 <main+0x11c>)
 8000bd6:	f004 f8f6 	bl	8004dc6 <HAL_UART_Receive_IT>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Prepare PWM for turret servo motor
 8000bda:	2100      	movs	r1, #0
 8000bdc:	483a      	ldr	r0, [pc, #232]	@ (8000cc8 <main+0x120>)
 8000bde:	f003 f897 	bl	8003d10 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Prepare PWM for LED servo motor
 8000be2:	2104      	movs	r1, #4
 8000be4:	4838      	ldr	r0, [pc, #224]	@ (8000cc8 <main+0x120>)
 8000be6:	f003 f893 	bl	8003d10 <HAL_TIM_PWM_Start>
        float distance = measure_echo_pulse_duration();
        HAL_Delay(2000);
        */

    	// Move with all sensor and go around obstacle
    	look_forward();
 8000bea:	f000 fb4f 	bl	800128c <look_forward>

        float distance = measure_distance();
 8000bee:	f000 fbef 	bl	80013d0 <measure_distance>
 8000bf2:	ed87 0a03 	vstr	s0, [r7, #12]

        if (distance < minDistDetect) {
 8000bf6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000ccc <main+0x124>
 8000bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c06:	d502      	bpl.n	8000c0e <main+0x66>
        	move_stop();
 8000c08:	f000 fb1a 	bl	8001240 <move_stop>
        	continue;
 8000c0c:	e052      	b.n	8000cb4 <main+0x10c>
        }
        else if (distance < shortDistDetect) {
 8000c0e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000cd0 <main+0x128>
 8000c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1e:	d517      	bpl.n	8000c50 <main+0xa8>
        	move_stop();
 8000c20:	f000 fb0e 	bl	8001240 <move_stop>
			look_left();
 8000c24:	f000 fb24 	bl	8001270 <look_left>
			distance = measure_distance();
 8000c28:	f000 fbd2 	bl	80013d0 <measure_distance>
 8000c2c:	ed87 0a03 	vstr	s0, [r7, #12]

			if (distance < shortDistDetect) {
 8000c30:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000cd0 <main+0x128>
 8000c34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c40:	d503      	bpl.n	8000c4a <main+0xa2>
				// TODO
				HAL_Delay(100000);
 8000c42:	4824      	ldr	r0, [pc, #144]	@ (8000cd4 <main+0x12c>)
 8000c44:	f001 f81a 	bl	8001c7c <HAL_Delay>
 8000c48:	e7cf      	b.n	8000bea <main+0x42>
			} else {
				transiGoLineToGoLeft();
 8000c4a:	f000 fc0b 	bl	8001464 <transiGoLineToGoLeft>
 8000c4e:	e7cc      	b.n	8000bea <main+0x42>
            }
        } else {
            uint32_t photodiode_value_right = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000c50:	2102      	movs	r1, #2
 8000c52:	4821      	ldr	r0, [pc, #132]	@ (8000cd8 <main+0x130>)
 8000c54:	f001 fb38 	bl	80022c8 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]
            uint32_t photodiode_value_left = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	481e      	ldr	r0, [pc, #120]	@ (8000cd8 <main+0x130>)
 8000c60:	f001 fb32 	bl	80022c8 <HAL_GPIO_ReadPin>
 8000c64:	4603      	mov	r3, r0
 8000c66:	607b      	str	r3, [r7, #4]

            if (photodiode_value_right == GPIO_PIN_RESET && photodiode_value_left == GPIO_PIN_RESET) {
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d111      	bne.n	8000c92 <main+0xea>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10e      	bne.n	8000c92 <main+0xea>
				if (distance < longDistDetect) {
 8000c74:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000cdc <main+0x134>
 8000c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c84:	d502      	bpl.n	8000c8c <main+0xe4>
					move_forward_slow();
 8000c86:	f000 fa7f 	bl	8001188 <move_forward_slow>
				if (distance < longDistDetect) {
 8000c8a:	e013      	b.n	8000cb4 <main+0x10c>
				} else {
					move_forward_fast();
 8000c8c:	f000 fa92 	bl	80011b4 <move_forward_fast>
				if (distance < longDistDetect) {
 8000c90:	e010      	b.n	8000cb4 <main+0x10c>
				}
			} else if (photodiode_value_right == GPIO_PIN_RESET && photodiode_value_left == GPIO_PIN_SET) {
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <main+0xfc>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d102      	bne.n	8000ca4 <main+0xfc>
				turn_right();
 8000c9e:	f000 fab9 	bl	8001214 <turn_right>
 8000ca2:	e007      	b.n	8000cb4 <main+0x10c>
			} else if (photodiode_value_right == GPIO_PIN_SET && photodiode_value_left == GPIO_PIN_RESET) {
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d19f      	bne.n	8000bea <main+0x42>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d19c      	bne.n	8000bea <main+0x42>
				turn_left();
 8000cb0:	f000 fa9a 	bl	80011e8 <turn_left>
    while (1) {
 8000cb4:	e799      	b.n	8000bea <main+0x42>
 8000cb6:	bf00      	nop
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000248 	.word	0x20000248
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	200002d0 	.word	0x200002d0
 8000cc8:	200001fc 	.word	0x200001fc
 8000ccc:	3c75c28f 	.word	0x3c75c28f
 8000cd0:	3d4ccccd 	.word	0x3d4ccccd
 8000cd4:	000186a0 	.word	0x000186a0
 8000cd8:	48000800 	.word	0x48000800
 8000cdc:	3d8f5c29 	.word	0x3d8f5c29

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b09e      	sub	sp, #120	@ 0x78
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000cea:	2228      	movs	r2, #40	@ 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f005 ffa1 	bl	8006c36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	223c      	movs	r2, #60	@ 0x3c
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f005 ff93 	bl	8006c36 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d10:	2302      	movs	r3, #2
 8000d12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d14:	2301      	movs	r3, #1
 8000d16:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d18:	2310      	movs	r3, #16
 8000d1a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d20:	2300      	movs	r3, #0
 8000d22:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d24:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8000d28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fb12 	bl	8002358 <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d3a:	f000 fca7 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	230f      	movs	r3, #15
 8000d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2302      	movs	r3, #2
 8000d44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d54:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fb3a 	bl	80033d4 <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d66:	f000 fc91 	bl	800168c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 fd61 	bl	8003840 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d84:	f000 fc82 	bl	800168c <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3778      	adds	r7, #120	@ 0x78
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	@ 0x38
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	615a      	str	r2, [r3, #20]
 8000dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dc2:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000dc4:	4a34      	ldr	r2, [pc, #208]	@ (8000e98 <MX_TIM3_Init+0x108>)
 8000dc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000dc8:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000dca:	222f      	movs	r2, #47	@ 0x2f
 8000dcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b31      	ldr	r3, [pc, #196]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000dd6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000dda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000de8:	482a      	ldr	r0, [pc, #168]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000dea:	f002 fed9 	bl	8003ba0 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000df4:	f000 fc4a 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4823      	ldr	r0, [pc, #140]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000e06:	f003 f997 	bl	8004138 <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e10:	f000 fc3c 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e14:	481f      	ldr	r0, [pc, #124]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000e16:	f002 ff1a 	bl	8003c4e <HAL_TIM_PWM_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e20:	f000 fc34 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4818      	ldr	r0, [pc, #96]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000e34:	f003 fe70 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e3e:	f000 fc25 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	2360      	movs	r3, #96	@ 0x60
 8000e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2400;
 8000e46:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8000e4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480e      	ldr	r0, [pc, #56]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000e5c:	f003 f858 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000e66:	f000 fc11 	bl	800168c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2208      	movs	r2, #8
 8000e72:	4619      	mov	r1, r3
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000e76:	f003 f84b 	bl	8003f10 <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000e80:	f000 fc04 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e84:	4803      	ldr	r0, [pc, #12]	@ (8000e94 <MX_TIM3_Init+0x104>)
 8000e86:	f000 fc4b 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8000e8a:	bf00      	nop
 8000e8c:	3738      	adds	r7, #56	@ 0x38
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200001fc 	.word	0x200001fc
 8000e98:	40000400 	.word	0x40000400

08000e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ea2:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <MX_USART1_UART_Init+0x5c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ea8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_USART1_UART_Init+0x58>)
 8000ee0:	f003 fe9a 	bl	8004c18 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eea:	f000 fbcf 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000248 	.word	0x20000248
 8000ef8:	40013800 	.word	0x40013800

08000efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f02:	4a15      	ldr	r2, [pc, #84]	@ (8000f58 <MX_USART2_UART_Init+0x5c>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000f06:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f08:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_USART2_UART_Init+0x58>)
 8000f40:	f003 fe6a 	bl	8004c18 <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f000 fb9f 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200002d0 	.word	0x200002d0
 8000f58:	40004400 	.word	0x40004400

08000f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	4b80      	ldr	r3, [pc, #512]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a7f      	ldr	r2, [pc, #508]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000f78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	4a79      	ldr	r2, [pc, #484]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000f90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b77      	ldr	r3, [pc, #476]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fa2:	4b74      	ldr	r3, [pc, #464]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a73      	ldr	r2, [pc, #460]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b71      	ldr	r3, [pc, #452]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b6e      	ldr	r3, [pc, #440]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a6d      	ldr	r2, [pc, #436]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b68      	ldr	r3, [pc, #416]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4a67      	ldr	r2, [pc, #412]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fdc:	6153      	str	r3, [r2, #20]
 8000fde:	4b65      	ldr	r3, [pc, #404]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4b62      	ldr	r3, [pc, #392]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a61      	ldr	r2, [pc, #388]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000ff0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8001174 <MX_GPIO_Init+0x218>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001002:	2200      	movs	r2, #0
 8001004:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001008:	485b      	ldr	r0, [pc, #364]	@ (8001178 <MX_GPIO_Init+0x21c>)
 800100a:	f001 f975 	bl	80022f8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_PIN_US_OUT_GPIO_Port, GPIO_PIN_US_OUT_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2102      	movs	r1, #2
 8001012:	485a      	ldr	r0, [pc, #360]	@ (800117c <MX_GPIO_Init+0x220>)
 8001014:	f001 f970 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_PIN_3_GPIO_Port, GPIO_PIN_3_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2108      	movs	r1, #8
 800101c:	4858      	ldr	r0, [pc, #352]	@ (8001180 <MX_GPIO_Init+0x224>)
 800101e:	f001 f96b 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001022:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001026:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	484f      	ldr	r0, [pc, #316]	@ (8001178 <MX_GPIO_Init+0x21c>)
 800103c:	f000 ffca 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8001040:	2333      	movs	r3, #51	@ 0x33
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001044:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4848      	ldr	r0, [pc, #288]	@ (8001178 <MX_GPIO_Init+0x21c>)
 8001056:	f000 ffbd 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1_Pin;
 800105a:	2302      	movs	r3, #2
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_PIN_1_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4845      	ldr	r0, [pc, #276]	@ (8001184 <MX_GPIO_Init+0x228>)
 800106e:	f000 ffb1 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2_Pin;
 8001072:	2304      	movs	r3, #4
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800107a:	2302      	movs	r3, #2
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_PIN_2_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	483f      	ldr	r0, [pc, #252]	@ (8001184 <MX_GPIO_Init+0x228>)
 8001086:	f000 ffa5 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800108a:	2301      	movs	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f000 ff98 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010a4:	23e0      	movs	r3, #224	@ 0xe0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b4:	2305      	movs	r3, #5
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c2:	f000 ff87 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_US_OUT_Pin;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ce:	2302      	movs	r3, #2
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010d2:	2301      	movs	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_PIN_US_OUT_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	4827      	ldr	r0, [pc, #156]	@ (800117c <MX_GPIO_Init+0x220>)
 80010de:	f000 ff79 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_US_IN_Pin;
 80010e2:	2304      	movs	r3, #4
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_PIN_US_IN_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4821      	ldr	r0, [pc, #132]	@ (800117c <MX_GPIO_Init+0x220>)
 80010f8:	f000 ff6c 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80010fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800110e:	230e      	movs	r3, #14
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111c:	f000 ff5a 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3_Pin;
 8001120:	2308      	movs	r3, #8
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_PIN_3_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4812      	ldr	r0, [pc, #72]	@ (8001180 <MX_GPIO_Init+0x224>)
 8001138:	f000 ff4c 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800113c:	23c0      	movs	r3, #192	@ 0xc0
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114c:	2304      	movs	r3, #4
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4809      	ldr	r0, [pc, #36]	@ (800117c <MX_GPIO_Init+0x220>)
 8001158:	f000 ff3c 	bl	8001fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2008      	movs	r0, #8
 8001162:	f000 fe8a 	bl	8001e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001166:	2008      	movs	r0, #8
 8001168:	f000 fea3 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116c:	bf00      	nop
 800116e:	3730      	adds	r7, #48	@ 0x30
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40021000 	.word	0x40021000
 8001178:	48001000 	.word	0x48001000
 800117c:	48000400 	.word	0x48000400
 8001180:	48000c00 	.word	0x48000c00
 8001184:	48000800 	.word	0x48000800

08001188 <move_forward_slow>:

/* USER CODE BEGIN 4 */

/* Send a command to the robot to move forward slowly */
void move_forward_slow(void) {
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
    uint8_t go_forward[13] = "mogo 1:7 2:7\r";
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <move_forward_slow+0x24>)
 8001190:	463c      	mov	r4, r7
 8001192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001194:	c407      	stmia	r4!, {r0, r1, r2}
 8001196:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, go_forward, sizeof(go_forward), 50);
 8001198:	4639      	mov	r1, r7
 800119a:	2332      	movs	r3, #50	@ 0x32
 800119c:	220d      	movs	r2, #13
 800119e:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <move_forward_slow+0x28>)
 80011a0:	f003 fd88 	bl	8004cb4 <HAL_UART_Transmit>
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	08008a90 	.word	0x08008a90
 80011b0:	20000248 	.word	0x20000248

080011b4 <move_forward_fast>:

/* Send a command to the robot to move forward fast */
void move_forward_fast(void) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
    uint8_t go_forward[15] = "mogo 1:15 2:15\r";
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <move_forward_fast+0x2c>)
 80011bc:	463c      	mov	r4, r7
 80011be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c0:	c407      	stmia	r4!, {r0, r1, r2}
 80011c2:	8023      	strh	r3, [r4, #0]
 80011c4:	3402      	adds	r4, #2
 80011c6:	0c1b      	lsrs	r3, r3, #16
 80011c8:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, go_forward, sizeof(go_forward), 50);
 80011ca:	4639      	mov	r1, r7
 80011cc:	2332      	movs	r3, #50	@ 0x32
 80011ce:	220f      	movs	r2, #15
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <move_forward_fast+0x30>)
 80011d2:	f003 fd6f 	bl	8004cb4 <HAL_UART_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	bf00      	nop
 80011e0:	08008aa0 	.word	0x08008aa0
 80011e4:	20000248 	.word	0x20000248

080011e8 <turn_left>:
    uint8_t go_backward[17] = "mogo 1:-15 2:-15\r";
    HAL_UART_Transmit(&huart1, go_backward, sizeof(go_backward), 50);
}

/* Send a command to the robot to turn left forward */
void turn_left(void) {
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
    uint8_t go_left[16] = "mogo 1:-12 2:12\r";
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <turn_left+0x24>)
 80011f0:	463c      	mov	r4, r7
 80011f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart1, go_left, sizeof(go_left), 50);
 80011f8:	4639      	mov	r1, r7
 80011fa:	2332      	movs	r3, #50	@ 0x32
 80011fc:	2210      	movs	r2, #16
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <turn_left+0x28>)
 8001200:	f003 fd58 	bl	8004cb4 <HAL_UART_Transmit>
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	08008ad4 	.word	0x08008ad4
 8001210:	20000248 	.word	0x20000248

08001214 <turn_right>:
/* Send a command to the robot to turn right forward */
void turn_right(void) {
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
    uint8_t go_right[16] = "mogo 1:12 2:-12\r";
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <turn_right+0x24>)
 800121c:	463c      	mov	r4, r7
 800121e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart1, go_right, sizeof(go_right), 50);
 8001224:	4639      	mov	r1, r7
 8001226:	2332      	movs	r3, #50	@ 0x32
 8001228:	2210      	movs	r2, #16
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <turn_right+0x28>)
 800122c:	f003 fd42 	bl	8004cb4 <HAL_UART_Transmit>
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	08008ae4 	.word	0x08008ae4
 800123c:	20000248 	.word	0x20000248

08001240 <move_stop>:

/* Send a command to the robot to stop moving */
void move_stop(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    uint8_t stop[5] = "stop\r";
 8001246:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <move_stop+0x28>)
 8001248:	463b      	mov	r3, r7
 800124a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124e:	6018      	str	r0, [r3, #0]
 8001250:	3304      	adds	r3, #4
 8001252:	7019      	strb	r1, [r3, #0]
    HAL_UART_Transmit(&huart1, stop, sizeof(stop), 50);
 8001254:	4639      	mov	r1, r7
 8001256:	2332      	movs	r3, #50	@ 0x32
 8001258:	2205      	movs	r2, #5
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <move_stop+0x2c>)
 800125c:	f003 fd2a 	bl	8004cb4 <HAL_UART_Transmit>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08008af4 	.word	0x08008af4
 800126c:	20000248 	.word	0x20000248

08001270 <look_left>:

/* Send a command to the turret servo motor to look left */
void look_left(void) {
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
    htim3.Instance->CCR1 = 600;
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <look_left+0x18>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800127c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	200001fc 	.word	0x200001fc

0800128c <look_forward>:

/* Send a command to the turret servo motor to look forward */
void look_forward(void) {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
    htim3.Instance->CCR1 = 1500;
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <look_forward+0x18>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001298:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	200001fc 	.word	0x200001fc

080012a8 <look_right>:

/* Send a command to the turret servo motor to look right */
void look_right(void) {
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
    htim3.Instance->CCR1 = 2400;
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <look_right+0x18>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80012b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	200001fc 	.word	0x200001fc

080012c4 <send_trigger_pulse>:
void switchOffLed(void) {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}

/* Send to the US sensor a trigger pulse to start the measurement */
void send_trigger_pulse(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIO_PIN_US_OUT_GPIO_Port, GPIO_PIN_US_OUT_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2102      	movs	r1, #2
 80012cc:	4806      	ldr	r0, [pc, #24]	@ (80012e8 <send_trigger_pulse+0x24>)
 80012ce:	f001 f813 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f000 fcd2 	bl	8001c7c <HAL_Delay>
    HAL_GPIO_WritePin(GPIO_PIN_US_OUT_GPIO_Port, GPIO_PIN_US_OUT_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2102      	movs	r1, #2
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <send_trigger_pulse+0x24>)
 80012de:	f001 f80b 	bl	80022f8 <HAL_GPIO_WritePin>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	48000400 	.word	0x48000400

080012ec <measure_echo_pulse_duration>:

/* Measure the duration of the echo pulse to calculate the distance */
float measure_echo_pulse_duration(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
	uint32_t start_time, end_time, pulse_duration;

    // Wait for the signal ECHO to become HIGH
    while (!us_sensor_echo_value) {};
 80012f2:	bf00      	nop
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <measure_echo_pulse_duration+0x54>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0fb      	beq.n	80012f4 <measure_echo_pulse_duration+0x8>

    // Save the start time of the pulse
    start_time = HAL_GetTick();
 80012fc:	f000 fcb2 	bl	8001c64 <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    // Wait for the signal ECHO to become LOW
    while (us_sensor_echo_value) {};
 8001302:	bf00      	nop
 8001304:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <measure_echo_pulse_duration+0x54>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1fb      	bne.n	8001304 <measure_echo_pulse_duration+0x18>

    // Save the end time of the pulse
    end_time = HAL_GetTick();
 800130c:	f000 fcaa 	bl	8001c64 <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]

    // Calculate the duration of the pulse
    pulse_duration = end_time - start_time;
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	607b      	str	r3, [r7, #4]

    // Calculate the distance in cm
    float distance_cm = pulse_duration / 58.0f;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001324:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001344 <measure_echo_pulse_duration+0x58>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	edc7 7a00 	vstr	s15, [r7]
    return distance_cm;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	ee07 3a90 	vmov	s15, r3
}
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000358 	.word	0x20000358
 8001344:	42680000 	.word	0x42680000

08001348 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);
    if (GPIO_Pin == GPIO_PIN_US_IN_Pin) {
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d107      	bne.n	8001368 <HAL_GPIO_EXTI_Callback+0x20>
        us_sensor_echo_value = HAL_GPIO_ReadPin(GPIO_PIN_US_IN_GPIO_Port, GPIO_PIN_US_IN_Pin);
 8001358:	2104      	movs	r1, #4
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <HAL_GPIO_EXTI_Callback+0x28>)
 800135c:	f000 ffb4 	bl	80022c8 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001366:	701a      	strb	r2, [r3, #0]
    }
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	48000400 	.word	0x48000400
 8001374:	20000358 	.word	0x20000358

08001378 <HAL_UART_RxCpltCallback>:

/* Callback function for UART reception */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    UNUSED(huart);

    if (huart->Instance == USART2) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <HAL_UART_RxCpltCallback+0x40>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d105      	bne.n	8001396 <HAL_UART_RxCpltCallback+0x1e>
        //HAL_UART_Transmit(&huart1, uart2_buffer, 1, 50);
        HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	490b      	ldr	r1, [pc, #44]	@ (80013bc <HAL_UART_RxCpltCallback+0x44>)
 800138e:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <HAL_UART_RxCpltCallback+0x48>)
 8001390:	f003 fd19 	bl	8004dc6 <HAL_UART_Receive_IT>
        //HAL_UART_Transmit(&huart2, uart1_buffer, 1, 50);
        HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
    } else {
        Error_Handler();
    }
}
 8001394:	e00c      	b.n	80013b0 <HAL_UART_RxCpltCallback+0x38>
    } else if (huart->Instance == USART1) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_UART_RxCpltCallback+0x4c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d105      	bne.n	80013ac <HAL_UART_RxCpltCallback+0x34>
        HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 80013a0:	2201      	movs	r2, #1
 80013a2:	4909      	ldr	r1, [pc, #36]	@ (80013c8 <HAL_UART_RxCpltCallback+0x50>)
 80013a4:	4809      	ldr	r0, [pc, #36]	@ (80013cc <HAL_UART_RxCpltCallback+0x54>)
 80013a6:	f003 fd0e 	bl	8004dc6 <HAL_UART_Receive_IT>
}
 80013aa:	e001      	b.n	80013b0 <HAL_UART_RxCpltCallback+0x38>
        Error_Handler();
 80013ac:	f000 f96e 	bl	800168c <Error_Handler>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40004400 	.word	0x40004400
 80013bc:	20000004 	.word	0x20000004
 80013c0:	200002d0 	.word	0x200002d0
 80013c4:	40013800 	.word	0x40013800
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000248 	.word	0x20000248

080013d0 <measure_distance>:


float measure_distance(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
    float distance = 0.0;
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
    while (distance == 0.0) {
 80013dc:	e005      	b.n	80013ea <measure_distance+0x1a>
        send_trigger_pulse();
 80013de:	f7ff ff71 	bl	80012c4 <send_trigger_pulse>
        distance = measure_echo_pulse_duration();
 80013e2:	f7ff ff83 	bl	80012ec <measure_echo_pulse_duration>
 80013e6:	ed87 0a01 	vstr	s0, [r7, #4]
    while (distance == 0.0) {
 80013ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	d0f2      	beq.n	80013de <measure_distance+0xe>
    }
    HAL_Delay(5);
 80013f8:	2005      	movs	r0, #5
 80013fa:	f000 fc3f 	bl	8001c7c <HAL_Delay>
    return distance;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	ee07 3a90 	vmov	s15, r3
}
 8001404:	eeb0 0a67 	vmov.f32	s0, s15
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <step_turn_right>:

void step_turn_right(void) {
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
    move_stop();
 8001412:	f7ff ff15 	bl	8001240 <move_stop>
    turn_right();
 8001416:	f7ff fefd 	bl	8001214 <turn_right>
    HAL_Delay(900);
 800141a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800141e:	f000 fc2d 	bl	8001c7c <HAL_Delay>
    move_stop();
 8001422:	f7ff ff0d 	bl	8001240 <move_stop>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}

0800142a <step_turn_left>:

void step_turn_left(void) {
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
    move_stop();
 800142e:	f7ff ff07 	bl	8001240 <move_stop>
    turn_left();
 8001432:	f7ff fed9 	bl	80011e8 <turn_left>
    HAL_Delay(880);
 8001436:	f44f 705c 	mov.w	r0, #880	@ 0x370
 800143a:	f000 fc1f 	bl	8001c7c <HAL_Delay>
    move_stop();
 800143e:	f7ff feff 	bl	8001240 <move_stop>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}

08001446 <step_move_forward>:

void step_move_forward(void) {
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
    move_stop();
 800144a:	f7ff fef9 	bl	8001240 <move_stop>
    move_forward_slow();
 800144e:	f7ff fe9b 	bl	8001188 <move_forward_slow>
    HAL_Delay(1650);
 8001452:	f240 6072 	movw	r0, #1650	@ 0x672
 8001456:	f000 fc11 	bl	8001c7c <HAL_Delay>
    move_stop();
 800145a:	f7ff fef1 	bl	8001240 <move_stop>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <transiGoLineToGoLeft>:


void transiGoLineToGoLeft(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
    on_line = 0;
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <transiGoLineToGoLeft+0x1c>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
    step_turn_left();
 800146e:	f7ff ffdc 	bl	800142a <step_turn_left>
    look_forward();
 8001472:	f7ff ff0b 	bl	800128c <look_forward>
    goLeftWantUp();
 8001476:	f000 f805 	bl	8001484 <goLeftWantUp>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008

08001484 <goLeftWantUp>:

void goLeftWantUp(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
    step_move_forward();
 800148a:	f7ff ffdc 	bl	8001446 <step_move_forward>
    look_right();
 800148e:	f7ff ff0b 	bl	80012a8 <look_right>

    float distance = measure_distance();
 8001492:	f7ff ff9d 	bl	80013d0 <measure_distance>
 8001496:	ed87 0a01 	vstr	s0, [r7, #4]

    if (distance < shortDistDetect) {
 800149a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80014e8 <goLeftWantUp+0x64>
 800149e:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	d517      	bpl.n	80014dc <goLeftWantUp+0x58>
        move_stop();
 80014ac:	f7ff fec8 	bl	8001240 <move_stop>
        look_forward();
 80014b0:	f7ff feec 	bl	800128c <look_forward>
        distance = measure_distance();
 80014b4:	f7ff ff8c 	bl	80013d0 <measure_distance>
 80014b8:	ed87 0a01 	vstr	s0, [r7, #4]

        if (distance < shortDistDetect) {
 80014bc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80014e8 <goLeftWantUp+0x64>
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014cc:	d503      	bpl.n	80014d6 <goLeftWantUp+0x52>
            // TODO
            HAL_Delay(100000);
 80014ce:	4807      	ldr	r0, [pc, #28]	@ (80014ec <goLeftWantUp+0x68>)
 80014d0:	f000 fbd4 	bl	8001c7c <HAL_Delay>
            goLeftWantUp();
        }
    } else {
        transiGoLeftToGoUp();
    }
}
 80014d4:	e004      	b.n	80014e0 <goLeftWantUp+0x5c>
            goLeftWantUp();
 80014d6:	f7ff ffd5 	bl	8001484 <goLeftWantUp>
}
 80014da:	e001      	b.n	80014e0 <goLeftWantUp+0x5c>
        transiGoLeftToGoUp();
 80014dc:	f000 f808 	bl	80014f0 <transiGoLeftToGoUp>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	3d4ccccd 	.word	0x3d4ccccd
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <transiGoLeftToGoUp>:

void transiGoLeftToGoUp(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    step_turn_right();
 80014f4:	f7ff ff8b 	bl	800140e <step_turn_right>
    look_forward();
 80014f8:	f7ff fec8 	bl	800128c <look_forward>
    goUpWantRight();
 80014fc:	f000 f802 	bl	8001504 <goUpWantRight>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <goUpWantRight>:

void goUpWantRight(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
    step_move_forward();
 800150a:	f7ff ff9c 	bl	8001446 <step_move_forward>
    look_right();
 800150e:	f7ff fecb 	bl	80012a8 <look_right>

    float distance = measure_distance();
 8001512:	f7ff ff5d 	bl	80013d0 <measure_distance>
 8001516:	ed87 0a01 	vstr	s0, [r7, #4]

    if (distance < shortDistDetect) {
 800151a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800158c <goUpWantRight+0x88>
 800151e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d529      	bpl.n	8001580 <goUpWantRight+0x7c>
        move_stop();
 800152c:	f7ff fe88 	bl	8001240 <move_stop>
        look_forward();
 8001530:	f7ff feac 	bl	800128c <look_forward>
        distance = measure_distance();
 8001534:	f7ff ff4c 	bl	80013d0 <measure_distance>
 8001538:	ed87 0a01 	vstr	s0, [r7, #4]

        if (distance < shortDistDetect) {
 800153c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800158c <goUpWantRight+0x88>
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154c:	d515      	bpl.n	800157a <goUpWantRight+0x76>
            look_left();
 800154e:	f7ff fe8f 	bl	8001270 <look_left>
            distance = measure_distance();
 8001552:	f7ff ff3d 	bl	80013d0 <measure_distance>
 8001556:	ed87 0a01 	vstr	s0, [r7, #4]

            if (distance < shortDistDetect) {
 800155a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800158c <goUpWantRight+0x88>
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	d503      	bpl.n	8001574 <goUpWantRight+0x70>
                // TODO
                HAL_Delay(100000);
 800156c:	4808      	ldr	r0, [pc, #32]	@ (8001590 <goUpWantRight+0x8c>)
 800156e:	f000 fb85 	bl	8001c7c <HAL_Delay>
            goUpWantRight();
        }
    } else {
        transiGoUpToGoRight();
    }
}
 8001572:	e007      	b.n	8001584 <goUpWantRight+0x80>
                transiGoLineToGoLeft();
 8001574:	f7ff ff76 	bl	8001464 <transiGoLineToGoLeft>
}
 8001578:	e004      	b.n	8001584 <goUpWantRight+0x80>
            goUpWantRight();
 800157a:	f7ff ffc3 	bl	8001504 <goUpWantRight>
}
 800157e:	e001      	b.n	8001584 <goUpWantRight+0x80>
        transiGoUpToGoRight();
 8001580:	f000 f808 	bl	8001594 <transiGoUpToGoRight>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3d4ccccd 	.word	0x3d4ccccd
 8001590:	000186a0 	.word	0x000186a0

08001594 <transiGoUpToGoRight>:

void transiGoUpToGoRight(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
    step_turn_right();
 8001598:	f7ff ff39 	bl	800140e <step_turn_right>
    look_forward();
 800159c:	f7ff fe76 	bl	800128c <look_forward>
    goRightWantLine();
 80015a0:	f000 f802 	bl	80015a8 <goRightWantLine>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <goRightWantLine>:

void goRightWantLine(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
    while (!on_line) {
 80015ae:	e051      	b.n	8001654 <goRightWantLine+0xac>
        look_forward();
 80015b0:	f7ff fe6c 	bl	800128c <look_forward>

        float distance = measure_distance();
 80015b4:	f7ff ff0c 	bl	80013d0 <measure_distance>
 80015b8:	ed87 0a03 	vstr	s0, [r7, #12]

        if (distance < shortDistDetect) {
 80015bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001668 <goRightWantLine+0xc0>
 80015c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	d517      	bpl.n	80015fe <goRightWantLine+0x56>
            move_stop();
 80015ce:	f7ff fe37 	bl	8001240 <move_stop>
            look_left();
 80015d2:	f7ff fe4d 	bl	8001270 <look_left>
            distance = measure_distance();
 80015d6:	f7ff fefb 	bl	80013d0 <measure_distance>
 80015da:	ed87 0a03 	vstr	s0, [r7, #12]

            if (distance < shortDistDetect) {
 80015de:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001668 <goRightWantLine+0xc0>
 80015e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	d503      	bpl.n	80015f8 <goRightWantLine+0x50>
                // TODO
                HAL_Delay(100000);
 80015f0:	481e      	ldr	r0, [pc, #120]	@ (800166c <goRightWantLine+0xc4>)
 80015f2:	f000 fb43 	bl	8001c7c <HAL_Delay>
 80015f6:	e02d      	b.n	8001654 <goRightWantLine+0xac>
            } else {
                transiGoRightToGoUp();
 80015f8:	f000 f83e 	bl	8001678 <transiGoRightToGoUp>
 80015fc:	e02a      	b.n	8001654 <goRightWantLine+0xac>
            }
        } else {
            uint32_t photodiode_value_right = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80015fe:	2102      	movs	r1, #2
 8001600:	481b      	ldr	r0, [pc, #108]	@ (8001670 <goRightWantLine+0xc8>)
 8001602:	f000 fe61 	bl	80022c8 <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	60bb      	str	r3, [r7, #8]
            uint32_t photodiode_value_left = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 800160a:	2104      	movs	r1, #4
 800160c:	4818      	ldr	r0, [pc, #96]	@ (8001670 <goRightWantLine+0xc8>)
 800160e:	f000 fe5b 	bl	80022c8 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	607b      	str	r3, [r7, #4]

            if (photodiode_value_right == GPIO_PIN_RESET && photodiode_value_left == GPIO_PIN_RESET) {
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10a      	bne.n	8001632 <goRightWantLine+0x8a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d107      	bne.n	8001632 <goRightWantLine+0x8a>
                step_turn_left();
 8001622:	f7ff ff02 	bl	800142a <step_turn_left>
                look_forward();
 8001626:	f7ff fe31 	bl	800128c <look_forward>
                on_line = 1;
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <goRightWantLine+0xcc>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e010      	b.n	8001654 <goRightWantLine+0xac>
            } else if (photodiode_value_right == GPIO_PIN_RESET && photodiode_value_left == GPIO_PIN_SET) {
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <goRightWantLine+0x9c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d102      	bne.n	8001644 <goRightWantLine+0x9c>
                turn_right();
 800163e:	f7ff fde9 	bl	8001214 <turn_right>
 8001642:	e007      	b.n	8001654 <goRightWantLine+0xac>
            } else if (photodiode_value_right == GPIO_PIN_SET && photodiode_value_left == GPIO_PIN_RESET) {
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d104      	bne.n	8001654 <goRightWantLine+0xac>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <goRightWantLine+0xac>
                turn_left();
 8001650:	f7ff fdca 	bl	80011e8 <turn_left>
    while (!on_line) {
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <goRightWantLine+0xcc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0a9      	beq.n	80015b0 <goRightWantLine+0x8>
            }
        }
    }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	3d4ccccd 	.word	0x3d4ccccd
 800166c:	000186a0 	.word	0x000186a0
 8001670:	48000800 	.word	0x48000800
 8001674:	20000008 	.word	0x20000008

08001678 <transiGoRightToGoUp>:

void transiGoRightToGoUp(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    step_turn_right();
 800167c:	f7ff fec7 	bl	800140e <step_turn_right>
    look_forward();
 8001680:	f7ff fe04 	bl	800128c <look_forward>
    goUpWantRight();
 8001684:	f7ff ff3e 	bl	8001504 <goUpWantRight>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <Error_Handler+0x8>

08001698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_MspInit+0x44>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <HAL_MspInit+0x44>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6193      	str	r3, [r2, #24]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_MspInit+0x44>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_MspInit+0x44>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <HAL_MspInit+0x44>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_MspInit+0x44>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ce:	2007      	movs	r0, #7
 80016d0:	f000 fbc8 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_TIM_Base_MspInit+0x38>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10b      	bne.n	800170a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_TIM_Base_MspInit+0x3c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <HAL_TIM_Base_MspInit+0x3c>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <HAL_TIM_Base_MspInit+0x3c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40000400 	.word	0x40000400
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1f      	ldr	r2, [pc, #124]	@ (80017bc <HAL_TIM_MspPostInit+0x9c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d137      	bne.n	80017b2 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <HAL_TIM_MspPostInit+0xa0>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4a1e      	ldr	r2, [pc, #120]	@ (80017c0 <HAL_TIM_MspPostInit+0xa0>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800174c:	6153      	str	r3, [r2, #20]
 800174e:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <HAL_TIM_MspPostInit+0xa0>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_TIM_MspPostInit+0xa0>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <HAL_TIM_MspPostInit+0xa0>)
 8001760:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_TIM_MspPostInit+0xa0>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001782:	2302      	movs	r3, #2
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <HAL_TIM_MspPostInit+0xa4>)
 800178e:	f000 fc21 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001792:	2340      	movs	r3, #64	@ 0x40
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017a2:	2302      	movs	r3, #2
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <HAL_TIM_MspPostInit+0xa8>)
 80017ae:	f000 fc11 	bl	8001fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	@ 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48000800 	.word	0x48000800

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	@ 0x30
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a47      	ldr	r2, [pc, #284]	@ (8001908 <HAL_UART_MspInit+0x13c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d140      	bne.n	8001870 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_UART_MspInit+0x140>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a46      	ldr	r2, [pc, #280]	@ (800190c <HAL_UART_MspInit+0x140>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b44      	ldr	r3, [pc, #272]	@ (800190c <HAL_UART_MspInit+0x140>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4b41      	ldr	r3, [pc, #260]	@ (800190c <HAL_UART_MspInit+0x140>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4a40      	ldr	r2, [pc, #256]	@ (800190c <HAL_UART_MspInit+0x140>)
 800180c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001810:	6153      	str	r3, [r2, #20]
 8001812:	4b3e      	ldr	r3, [pc, #248]	@ (800190c <HAL_UART_MspInit+0x140>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800181e:	2310      	movs	r3, #16
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001822:	2312      	movs	r3, #18
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182e:	2307      	movs	r3, #7
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4835      	ldr	r0, [pc, #212]	@ (8001910 <HAL_UART_MspInit+0x144>)
 800183a:	f000 fbcb 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800183e:	2320      	movs	r3, #32
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800184e:	2307      	movs	r3, #7
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	482d      	ldr	r0, [pc, #180]	@ (8001910 <HAL_UART_MspInit+0x144>)
 800185a:	f000 fbbb 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2025      	movs	r0, #37	@ 0x25
 8001864:	f000 fb09 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001868:	2025      	movs	r0, #37	@ 0x25
 800186a:	f000 fb22 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800186e:	e046      	b.n	80018fe <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a27      	ldr	r2, [pc, #156]	@ (8001914 <HAL_UART_MspInit+0x148>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d141      	bne.n	80018fe <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART2_CLK_ENABLE();
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <HAL_UART_MspInit+0x140>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a23      	ldr	r2, [pc, #140]	@ (800190c <HAL_UART_MspInit+0x140>)
 8001880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_UART_MspInit+0x140>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_UART_MspInit+0x140>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <HAL_UART_MspInit+0x140>)
 8001898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800189c:	6153      	str	r3, [r2, #20]
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_UART_MspInit+0x140>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018aa:	2304      	movs	r3, #4
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ae:	2312      	movs	r3, #18
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ba:	2307      	movs	r3, #7
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c8:	f000 fb84 	bl	8001fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018cc:	2308      	movs	r3, #8
 80018ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018dc:	2307      	movs	r3, #7
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ea:	f000 fb73 	bl	8001fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2026      	movs	r0, #38	@ 0x26
 80018f4:	f000 fac1 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018f8:	2026      	movs	r0, #38	@ 0x26
 80018fa:	f000 fada 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3730      	adds	r7, #48	@ 0x30
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40013800 	.word	0x40013800
 800190c:	40021000 	.word	0x40021000
 8001910:	48000800 	.word	0x48000800
 8001914:	40004400 	.word	0x40004400

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <NMI_Handler+0x4>

08001920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <MemManage_Handler+0x4>

08001930 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <UsageFault_Handler+0x4>

08001940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196e:	f000 f965 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}

08001976 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_US_IN_Pin);
 800197a:	2004      	movs	r0, #4
 800197c:	f000 fcd4 	bl	8002328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <USART1_IRQHandler+0x10>)
 800198a:	f003 fa61 	bl	8004e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000248 	.word	0x20000248

08001998 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <USART2_IRQHandler+0x10>)
 800199e:	f003 fa57 	bl	8004e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200002d0 	.word	0x200002d0

080019ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_kill>:

int _kill(int pid, int sig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c6:	f005 f989 	bl	8006cdc <__errno>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2216      	movs	r2, #22
 80019ce:	601a      	str	r2, [r3, #0]
  return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_exit>:

void _exit (int status)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ffe7 	bl	80019bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ee:	bf00      	nop
 80019f0:	e7fd      	b.n	80019ee <_exit+0x12>

080019f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e00a      	b.n	8001a1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a04:	f3af 8000 	nop.w
 8001a08:	4601      	mov	r1, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	60ba      	str	r2, [r7, #8]
 8001a10:	b2ca      	uxtb	r2, r1
 8001a12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dbf0      	blt.n	8001a04 <_read+0x12>
  }

  return len;
 8001a22:	687b      	ldr	r3, [r7, #4]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e009      	b.n	8001a52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dbf1      	blt.n	8001a3e <_write+0x12>
  }
  return len;
 8001a5a:	687b      	ldr	r3, [r7, #4]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_close>:

int _close(int file)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_isatty>:

int _isatty(int file)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4a14      	ldr	r2, [pc, #80]	@ (8001b28 <_sbrk+0x5c>)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <_sbrk+0x60>)
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <_sbrk+0x64>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	@ (8001b34 <_sbrk+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d207      	bcs.n	8001b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001afc:	f005 f8ee 	bl	8006cdc <__errno>
 8001b00:	4603      	mov	r3, r0
 8001b02:	220c      	movs	r2, #12
 8001b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e009      	b.n	8001b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <_sbrk+0x64>)
 8001b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000a000 	.word	0x2000a000
 8001b2c:	00000400 	.word	0x00000400
 8001b30:	2000035c 	.word	0x2000035c
 8001b34:	200004b0 	.word	0x200004b0

08001b38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b60:	f7ff ffea 	bl	8001b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b66:	490d      	ldr	r1, [pc, #52]	@ (8001b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <LoopForever+0xe>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba8 <LoopForever+0x16>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f005 f8ad 	bl	8006ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8e:	f7ff f80b 	bl	8000ba8 <main>

08001b92 <LoopForever>:

LoopForever:
    b LoopForever
 8001b92:	e7fe      	b.n	8001b92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ba0:	08008eb8 	.word	0x08008eb8
  ldr r2, =_sbss
 8001ba4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ba8:	200004b0 	.word	0x200004b0

08001bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC1_2_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <HAL_Init+0x28>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <HAL_Init+0x28>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 f94f 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fd64 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000

08001bdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f967 	bl	8001ece <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f92f 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	@ (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	20000014 	.word	0x20000014
 8001c38:	20000010 	.word	0x20000010

08001c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000014 	.word	0x20000014
 8001c60:	20000360 	.word	0x20000360

08001c64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000360 	.word	0x20000360

08001c7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000014 	.word	0x20000014

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4907      	ldr	r1, [pc, #28]	@ (8001d60 <__NVIC_EnableIRQ+0x38>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	@ (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	@ (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	@ 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff8e 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff29 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff3e 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff8e 	bl	8001db8 <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5d 	bl	8001d64 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff31 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ffa2 	bl	8001e20 <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d008      	beq.n	8001f0a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2204      	movs	r2, #4
 8001efc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e020      	b.n	8001f4c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 020e 	bic.w	r2, r2, #14
 8001f18:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d005      	beq.n	8001f7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2204      	movs	r2, #4
 8001f72:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e027      	b.n	8001fca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 020e 	bic.w	r2, r2, #14
 8001f88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
    } 
  }
  return status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	e154      	b.n	800228e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8146 	beq.w	8002288 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d005      	beq.n	8002014 <HAL_GPIO_Init+0x40>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d130      	bne.n	8002076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204a:	2201      	movs	r2, #1
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0201 	and.w	r2, r3, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b03      	cmp	r3, #3
 8002080:	d017      	beq.n	80020b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d123      	bne.n	8002106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	6939      	ldr	r1, [r7, #16]
 8002102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0203 	and.w	r2, r3, #3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80a0 	beq.w	8002288 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002148:	4b58      	ldr	r3, [pc, #352]	@ (80022ac <HAL_GPIO_Init+0x2d8>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a57      	ldr	r2, [pc, #348]	@ (80022ac <HAL_GPIO_Init+0x2d8>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b55      	ldr	r3, [pc, #340]	@ (80022ac <HAL_GPIO_Init+0x2d8>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002160:	4a53      	ldr	r2, [pc, #332]	@ (80022b0 <HAL_GPIO_Init+0x2dc>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800218a:	d019      	beq.n	80021c0 <HAL_GPIO_Init+0x1ec>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a49      	ldr	r2, [pc, #292]	@ (80022b4 <HAL_GPIO_Init+0x2e0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d013      	beq.n	80021bc <HAL_GPIO_Init+0x1e8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a48      	ldr	r2, [pc, #288]	@ (80022b8 <HAL_GPIO_Init+0x2e4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00d      	beq.n	80021b8 <HAL_GPIO_Init+0x1e4>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a47      	ldr	r2, [pc, #284]	@ (80022bc <HAL_GPIO_Init+0x2e8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d007      	beq.n	80021b4 <HAL_GPIO_Init+0x1e0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a46      	ldr	r2, [pc, #280]	@ (80022c0 <HAL_GPIO_Init+0x2ec>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d101      	bne.n	80021b0 <HAL_GPIO_Init+0x1dc>
 80021ac:	2304      	movs	r3, #4
 80021ae:	e008      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021b0:	2305      	movs	r3, #5
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e004      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_Init+0x1ee>
 80021c0:	2300      	movs	r3, #0
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021d2:	4937      	ldr	r1, [pc, #220]	@ (80022b0 <HAL_GPIO_Init+0x2dc>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e0:	4b38      	ldr	r3, [pc, #224]	@ (80022c4 <HAL_GPIO_Init+0x2f0>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002204:	4a2f      	ldr	r2, [pc, #188]	@ (80022c4 <HAL_GPIO_Init+0x2f0>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800220a:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <HAL_GPIO_Init+0x2f0>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800222e:	4a25      	ldr	r2, [pc, #148]	@ (80022c4 <HAL_GPIO_Init+0x2f0>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002234:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <HAL_GPIO_Init+0x2f0>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002258:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_GPIO_Init+0x2f0>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225e:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <HAL_GPIO_Init+0x2f0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002282:	4a10      	ldr	r2, [pc, #64]	@ (80022c4 <HAL_GPIO_Init+0x2f0>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f aea3 	bne.w	8001fe4 <HAL_GPIO_Init+0x10>
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010000 	.word	0x40010000
 80022b4:	48000400 	.word	0x48000400
 80022b8:	48000800 	.word	0x48000800
 80022bc:	48000c00 	.word	0x48000c00
 80022c0:	48001000 	.word	0x48001000
 80022c4:	40010400 	.word	0x40010400

080022c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002314:	e002      	b.n	800231c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fffe 	bl	8001348 <HAL_GPIO_EXTI_Callback>
  }
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800235e:	af00      	add	r7, sp, #0
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002368:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800236a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	f001 b823 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002382:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 817d 	beq.w	800268e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002394:	4bbc      	ldr	r3, [pc, #752]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00c      	beq.n	80023ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a0:	4bb9      	ldr	r3, [pc, #740]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d15c      	bne.n	8002466 <HAL_RCC_OscConfig+0x10e>
 80023ac:	4bb6      	ldr	r3, [pc, #728]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b8:	d155      	bne.n	8002466 <HAL_RCC_OscConfig+0x10e>
 80023ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023be:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_OscConfig+0x94>
 80023e6:	4ba8      	ldr	r3, [pc, #672]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e015      	b.n	8002418 <HAL_RCC_OscConfig+0xc0>
 80023ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023f0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002400:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002404:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002408:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002414:	4b9c      	ldr	r3, [pc, #624]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800241c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002420:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800242c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f042 0220 	orr.w	r2, r2, #32
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f002 021f 	and.w	r2, r2, #31
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f202 	lsl.w	r2, r1, r2
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 811f 	beq.w	800268c <HAL_RCC_OscConfig+0x334>
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 8116 	bne.w	800268c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f000 bfaf 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x12e>
 8002478:	4b83      	ldr	r3, [pc, #524]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a82      	ldr	r2, [pc, #520]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e036      	b.n	80024f4 <HAL_RCC_OscConfig+0x19c>
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x158>
 8002496:	4b7c      	ldr	r3, [pc, #496]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a7b      	ldr	r2, [pc, #492]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 800249c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b79      	ldr	r3, [pc, #484]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a78      	ldr	r2, [pc, #480]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e021      	b.n	80024f4 <HAL_RCC_OscConfig+0x19c>
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x184>
 80024c2:	4b71      	ldr	r3, [pc, #452]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a70      	ldr	r2, [pc, #448]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0x19c>
 80024dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a69      	ldr	r2, [pc, #420]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b67      	ldr	r3, [pc, #412]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a66      	ldr	r2, [pc, #408]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f4:	4b64      	ldr	r3, [pc, #400]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	f023 020f 	bic.w	r2, r3, #15
 80024fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002500:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	495f      	ldr	r1, [pc, #380]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 800250a:	4313      	orrs	r3, r2
 800250c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002512:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d059      	beq.n	80025d2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff fba1 	bl	8001c64 <HAL_GetTick>
 8002522:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff fb9c 	bl	8001c64 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b64      	cmp	r3, #100	@ 0x64
 8002536:	d902      	bls.n	800253e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	f000 bf43 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>
 800253e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002542:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002552:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d102      	bne.n	8002570 <HAL_RCC_OscConfig+0x218>
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	e015      	b.n	800259c <HAL_RCC_OscConfig+0x244>
 8002570:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002574:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002584:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002588:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800258c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002598:	4b3b      	ldr	r3, [pc, #236]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025a0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80025a4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80025a8:	fa92 f2a2 	rbit	r2, r2
 80025ac:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80025b0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80025b4:	fab2 f282 	clz	r2, r2
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f042 0220 	orr.w	r2, r2, #32
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f002 021f 	and.w	r2, r2, #31
 80025c4:	2101      	movs	r1, #1
 80025c6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ab      	beq.n	8002528 <HAL_RCC_OscConfig+0x1d0>
 80025d0:	e05d      	b.n	800268e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7ff fb47 	bl	8001c64 <HAL_GetTick>
 80025d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff fb42 	bl	8001c64 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b64      	cmp	r3, #100	@ 0x64
 80025ea:	d902      	bls.n	80025f2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	f000 bee9 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>
 80025f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025f6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002606:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	095b      	lsrs	r3, r3, #5
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d102      	bne.n	8002624 <HAL_RCC_OscConfig+0x2cc>
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	e015      	b.n	8002650 <HAL_RCC_OscConfig+0x2f8>
 8002624:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002628:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002638:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800263c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002640:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800264c:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <HAL_RCC_OscConfig+0x330>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002654:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002658:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800265c:	fa92 f2a2 	rbit	r2, r2
 8002660:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002664:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002668:	fab2 f282 	clz	r2, r2
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f042 0220 	orr.w	r2, r2, #32
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f002 021f 	and.w	r2, r2, #31
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f202 	lsl.w	r2, r1, r2
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ab      	bne.n	80025dc <HAL_RCC_OscConfig+0x284>
 8002684:	e003      	b.n	800268e <HAL_RCC_OscConfig+0x336>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 817d 	beq.w	800299e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026a4:	4ba6      	ldr	r3, [pc, #664]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00b      	beq.n	80026c8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026b0:	4ba3      	ldr	r3, [pc, #652]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d172      	bne.n	80027a2 <HAL_RCC_OscConfig+0x44a>
 80026bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d16c      	bne.n	80027a2 <HAL_RCC_OscConfig+0x44a>
 80026c8:	2302      	movs	r3, #2
 80026ca:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80026da:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d102      	bne.n	80026f8 <HAL_RCC_OscConfig+0x3a0>
 80026f2:	4b93      	ldr	r3, [pc, #588]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	e013      	b.n	8002720 <HAL_RCC_OscConfig+0x3c8>
 80026f8:	2302      	movs	r3, #2
 80026fa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800270a:	2302      	movs	r3, #2
 800270c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002710:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800271c:	4b88      	ldr	r3, [pc, #544]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	2202      	movs	r2, #2
 8002722:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002726:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800272a:	fa92 f2a2 	rbit	r2, r2
 800272e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002732:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002736:	fab2 f282 	clz	r2, r2
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	f042 0220 	orr.w	r2, r2, #32
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f002 021f 	and.w	r2, r2, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f202 	lsl.w	r2, r1, r2
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCC_OscConfig+0x410>
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d002      	beq.n	8002768 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	f000 be2e 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b75      	ldr	r3, [pc, #468]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	21f8      	movs	r1, #248	@ 0xf8
 800277e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002786:	fa91 f1a1 	rbit	r1, r1
 800278a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800278e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002792:	fab1 f181 	clz	r1, r1
 8002796:	b2c9      	uxtb	r1, r1
 8002798:	408b      	lsls	r3, r1
 800279a:	4969      	ldr	r1, [pc, #420]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a0:	e0fd      	b.n	800299e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8088 	beq.w	80028c4 <HAL_RCC_OscConfig+0x56c>
 80027b4:	2301      	movs	r3, #1
 80027b6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80027c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	461a      	mov	r2, r3
 80027dc:	2301      	movs	r3, #1
 80027de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff fa40 	bl	8001c64 <HAL_GetTick>
 80027e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ea:	f7ff fa3b 	bl	8001c64 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d902      	bls.n	8002800 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	f000 bde2 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>
 8002800:	2302      	movs	r3, #2
 8002802:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002812:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d102      	bne.n	8002830 <HAL_RCC_OscConfig+0x4d8>
 800282a:	4b45      	ldr	r3, [pc, #276]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	e013      	b.n	8002858 <HAL_RCC_OscConfig+0x500>
 8002830:	2302      	movs	r3, #2
 8002832:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002842:	2302      	movs	r3, #2
 8002844:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002848:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002854:	4b3a      	ldr	r3, [pc, #232]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	2202      	movs	r2, #2
 800285a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800285e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800286a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800286e:	fab2 f282 	clz	r2, r2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f042 0220 	orr.w	r2, r2, #32
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f002 021f 	and.w	r2, r2, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f202 	lsl.w	r2, r1, r2
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0af      	beq.n	80027ea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288a:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	21f8      	movs	r1, #248	@ 0xf8
 80028a0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80028a8:	fa91 f1a1 	rbit	r1, r1
 80028ac:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80028b0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80028b4:	fab1 f181 	clz	r1, r1
 80028b8:	b2c9      	uxtb	r1, r1
 80028ba:	408b      	lsls	r3, r1
 80028bc:	4920      	ldr	r1, [pc, #128]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
 80028c2:	e06c      	b.n	800299e <HAL_RCC_OscConfig+0x646>
 80028c4:	2301      	movs	r3, #1
 80028c6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80028d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	461a      	mov	r2, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff f9b8 	bl	8001c64 <HAL_GetTick>
 80028f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fa:	f7ff f9b3 	bl	8001c64 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	f000 bd5a 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>
 8002910:	2302      	movs	r3, #2
 8002912:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002922:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d104      	bne.n	8002944 <HAL_RCC_OscConfig+0x5ec>
 800293a:	4b01      	ldr	r3, [pc, #4]	@ (8002940 <HAL_RCC_OscConfig+0x5e8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e015      	b.n	800296c <HAL_RCC_OscConfig+0x614>
 8002940:	40021000 	.word	0x40021000
 8002944:	2302      	movs	r3, #2
 8002946:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800295c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002968:	4bc8      	ldr	r3, [pc, #800]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	2202      	movs	r2, #2
 800296e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002972:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800297e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002982:	fab2 f282 	clz	r2, r2
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f042 0220 	orr.w	r2, r2, #32
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ad      	bne.n	80028fa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8110 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d079      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x760>
 80029c4:	2301      	movs	r3, #1
 80029c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80029d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	4bab      	ldr	r3, [pc, #684]	@ (8002c90 <HAL_RCC_OscConfig+0x938>)
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	461a      	mov	r2, r3
 80029ea:	2301      	movs	r3, #1
 80029ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7ff f939 	bl	8001c64 <HAL_GetTick>
 80029f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff f934 	bl	8001c64 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d902      	bls.n	8002a0e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	f000 bcdb 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a28:	2202      	movs	r2, #2
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a68:	4b88      	ldr	r3, [pc, #544]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 8002a6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a74:	2102      	movs	r1, #2
 8002a76:	6019      	str	r1, [r3, #0]
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	fa93 f1a3 	rbit	r1, r3
 8002a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a8e:	6019      	str	r1, [r3, #0]
  return result;
 8002a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a94:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0a0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x6a0>
 8002ab6:	e08d      	b.n	8002bd4 <HAL_RCC_OscConfig+0x87c>
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	fa93 f2a3 	rbit	r2, r3
 8002ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ada:	601a      	str	r2, [r3, #0]
  return result;
 8002adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ae4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b68      	ldr	r3, [pc, #416]	@ (8002c90 <HAL_RCC_OscConfig+0x938>)
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	461a      	mov	r2, r3
 8002af6:	2300      	movs	r3, #0
 8002af8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7ff f8b3 	bl	8001c64 <HAL_GetTick>
 8002afe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b04:	f7ff f8ae 	bl	8001c64 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d902      	bls.n	8002b1a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	f000 bc55 	b.w	80033c4 <HAL_RCC_OscConfig+0x106c>
 8002b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b22:	2202      	movs	r2, #2
 8002b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	fa93 f2a3 	rbit	r2, r3
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b46:	2202      	movs	r2, #2
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	fa93 f2a3 	rbit	r2, r3
 8002b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b66:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002b84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b86:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 8002b88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b92:	2102      	movs	r1, #2
 8002b94:	6019      	str	r1, [r3, #0]
 8002b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	fa93 f1a3 	rbit	r1, r3
 8002ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bac:	6019      	str	r1, [r3, #0]
  return result;
 8002bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d197      	bne.n	8002b04 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 81a1 	beq.w	8002f2c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf0:	4b26      	ldr	r3, [pc, #152]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d116      	bne.n	8002c2a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfc:	4b23      	ldr	r3, [pc, #140]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	4a22      	ldr	r2, [pc, #136]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	61d3      	str	r3, [r2, #28]
 8002c08:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002c22:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <HAL_RCC_OscConfig+0x93c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11a      	bne.n	8002c6c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <HAL_RCC_OscConfig+0x93c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a16      	ldr	r2, [pc, #88]	@ (8002c94 <HAL_RCC_OscConfig+0x93c>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c42:	f7ff f80f 	bl	8001c64 <HAL_GetTick>
 8002c46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	e009      	b.n	8002c60 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4c:	f7ff f80a 	bl	8001c64 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b64      	cmp	r3, #100	@ 0x64
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e3b1      	b.n	80033c4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_RCC_OscConfig+0x93c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ef      	beq.n	8002c4c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10d      	bne.n	8002c98 <HAL_RCC_OscConfig+0x940>
 8002c7c:	4b03      	ldr	r3, [pc, #12]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4a02      	ldr	r2, [pc, #8]	@ (8002c8c <HAL_RCC_OscConfig+0x934>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	e03c      	b.n	8002d04 <HAL_RCC_OscConfig+0x9ac>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	10908120 	.word	0x10908120
 8002c94:	40007000 	.word	0x40007000
 8002c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x96a>
 8002ca8:	4bc1      	ldr	r3, [pc, #772]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4ac0      	ldr	r2, [pc, #768]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	4bbe      	ldr	r3, [pc, #760]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4abd      	ldr	r2, [pc, #756]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cba:	f023 0304 	bic.w	r3, r3, #4
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	e020      	b.n	8002d04 <HAL_RCC_OscConfig+0x9ac>
 8002cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x994>
 8002cd2:	4bb7      	ldr	r3, [pc, #732]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4ab6      	ldr	r2, [pc, #728]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6213      	str	r3, [r2, #32]
 8002cde:	4bb4      	ldr	r3, [pc, #720]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4ab3      	ldr	r2, [pc, #716]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6213      	str	r3, [r2, #32]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0x9ac>
 8002cec:	4bb0      	ldr	r3, [pc, #704]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4aaf      	ldr	r2, [pc, #700]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	6213      	str	r3, [r2, #32]
 8002cf8:	4bad      	ldr	r3, [pc, #692]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4aac      	ldr	r2, [pc, #688]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002cfe:	f023 0304 	bic.w	r3, r3, #4
 8002d02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8081 	beq.w	8002e18 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7fe ffa5 	bl	8001c64 <HAL_GetTick>
 8002d1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fe ffa0 	bl	8001c64 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e345      	b.n	80033c4 <HAL_RCC_OscConfig+0x106c>
 8002d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d40:	2202      	movs	r2, #2
 8002d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d64:	2202      	movs	r2, #2
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	fa93 f2a3 	rbit	r2, r3
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d7e:	601a      	str	r2, [r3, #0]
  return result;
 8002d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d84:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002d88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0xa4c>
 8002d9e:	4b84      	ldr	r3, [pc, #528]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	e013      	b.n	8002dcc <HAL_RCC_OscConfig+0xa74>
 8002da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002dac:	2202      	movs	r2, #2
 8002dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fa93 f2a3 	rbit	r2, r3
 8002dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	4b79      	ldr	r3, [pc, #484]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dd0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	6011      	str	r1, [r2, #0]
 8002dd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ddc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	fa92 f1a2 	rbit	r1, r2
 8002de6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dea:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002dee:	6011      	str	r1, [r2, #0]
  return result;
 8002df0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	fab2 f282 	clz	r2, r2
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f002 021f 	and.w	r2, r2, #31
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d084      	beq.n	8002d20 <HAL_RCC_OscConfig+0x9c8>
 8002e16:	e07f      	b.n	8002f18 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e18:	f7fe ff24 	bl	8001c64 <HAL_GetTick>
 8002e1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	e00b      	b.n	8002e3a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe ff1f 	bl	8001c64 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e2c4      	b.n	80033c4 <HAL_RCC_OscConfig+0x106c>
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002e42:	2202      	movs	r2, #2
 8002e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f2a3 	rbit	r2, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e66:	2202      	movs	r2, #2
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e80:	601a      	str	r2, [r3, #0]
  return result;
 8002e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e86:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002e8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_RCC_OscConfig+0xb4e>
 8002ea0:	4b43      	ldr	r3, [pc, #268]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	e013      	b.n	8002ece <HAL_RCC_OscConfig+0xb76>
 8002ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eaa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002eae:	2202      	movs	r2, #2
 8002eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	fa93 f2a3 	rbit	r2, r3
 8002ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ed2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	6011      	str	r1, [r2, #0]
 8002eda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ede:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	fa92 f1a2 	rbit	r1, r2
 8002ee8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eec:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ef0:	6011      	str	r1, [r2, #0]
  return result;
 8002ef2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ef6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	fab2 f282 	clz	r2, r2
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	f002 021f 	and.w	r2, r2, #31
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d184      	bne.n	8002e22 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f18:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f20:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8242 	beq.w	80033c2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <HAL_RCC_OscConfig+0xc58>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	f000 8213 	beq.w	8003372 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	f040 8162 	bne.w	8003222 <HAL_RCC_OscConfig+0xeca>
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002f66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f82:	601a      	str	r2, [r3, #0]
  return result;
 8002f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f88:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002f8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fe5e 	bl	8001c64 <HAL_GetTick>
 8002fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fac:	e00c      	b.n	8002fc8 <HAL_RCC_OscConfig+0xc70>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fe56 	bl	8001c64 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1fd      	b.n	80033c4 <HAL_RCC_OscConfig+0x106c>
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002fd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002fec:	601a      	str	r2, [r3, #0]
  return result;
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ff6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d102      	bne.n	8003012 <HAL_RCC_OscConfig+0xcba>
 800300c:	4bb0      	ldr	r3, [pc, #704]	@ (80032d0 <HAL_RCC_OscConfig+0xf78>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	e027      	b.n	8003062 <HAL_RCC_OscConfig+0xd0a>
 8003012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003016:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800301a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800301e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003024:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	fa93 f2a3 	rbit	r2, r3
 800302e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003032:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003040:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	fa93 f2a3 	rbit	r2, r3
 8003054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003058:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	4b9c      	ldr	r3, [pc, #624]	@ (80032d0 <HAL_RCC_OscConfig+0xf78>)
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003066:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800306a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800306e:	6011      	str	r1, [r2, #0]
 8003070:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003074:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	fa92 f1a2 	rbit	r1, r2
 800307e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003082:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003086:	6011      	str	r1, [r2, #0]
  return result;
 8003088:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800308c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d182      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	4b88      	ldr	r3, [pc, #544]	@ (80032d0 <HAL_RCC_OscConfig+0xf78>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80030c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	430b      	orrs	r3, r1
 80030d0:	497f      	ldr	r1, [pc, #508]	@ (80032d0 <HAL_RCC_OscConfig+0xf78>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80030de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80030fa:	601a      	str	r2, [r3, #0]
  return result;
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003104:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003110:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	461a      	mov	r2, r3
 8003118:	2301      	movs	r3, #1
 800311a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe fda2 	bl	8001c64 <HAL_GetTick>
 8003120:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003124:	e009      	b.n	800313a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe fd9d 	bl	8001c64 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e144      	b.n	80033c4 <HAL_RCC_OscConfig+0x106c>
 800313a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003142:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	fa93 f2a3 	rbit	r2, r3
 8003156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800315e:	601a      	str	r2, [r3, #0]
  return result;
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003168:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_OscConfig+0xe2c>
 800317e:	4b54      	ldr	r3, [pc, #336]	@ (80032d0 <HAL_RCC_OscConfig+0xf78>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	e027      	b.n	80031d4 <HAL_RCC_OscConfig+0xe7c>
 8003184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003188:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800318c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003196:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <HAL_RCC_OscConfig+0xf78>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031d8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80031dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	fa92 f1a2 	rbit	r1, r2
 80031f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80031f8:	6011      	str	r1, [r2, #0]
  return result;
 80031fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031fe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	fab2 f282 	clz	r2, r2
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	f042 0220 	orr.w	r2, r2, #32
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	f002 021f 	and.w	r2, r2, #31
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d082      	beq.n	8003126 <HAL_RCC_OscConfig+0xdce>
 8003220:	e0cf      	b.n	80033c2 <HAL_RCC_OscConfig+0x106a>
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800322a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800322e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003234:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	fa93 f2a3 	rbit	r2, r3
 800323e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003242:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003246:	601a      	str	r2, [r3, #0]
  return result;
 8003248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003250:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800325c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	461a      	mov	r2, r3
 8003264:	2300      	movs	r3, #0
 8003266:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fcfc 	bl	8001c64 <HAL_GetTick>
 800326c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003270:	e009      	b.n	8003286 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe fcf7 	bl	8001c64 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e09e      	b.n	80033c4 <HAL_RCC_OscConfig+0x106c>
 8003286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800328e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003298:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	fa93 f2a3 	rbit	r2, r3
 80032a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032aa:	601a      	str	r2, [r3, #0]
  return result;
 80032ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80032b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d104      	bne.n	80032d4 <HAL_RCC_OscConfig+0xf7c>
 80032ca:	4b01      	ldr	r3, [pc, #4]	@ (80032d0 <HAL_RCC_OscConfig+0xf78>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	e029      	b.n	8003324 <HAL_RCC_OscConfig+0xfcc>
 80032d0:	40021000 	.word	0x40021000
 80032d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003302:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	4b2b      	ldr	r3, [pc, #172]	@ (80033d0 <HAL_RCC_OscConfig+0x1078>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003328:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800332c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003330:	6011      	str	r1, [r2, #0]
 8003332:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003336:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	fa92 f1a2 	rbit	r1, r2
 8003340:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003344:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003348:	6011      	str	r1, [r2, #0]
  return result;
 800334a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800334e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	fab2 f282 	clz	r2, r2
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f042 0220 	orr.w	r2, r2, #32
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	f002 021f 	and.w	r2, r2, #31
 8003364:	2101      	movs	r1, #1
 8003366:	fa01 f202 	lsl.w	r2, r1, r2
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d180      	bne.n	8003272 <HAL_RCC_OscConfig+0xf1a>
 8003370:	e027      	b.n	80033c2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e01e      	b.n	80033c4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003386:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <HAL_RCC_OscConfig+0x1078>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800338e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003392:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d10b      	bne.n	80033be <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80033aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b09e      	sub	sp, #120	@ 0x78
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e162      	b.n	80036b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b90      	ldr	r3, [pc, #576]	@ (8003630 <HAL_RCC_ClockConfig+0x25c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d910      	bls.n	800341c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003630 <HAL_RCC_ClockConfig+0x25c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	498b      	ldr	r1, [pc, #556]	@ (8003630 <HAL_RCC_ClockConfig+0x25c>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b89      	ldr	r3, [pc, #548]	@ (8003630 <HAL_RCC_ClockConfig+0x25c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e14a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	497f      	ldr	r1, [pc, #508]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80dc 	beq.w	8003600 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d13c      	bne.n	80034ca <HAL_RCC_ClockConfig+0xf6>
 8003450:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003454:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800345e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <HAL_RCC_ClockConfig+0xa6>
 8003474:	4b6f      	ldr	r3, [pc, #444]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	e00f      	b.n	800349a <HAL_RCC_ClockConfig+0xc6>
 800347a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800347e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	667b      	str	r3, [r7, #100]	@ 0x64
 8003488:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800348c:	663b      	str	r3, [r7, #96]	@ 0x60
 800348e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003496:	4b67      	ldr	r3, [pc, #412]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800349e:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034a2:	fa92 f2a2 	rbit	r2, r2
 80034a6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80034a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034aa:	fab2 f282 	clz	r2, r2
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	f042 0220 	orr.w	r2, r2, #32
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	f002 021f 	and.w	r2, r2, #31
 80034ba:	2101      	movs	r1, #1
 80034bc:	fa01 f202 	lsl.w	r2, r1, r2
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d17b      	bne.n	80035be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0f3      	b.n	80036b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d13c      	bne.n	800354c <HAL_RCC_ClockConfig+0x178>
 80034d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034d6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d102      	bne.n	80034fc <HAL_RCC_ClockConfig+0x128>
 80034f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	e00f      	b.n	800351c <HAL_RCC_ClockConfig+0x148>
 80034fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003500:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	647b      	str	r3, [r7, #68]	@ 0x44
 800350a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800350e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003518:	4b46      	ldr	r3, [pc, #280]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003520:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003522:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003524:	fa92 f2a2 	rbit	r2, r2
 8003528:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800352a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800352c:	fab2 f282 	clz	r2, r2
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	f042 0220 	orr.w	r2, r2, #32
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	f002 021f 	and.w	r2, r2, #31
 800353c:	2101      	movs	r1, #1
 800353e:	fa01 f202 	lsl.w	r2, r1, r2
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d13a      	bne.n	80035be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b2      	b.n	80036b2 <HAL_RCC_ClockConfig+0x2de>
 800354c:	2302      	movs	r3, #2
 800354e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d102      	bne.n	8003574 <HAL_RCC_ClockConfig+0x1a0>
 800356e:	4b31      	ldr	r3, [pc, #196]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	e00d      	b.n	8003590 <HAL_RCC_ClockConfig+0x1bc>
 8003574:	2302      	movs	r3, #2
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003580:	2302      	movs	r3, #2
 8003582:	623b      	str	r3, [r7, #32]
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	4b29      	ldr	r3, [pc, #164]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	2202      	movs	r2, #2
 8003592:	61ba      	str	r2, [r7, #24]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	fa92 f2a2 	rbit	r2, r2
 800359a:	617a      	str	r2, [r7, #20]
  return result;
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	fab2 f282 	clz	r2, r2
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	f042 0220 	orr.w	r2, r2, #32
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f002 021f 	and.w	r2, r2, #31
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e079      	b.n	80036b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	491a      	ldr	r1, [pc, #104]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fe fb48 	bl	8001c64 <HAL_GetTick>
 80035d4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fe fb44 	bl	8001c64 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e061      	b.n	80036b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCC_ClockConfig+0x25c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d214      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <HAL_RCC_ClockConfig+0x25c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 0207 	bic.w	r2, r3, #7
 8003616:	4906      	ldr	r1, [pc, #24]	@ (8003630 <HAL_RCC_ClockConfig+0x25c>)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_RCC_ClockConfig+0x25c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e040      	b.n	80036b2 <HAL_RCC_ClockConfig+0x2de>
 8003630:	40022000 	.word	0x40022000
 8003634:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003644:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <HAL_RCC_ClockConfig+0x2e8>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	491a      	ldr	r1, [pc, #104]	@ (80036bc <HAL_RCC_ClockConfig+0x2e8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003662:	4b16      	ldr	r3, [pc, #88]	@ (80036bc <HAL_RCC_ClockConfig+0x2e8>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4912      	ldr	r1, [pc, #72]	@ (80036bc <HAL_RCC_ClockConfig+0x2e8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003676:	f000 f829 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800367a:	4601      	mov	r1, r0
 800367c:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <HAL_RCC_ClockConfig+0x2e8>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003684:	22f0      	movs	r2, #240	@ 0xf0
 8003686:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	fa92 f2a2 	rbit	r2, r2
 800368e:	60fa      	str	r2, [r7, #12]
  return result;
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	fab2 f282 	clz	r2, r2
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	40d3      	lsrs	r3, r2
 800369a:	4a09      	ldr	r2, [pc, #36]	@ (80036c0 <HAL_RCC_ClockConfig+0x2ec>)
 800369c:	5cd3      	ldrb	r3, [r2, r3]
 800369e:	fa21 f303 	lsr.w	r3, r1, r3
 80036a2:	4a08      	ldr	r2, [pc, #32]	@ (80036c4 <HAL_RCC_ClockConfig+0x2f0>)
 80036a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036a6:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <HAL_RCC_ClockConfig+0x2f4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fa96 	bl	8001bdc <HAL_InitTick>
  
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3778      	adds	r7, #120	@ 0x78
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08008afc 	.word	0x08008afc
 80036c4:	2000000c 	.word	0x2000000c
 80036c8:	20000010 	.word	0x20000010

080036cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b08b      	sub	sp, #44	@ 0x2c
 80036d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036e6:	4b29      	ldr	r3, [pc, #164]	@ (800378c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x30>
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x36>
 80036fa:	e03c      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036fc:	4b24      	ldr	r3, [pc, #144]	@ (8003790 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036fe:	623b      	str	r3, [r7, #32]
      break;
 8003700:	e03c      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003708:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 800370c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	fa92 f2a2 	rbit	r2, r2
 8003714:	607a      	str	r2, [r7, #4]
  return result;
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	40d3      	lsrs	r3, r2
 8003720:	4a1c      	ldr	r2, [pc, #112]	@ (8003794 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003722:	5cd3      	ldrb	r3, [r2, r3]
 8003724:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003726:	4b19      	ldr	r3, [pc, #100]	@ (800378c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	220f      	movs	r2, #15
 8003730:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	fa92 f2a2 	rbit	r2, r2
 8003738:	60fa      	str	r2, [r7, #12]
  return result;
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	fab2 f282 	clz	r2, r2
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	40d3      	lsrs	r3, r2
 8003744:	4a14      	ldr	r2, [pc, #80]	@ (8003798 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003754:	4a0e      	ldr	r2, [pc, #56]	@ (8003790 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
 8003764:	e004      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4a0c      	ldr	r2, [pc, #48]	@ (800379c <HAL_RCC_GetSysClockFreq+0xd0>)
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	623b      	str	r3, [r7, #32]
      break;
 8003774:	e002      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003778:	623b      	str	r3, [r7, #32]
      break;
 800377a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377c:	6a3b      	ldr	r3, [r7, #32]
}
 800377e:	4618      	mov	r0, r3
 8003780:	372c      	adds	r7, #44	@ 0x2c
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	007a1200 	.word	0x007a1200
 8003794:	08008b14 	.word	0x08008b14
 8003798:	08008b24 	.word	0x08008b24
 800379c:	003d0900 	.word	0x003d0900

080037a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	2000000c 	.word	0x2000000c

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037be:	f7ff ffef 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037c2:	4601      	mov	r1, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037cc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80037d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	fa92 f2a2 	rbit	r2, r2
 80037d8:	603a      	str	r2, [r7, #0]
  return result;
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	40d3      	lsrs	r3, r2
 80037e4:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08008b0c 	.word	0x08008b0c

080037fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003802:	f7ff ffcd 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 8003806:	4601      	mov	r1, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003810:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003814:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	fa92 f2a2 	rbit	r2, r2
 800381c:	603a      	str	r2, [r7, #0]
  return result;
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	fab2 f282 	clz	r2, r2
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	40d3      	lsrs	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	@ (800383c <HAL_RCC_GetPCLK2Freq+0x40>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	08008b0c 	.word	0x08008b0c

08003840 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b092      	sub	sp, #72	@ 0x48
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80d4 	beq.w	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003864:	4b4e      	ldr	r3, [pc, #312]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10e      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4b4b      	ldr	r3, [pc, #300]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4a4a      	ldr	r2, [pc, #296]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387a:	61d3      	str	r3, [r2, #28]
 800387c:	4b48      	ldr	r3, [pc, #288]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388e:	4b45      	ldr	r3, [pc, #276]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d118      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389a:	4b42      	ldr	r3, [pc, #264]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a41      	ldr	r2, [pc, #260]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a6:	f7fe f9dd 	bl	8001c64 <HAL_GetTick>
 80038aa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	e008      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ae:	f7fe f9d9 	bl	8001c64 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b64      	cmp	r3, #100	@ 0x64
 80038ba:	d901      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e169      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b38      	ldr	r3, [pc, #224]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038cc:	4b34      	ldr	r3, [pc, #208]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8084 	beq.w	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d07c      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ec:	4b2c      	ldr	r3, [pc, #176]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	4b26      	ldr	r3, [pc, #152]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	461a      	mov	r2, r3
 8003916:	2301      	movs	r3, #1
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800391e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	461a      	mov	r2, r3
 800393a:	2300      	movs	r3, #0
 800393c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800393e:	4a18      	ldr	r2, [pc, #96]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003942:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04b      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fe f989 	bl	8001c64 <HAL_GetTick>
 8003952:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7fe f985 	bl	8001c64 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e113      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800396c:	2302      	movs	r3, #2
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
 8003978:	2302      	movs	r3, #2
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	61fb      	str	r3, [r7, #28]
  return result;
 8003984:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f043 0302 	orr.w	r3, r3, #2
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d108      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800399a:	4b01      	ldr	r3, [pc, #4]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	e00d      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40007000 	.word	0x40007000
 80039a8:	10908100 	.word	0x10908100
 80039ac:	2302      	movs	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	4b78      	ldr	r3, [pc, #480]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	2202      	movs	r2, #2
 80039be:	613a      	str	r2, [r7, #16]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	60fa      	str	r2, [r7, #12]
  return result;
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	fab2 f282 	clz	r2, r2
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	f002 021f 	and.w	r2, r2, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f202 	lsl.w	r2, r1, r2
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0b7      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039e6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	496a      	ldr	r1, [pc, #424]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a00:	4b66      	ldr	r3, [pc, #408]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	4a65      	ldr	r2, [pc, #404]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a18:	4b60      	ldr	r3, [pc, #384]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	f023 0203 	bic.w	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	495d      	ldr	r1, [pc, #372]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a36:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	4956      	ldr	r1, [pc, #344]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a54:	4b51      	ldr	r3, [pc, #324]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	494e      	ldr	r1, [pc, #312]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a72:	4b4a      	ldr	r3, [pc, #296]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4947      	ldr	r1, [pc, #284]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a90:	4b42      	ldr	r3, [pc, #264]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	493f      	ldr	r1, [pc, #252]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aae:	4b3b      	ldr	r3, [pc, #236]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f023 0220 	bic.w	r2, r3, #32
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4938      	ldr	r1, [pc, #224]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003acc:	4b33      	ldr	r3, [pc, #204]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	4930      	ldr	r1, [pc, #192]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aea:	4b2c      	ldr	r3, [pc, #176]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	4929      	ldr	r1, [pc, #164]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b08:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	4921      	ldr	r1, [pc, #132]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b26:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	491a      	ldr	r1, [pc, #104]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b44:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	4912      	ldr	r1, [pc, #72]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	490b      	ldr	r1, [pc, #44]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	4903      	ldr	r1, [pc, #12]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3748      	adds	r7, #72	@ 0x48
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e049      	b.n	8003c46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd fd8a 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f000 fb74 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e049      	b.n	8003cf4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f841 	bl	8003cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f000 fb1d 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x24>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e03c      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d109      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x3e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	e02f      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d109      	bne.n	8003d68 <HAL_TIM_PWM_Start+0x58>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e022      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d109      	bne.n	8003d82 <HAL_TIM_PWM_Start+0x72>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e015      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d109      	bne.n	8003d9c <HAL_TIM_PWM_Start+0x8c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e008      	b.n	8003dae <HAL_TIM_PWM_Start+0x9e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e097      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0xb6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dc4:	e023      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0xc6>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd4:	e01b      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_PWM_Start+0xd6>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de4:	e013      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_PWM_Start+0xe6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003df4:	e00b      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_PWM_Start+0xf6>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e04:	e003      	b.n	8003e0e <HAL_TIM_PWM_Start+0xfe>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fe58 	bl	8004acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a33      	ldr	r2, [pc, #204]	@ (8003ef0 <HAL_TIM_PWM_Start+0x1e0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_TIM_PWM_Start+0x13e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a32      	ldr	r2, [pc, #200]	@ (8003ef4 <HAL_TIM_PWM_Start+0x1e4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_TIM_PWM_Start+0x13e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a30      	ldr	r2, [pc, #192]	@ (8003ef8 <HAL_TIM_PWM_Start+0x1e8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_TIM_PWM_Start+0x13e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003efc <HAL_TIM_PWM_Start+0x1ec>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_TIM_PWM_Start+0x13e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2d      	ldr	r2, [pc, #180]	@ (8003f00 <HAL_TIM_PWM_Start+0x1f0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x142>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_TIM_PWM_Start+0x144>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a20      	ldr	r2, [pc, #128]	@ (8003ef0 <HAL_TIM_PWM_Start+0x1e0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x194>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7a:	d013      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x194>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a20      	ldr	r2, [pc, #128]	@ (8003f04 <HAL_TIM_PWM_Start+0x1f4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x194>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f08 <HAL_TIM_PWM_Start+0x1f8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x194>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <HAL_TIM_PWM_Start+0x1e4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIM_PWM_Start+0x194>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_TIM_PWM_Start+0x1e8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d115      	bne.n	8003ed0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <HAL_TIM_PWM_Start+0x1fc>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d015      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x1d2>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ebc:	d011      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ece:	e008      	b.n	8003ee2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e000      	b.n	8003ee4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40013400 	.word	0x40013400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	00010007 	.word	0x00010007

08003f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e0ff      	b.n	800412e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b14      	cmp	r3, #20
 8003f3a:	f200 80f0 	bhi.w	800411e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f99 	.word	0x08003f99
 8003f48:	0800411f 	.word	0x0800411f
 8003f4c:	0800411f 	.word	0x0800411f
 8003f50:	0800411f 	.word	0x0800411f
 8003f54:	08003fd9 	.word	0x08003fd9
 8003f58:	0800411f 	.word	0x0800411f
 8003f5c:	0800411f 	.word	0x0800411f
 8003f60:	0800411f 	.word	0x0800411f
 8003f64:	0800401b 	.word	0x0800401b
 8003f68:	0800411f 	.word	0x0800411f
 8003f6c:	0800411f 	.word	0x0800411f
 8003f70:	0800411f 	.word	0x0800411f
 8003f74:	0800405b 	.word	0x0800405b
 8003f78:	0800411f 	.word	0x0800411f
 8003f7c:	0800411f 	.word	0x0800411f
 8003f80:	0800411f 	.word	0x0800411f
 8003f84:	0800409d 	.word	0x0800409d
 8003f88:	0800411f 	.word	0x0800411f
 8003f8c:	0800411f 	.word	0x0800411f
 8003f90:	0800411f 	.word	0x0800411f
 8003f94:	080040dd 	.word	0x080040dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fa24 	bl	80043ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0204 	bic.w	r2, r2, #4
 8003fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	619a      	str	r2, [r3, #24]
      break;
 8003fd6:	e0a5      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fa94 	bl	800450c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6999      	ldr	r1, [r3, #24]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	619a      	str	r2, [r3, #24]
      break;
 8004018:	e084      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fafd 	bl	8004620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0208 	orr.w	r2, r2, #8
 8004034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0204 	bic.w	r2, r2, #4
 8004044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69d9      	ldr	r1, [r3, #28]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	61da      	str	r2, [r3, #28]
      break;
 8004058:	e064      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fb65 	bl	8004730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	61da      	str	r2, [r3, #28]
      break;
 800409a:	e043      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fbae 	bl	8004804 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80040da:	e023      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fbf2 	bl	80048cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004106:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	021a      	lsls	r2, r3, #8
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800411c:	e002      	b.n	8004124 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
      break;
 8004122:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop

08004138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_TIM_ConfigClockSource+0x1c>
 8004150:	2302      	movs	r3, #2
 8004152:	e0b6      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004172:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800417e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004190:	d03e      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0xd8>
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004196:	f200 8087 	bhi.w	80042a8 <HAL_TIM_ConfigClockSource+0x170>
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419e:	f000 8086 	beq.w	80042ae <HAL_TIM_ConfigClockSource+0x176>
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a6:	d87f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x170>
 80041a8:	2b70      	cmp	r3, #112	@ 0x70
 80041aa:	d01a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0xaa>
 80041ac:	2b70      	cmp	r3, #112	@ 0x70
 80041ae:	d87b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x170>
 80041b0:	2b60      	cmp	r3, #96	@ 0x60
 80041b2:	d050      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x11e>
 80041b4:	2b60      	cmp	r3, #96	@ 0x60
 80041b6:	d877      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x170>
 80041b8:	2b50      	cmp	r3, #80	@ 0x50
 80041ba:	d03c      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xfe>
 80041bc:	2b50      	cmp	r3, #80	@ 0x50
 80041be:	d873      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x170>
 80041c0:	2b40      	cmp	r3, #64	@ 0x40
 80041c2:	d058      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x13e>
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d86f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x170>
 80041c8:	2b30      	cmp	r3, #48	@ 0x30
 80041ca:	d064      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15e>
 80041cc:	2b30      	cmp	r3, #48	@ 0x30
 80041ce:	d86b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x170>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d060      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15e>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d867      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x170>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05c      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15e>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d05a      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15e>
 80041e0:	e062      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	f000 fc4b 	bl	8004a8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	609a      	str	r2, [r3, #8]
      break;
 800420e:	e04f      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004220:	f000 fc34 	bl	8004a8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e03c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004242:	461a      	mov	r2, r3
 8004244:	f000 fba8 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2150      	movs	r1, #80	@ 0x50
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fc01 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 8004254:	e02c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004262:	461a      	mov	r2, r3
 8004264:	f000 fbc7 	bl	80049f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2160      	movs	r1, #96	@ 0x60
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fbf1 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 8004274:	e01c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	461a      	mov	r2, r3
 8004284:	f000 fb88 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2140      	movs	r1, #64	@ 0x40
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fbe1 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 8004294:	e00c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f000 fbd8 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 80042a6:	e003      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3c      	ldr	r2, [pc, #240]	@ (80043d0 <TIM_Base_SetConfig+0x104>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00f      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a39      	ldr	r2, [pc, #228]	@ (80043d4 <TIM_Base_SetConfig+0x108>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a38      	ldr	r2, [pc, #224]	@ (80043d8 <TIM_Base_SetConfig+0x10c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a37      	ldr	r2, [pc, #220]	@ (80043dc <TIM_Base_SetConfig+0x110>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2d      	ldr	r2, [pc, #180]	@ (80043d0 <TIM_Base_SetConfig+0x104>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01b      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004324:	d017      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2a      	ldr	r2, [pc, #168]	@ (80043d4 <TIM_Base_SetConfig+0x108>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a29      	ldr	r2, [pc, #164]	@ (80043d8 <TIM_Base_SetConfig+0x10c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00f      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a28      	ldr	r2, [pc, #160]	@ (80043dc <TIM_Base_SetConfig+0x110>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <TIM_Base_SetConfig+0x114>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a26      	ldr	r2, [pc, #152]	@ (80043e4 <TIM_Base_SetConfig+0x118>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_Base_SetConfig+0x8a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a25      	ldr	r2, [pc, #148]	@ (80043e8 <TIM_Base_SetConfig+0x11c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800435c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a10      	ldr	r2, [pc, #64]	@ (80043d0 <TIM_Base_SetConfig+0x104>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0xe8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a11      	ldr	r2, [pc, #68]	@ (80043dc <TIM_Base_SetConfig+0x110>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0xe8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a10      	ldr	r2, [pc, #64]	@ (80043e0 <TIM_Base_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0xe8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a0f      	ldr	r2, [pc, #60]	@ (80043e4 <TIM_Base_SetConfig+0x118>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0xe8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0e      	ldr	r2, [pc, #56]	@ (80043e8 <TIM_Base_SetConfig+0x11c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d103      	bne.n	80043bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	615a      	str	r2, [r3, #20]
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40013400 	.word	0x40013400
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40014400 	.word	0x40014400
 80043e8:	40014800 	.word	0x40014800

080043ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f023 0201 	bic.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0302 	bic.w	r3, r3, #2
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a2c      	ldr	r2, [pc, #176]	@ (80044f8 <TIM_OC1_SetConfig+0x10c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00f      	beq.n	800446c <TIM_OC1_SetConfig+0x80>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a2b      	ldr	r2, [pc, #172]	@ (80044fc <TIM_OC1_SetConfig+0x110>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00b      	beq.n	800446c <TIM_OC1_SetConfig+0x80>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a2a      	ldr	r2, [pc, #168]	@ (8004500 <TIM_OC1_SetConfig+0x114>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_OC1_SetConfig+0x80>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a29      	ldr	r2, [pc, #164]	@ (8004504 <TIM_OC1_SetConfig+0x118>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_OC1_SetConfig+0x80>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a28      	ldr	r2, [pc, #160]	@ (8004508 <TIM_OC1_SetConfig+0x11c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d10c      	bne.n	8004486 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0308 	bic.w	r3, r3, #8
 8004472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 0304 	bic.w	r3, r3, #4
 8004484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1b      	ldr	r2, [pc, #108]	@ (80044f8 <TIM_OC1_SetConfig+0x10c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00f      	beq.n	80044ae <TIM_OC1_SetConfig+0xc2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1a      	ldr	r2, [pc, #104]	@ (80044fc <TIM_OC1_SetConfig+0x110>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00b      	beq.n	80044ae <TIM_OC1_SetConfig+0xc2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <TIM_OC1_SetConfig+0x114>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d007      	beq.n	80044ae <TIM_OC1_SetConfig+0xc2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a18      	ldr	r2, [pc, #96]	@ (8004504 <TIM_OC1_SetConfig+0x118>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_OC1_SetConfig+0xc2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a17      	ldr	r2, [pc, #92]	@ (8004508 <TIM_OC1_SetConfig+0x11c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d111      	bne.n	80044d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40013400 	.word	0x40013400
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800

0800450c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0210 	bic.w	r2, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0320 	bic.w	r3, r3, #32
 800455a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a28      	ldr	r2, [pc, #160]	@ (800460c <TIM_OC2_SetConfig+0x100>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_OC2_SetConfig+0x6c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a27      	ldr	r2, [pc, #156]	@ (8004610 <TIM_OC2_SetConfig+0x104>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10d      	bne.n	8004594 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800457e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004592:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a1d      	ldr	r2, [pc, #116]	@ (800460c <TIM_OC2_SetConfig+0x100>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00f      	beq.n	80045bc <TIM_OC2_SetConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a1c      	ldr	r2, [pc, #112]	@ (8004610 <TIM_OC2_SetConfig+0x104>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00b      	beq.n	80045bc <TIM_OC2_SetConfig+0xb0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <TIM_OC2_SetConfig+0x108>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <TIM_OC2_SetConfig+0xb0>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004618 <TIM_OC2_SetConfig+0x10c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC2_SetConfig+0xb0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a19      	ldr	r2, [pc, #100]	@ (800461c <TIM_OC2_SetConfig+0x110>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d113      	bne.n	80045e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045c2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045ca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40013400 	.word	0x40013400
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800466c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a27      	ldr	r2, [pc, #156]	@ (800471c <TIM_OC3_SetConfig+0xfc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_OC3_SetConfig+0x6a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a26      	ldr	r2, [pc, #152]	@ (8004720 <TIM_OC3_SetConfig+0x100>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d10d      	bne.n	80046a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046a4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1c      	ldr	r2, [pc, #112]	@ (800471c <TIM_OC3_SetConfig+0xfc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <TIM_OC3_SetConfig+0xae>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004720 <TIM_OC3_SetConfig+0x100>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_OC3_SetConfig+0xae>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004724 <TIM_OC3_SetConfig+0x104>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_OC3_SetConfig+0xae>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a19      	ldr	r2, [pc, #100]	@ (8004728 <TIM_OC3_SetConfig+0x108>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC3_SetConfig+0xae>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a18      	ldr	r2, [pc, #96]	@ (800472c <TIM_OC3_SetConfig+0x10c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40013400 	.word	0x40013400
 8004724:	40014000 	.word	0x40014000
 8004728:	40014400 	.word	0x40014400
 800472c:	40014800 	.word	0x40014800

08004730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800477e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <TIM_OC4_SetConfig+0xc0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00f      	beq.n	80047b4 <TIM_OC4_SetConfig+0x84>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <TIM_OC4_SetConfig+0xc4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00b      	beq.n	80047b4 <TIM_OC4_SetConfig+0x84>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a16      	ldr	r2, [pc, #88]	@ (80047f8 <TIM_OC4_SetConfig+0xc8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_OC4_SetConfig+0x84>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <TIM_OC4_SetConfig+0xcc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC4_SetConfig+0x84>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a14      	ldr	r2, [pc, #80]	@ (8004800 <TIM_OC4_SetConfig+0xd0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d109      	bne.n	80047c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40013400 	.word	0x40013400
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800

08004804 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004848:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a17      	ldr	r2, [pc, #92]	@ (80048b8 <TIM_OC5_SetConfig+0xb4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00f      	beq.n	800487e <TIM_OC5_SetConfig+0x7a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a16      	ldr	r2, [pc, #88]	@ (80048bc <TIM_OC5_SetConfig+0xb8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <TIM_OC5_SetConfig+0x7a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a15      	ldr	r2, [pc, #84]	@ (80048c0 <TIM_OC5_SetConfig+0xbc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_OC5_SetConfig+0x7a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <TIM_OC5_SetConfig+0xc0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC5_SetConfig+0x7a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a13      	ldr	r2, [pc, #76]	@ (80048c8 <TIM_OC5_SetConfig+0xc4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d109      	bne.n	8004892 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	621a      	str	r2, [r3, #32]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40013400 	.word	0x40013400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400
 80048c8:	40014800 	.word	0x40014800

080048cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	051b      	lsls	r3, r3, #20
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a18      	ldr	r2, [pc, #96]	@ (8004984 <TIM_OC6_SetConfig+0xb8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00f      	beq.n	8004948 <TIM_OC6_SetConfig+0x7c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a17      	ldr	r2, [pc, #92]	@ (8004988 <TIM_OC6_SetConfig+0xbc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00b      	beq.n	8004948 <TIM_OC6_SetConfig+0x7c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a16      	ldr	r2, [pc, #88]	@ (800498c <TIM_OC6_SetConfig+0xc0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d007      	beq.n	8004948 <TIM_OC6_SetConfig+0x7c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a15      	ldr	r2, [pc, #84]	@ (8004990 <TIM_OC6_SetConfig+0xc4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_OC6_SetConfig+0x7c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a14      	ldr	r2, [pc, #80]	@ (8004994 <TIM_OC6_SetConfig+0xc8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d109      	bne.n	800495c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	029b      	lsls	r3, r3, #10
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40013400 	.word	0x40013400
 800498c:	40014000 	.word	0x40014000
 8004990:	40014400 	.word	0x40014400
 8004994:	40014800 	.word	0x40014800

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b087      	sub	sp, #28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0210 	bic.w	r2, r3, #16
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f043 0307 	orr.w	r3, r3, #7
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	021a      	lsls	r2, r3, #8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	609a      	str	r2, [r3, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2201      	movs	r2, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	401a      	ands	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e063      	b.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2b      	ldr	r2, [pc, #172]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d108      	bne.n	8004b76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1b      	ldr	r2, [pc, #108]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba2:	d013      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a18      	ldr	r2, [pc, #96]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a12      	ldr	r2, [pc, #72]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a13      	ldr	r2, [pc, #76]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d10c      	bne.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40013400 	.word	0x40013400
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40014000 	.word	0x40014000

08004c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e040      	b.n	8004cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fc fdc6 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2224      	movs	r2, #36	@ 0x24
 8004c44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fc00 	bl	800545c <UART_SetConfig>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e022      	b.n	8004cac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fdc8 	bl	8005804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fe4f 	bl	8005948 <UART_CheckIdleState>
 8004caa:	4603      	mov	r3, r0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	@ 0x28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d177      	bne.n	8004dbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_UART_Transmit+0x24>
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e070      	b.n	8004dbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2221      	movs	r2, #33	@ 0x21
 8004ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cea:	f7fc ffbb 	bl	8001c64 <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	88fa      	ldrh	r2, [r7, #6]
 8004cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d08:	d108      	bne.n	8004d1c <HAL_UART_Transmit+0x68>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e003      	b.n	8004d24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d24:	e02f      	b.n	8004d86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2180      	movs	r1, #128	@ 0x80
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 feb1 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e03b      	b.n	8004dbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10b      	bne.n	8004d64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	881a      	ldrh	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d58:	b292      	uxth	r2, r2
 8004d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	3302      	adds	r3, #2
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e007      	b.n	8004d74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	781a      	ldrb	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3301      	adds	r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1c9      	bne.n	8004d26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2140      	movs	r1, #64	@ 0x40
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fe7b 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e005      	b.n	8004dbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b08a      	sub	sp, #40	@ 0x28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d132      	bne.n	8004e44 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_UART_Receive_IT+0x24>
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e02b      	b.n	8004e46 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d018      	beq.n	8004e34 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	623b      	str	r3, [r7, #32]
 8004e22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	69f9      	ldr	r1, [r7, #28]
 8004e26:	6a3a      	ldr	r2, [r7, #32]
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fe94 	bl	8005b68 <UART_Start_Receive_IT>
 8004e40:	4603      	mov	r3, r0
 8004e42:	e000      	b.n	8004e46 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3728      	adds	r7, #40	@ 0x28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b0ba      	sub	sp, #232	@ 0xe8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004e7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004e7e:	4013      	ands	r3, r2
 8004e80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d115      	bne.n	8004eb8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00f      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d009      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 82ab 	beq.w	8005404 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
      }
      return;
 8004eb6:	e2a5      	b.n	8005404 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8117 	beq.w	80050f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ece:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ed2:	4b85      	ldr	r3, [pc, #532]	@ (80050e8 <HAL_UART_IRQHandler+0x298>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 810a 	beq.w	80050f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d011      	beq.n	8004f0c <HAL_UART_IRQHandler+0xbc>
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00b      	beq.n	8004f0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f02:	f043 0201 	orr.w	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d011      	beq.n	8004f3c <HAL_UART_IRQHandler+0xec>
 8004f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00b      	beq.n	8004f3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f32:	f043 0204 	orr.w	r2, r3, #4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d011      	beq.n	8004f6c <HAL_UART_IRQHandler+0x11c>
 8004f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f62:	f043 0202 	orr.w	r2, r3, #2
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d017      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d105      	bne.n	8004f90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2208      	movs	r2, #8
 8004f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f9e:	f043 0208 	orr.w	r2, r3, #8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d012      	beq.n	8004fda <HAL_UART_IRQHandler+0x18a>
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00c      	beq.n	8004fda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd0:	f043 0220 	orr.w	r2, r3, #32
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8211 	beq.w	8005408 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005022:	2b40      	cmp	r3, #64	@ 0x40
 8005024:	d005      	beq.n	8005032 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800502a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800502e:	2b00      	cmp	r3, #0
 8005030:	d04f      	beq.n	80050d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fe4c 	bl	8005cd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b40      	cmp	r3, #64	@ 0x40
 8005044:	d141      	bne.n	80050ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800505c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005072:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800507e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800508a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1d9      	bne.n	8005046 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005096:	2b00      	cmp	r3, #0
 8005098:	d013      	beq.n	80050c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509e:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <HAL_UART_IRQHandler+0x29c>)
 80050a0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc ff56 	bl	8001f58 <HAL_DMA_Abort_IT>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d017      	beq.n	80050e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050bc:	4610      	mov	r0, r2
 80050be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	e00f      	b.n	80050e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f9b4 	bl	8005430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c8:	e00b      	b.n	80050e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f9b0 	bl	8005430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	e007      	b.n	80050e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f9ac 	bl	8005430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80050e0:	e192      	b.n	8005408 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e2:	bf00      	nop
    return;
 80050e4:	e190      	b.n	8005408 <HAL_UART_IRQHandler+0x5b8>
 80050e6:	bf00      	nop
 80050e8:	04000120 	.word	0x04000120
 80050ec:	08005d99 	.word	0x08005d99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	f040 814b 	bne.w	8005390 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8144 	beq.w	8005390 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 813d 	beq.w	8005390 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005128:	2b40      	cmp	r3, #64	@ 0x40
 800512a:	f040 80b5 	bne.w	8005298 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800513a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8164 	beq.w	800540c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800514a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800514e:	429a      	cmp	r2, r3
 8005150:	f080 815c 	bcs.w	800540c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800515a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b20      	cmp	r3, #32
 8005166:	f000 8086 	beq.w	8005276 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800517e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005182:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005186:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005194:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005198:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1da      	bne.n	800516a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80051dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e1      	bne.n	80051b4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3308      	adds	r3, #8
 80051f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005214:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005216:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800521a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e3      	bne.n	80051f0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005246:	f023 0310 	bic.w	r3, r3, #16
 800524a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005258:	65bb      	str	r3, [r7, #88]	@ 0x58
 800525a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800525e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e4      	bne.n	8005236 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005270:	4618      	mov	r0, r3
 8005272:	f7fc fe38 	bl	8001ee6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005288:	b29b      	uxth	r3, r3
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	b29b      	uxth	r3, r3
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f8d7 	bl	8005444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005296:	e0b9      	b.n	800540c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 80ab 	beq.w	8005410 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80052ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80a6 	beq.w	8005410 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e4      	bne.n	80052c4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	623b      	str	r3, [r7, #32]
   return(result);
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800531e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e3      	bne.n	80052fa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	60fb      	str	r3, [r7, #12]
   return(result);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0310 	bic.w	r3, r3, #16
 800535a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	69b9      	ldr	r1, [r7, #24]
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	617b      	str	r3, [r7, #20]
   return(result);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e4      	bne.n	8005346 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005382:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f85b 	bl	8005444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800538e:	e03f      	b.n	8005410 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00e      	beq.n	80053ba <HAL_UART_IRQHandler+0x56a>
 800539c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80053b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fed8 	bl	8006168 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053b8:	e02d      	b.n	8005416 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01c      	beq.n	8005414 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
    }
    return;
 80053e2:	e017      	b.n	8005414 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <HAL_UART_IRQHandler+0x5c6>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00c      	beq.n	8005416 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fce1 	bl	8005dc4 <UART_EndTransmit_IT>
    return;
 8005402:	e008      	b.n	8005416 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005404:	bf00      	nop
 8005406:	e006      	b.n	8005416 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005408:	bf00      	nop
 800540a:	e004      	b.n	8005416 <HAL_UART_IRQHandler+0x5c6>
      return;
 800540c:	bf00      	nop
 800540e:	e002      	b.n	8005416 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005414:	bf00      	nop
  }

}
 8005416:	37e8      	adds	r7, #232	@ 0xe8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800548a:	f023 030c 	bic.w	r3, r3, #12
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	6979      	ldr	r1, [r7, #20]
 8005494:	430b      	orrs	r3, r1
 8005496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4aa7      	ldr	r2, [pc, #668]	@ (8005774 <UART_SetConfig+0x318>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d120      	bne.n	800551e <UART_SetConfig+0xc2>
 80054dc:	4ba6      	ldr	r3, [pc, #664]	@ (8005778 <UART_SetConfig+0x31c>)
 80054de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d817      	bhi.n	8005518 <UART_SetConfig+0xbc>
 80054e8:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <UART_SetConfig+0x94>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005501 	.word	0x08005501
 80054f4:	0800550d 	.word	0x0800550d
 80054f8:	08005513 	.word	0x08005513
 80054fc:	08005507 	.word	0x08005507
 8005500:	2301      	movs	r3, #1
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e0b5      	b.n	8005672 <UART_SetConfig+0x216>
 8005506:	2302      	movs	r3, #2
 8005508:	77fb      	strb	r3, [r7, #31]
 800550a:	e0b2      	b.n	8005672 <UART_SetConfig+0x216>
 800550c:	2304      	movs	r3, #4
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e0af      	b.n	8005672 <UART_SetConfig+0x216>
 8005512:	2308      	movs	r3, #8
 8005514:	77fb      	strb	r3, [r7, #31]
 8005516:	e0ac      	b.n	8005672 <UART_SetConfig+0x216>
 8005518:	2310      	movs	r3, #16
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e0a9      	b.n	8005672 <UART_SetConfig+0x216>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a96      	ldr	r2, [pc, #600]	@ (800577c <UART_SetConfig+0x320>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d124      	bne.n	8005572 <UART_SetConfig+0x116>
 8005528:	4b93      	ldr	r3, [pc, #588]	@ (8005778 <UART_SetConfig+0x31c>)
 800552a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005530:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005534:	d011      	beq.n	800555a <UART_SetConfig+0xfe>
 8005536:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800553a:	d817      	bhi.n	800556c <UART_SetConfig+0x110>
 800553c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005540:	d011      	beq.n	8005566 <UART_SetConfig+0x10a>
 8005542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005546:	d811      	bhi.n	800556c <UART_SetConfig+0x110>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <UART_SetConfig+0xf8>
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005550:	d006      	beq.n	8005560 <UART_SetConfig+0x104>
 8005552:	e00b      	b.n	800556c <UART_SetConfig+0x110>
 8005554:	2300      	movs	r3, #0
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e08b      	b.n	8005672 <UART_SetConfig+0x216>
 800555a:	2302      	movs	r3, #2
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e088      	b.n	8005672 <UART_SetConfig+0x216>
 8005560:	2304      	movs	r3, #4
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e085      	b.n	8005672 <UART_SetConfig+0x216>
 8005566:	2308      	movs	r3, #8
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e082      	b.n	8005672 <UART_SetConfig+0x216>
 800556c:	2310      	movs	r3, #16
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e07f      	b.n	8005672 <UART_SetConfig+0x216>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a82      	ldr	r2, [pc, #520]	@ (8005780 <UART_SetConfig+0x324>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d124      	bne.n	80055c6 <UART_SetConfig+0x16a>
 800557c:	4b7e      	ldr	r3, [pc, #504]	@ (8005778 <UART_SetConfig+0x31c>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005580:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005584:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005588:	d011      	beq.n	80055ae <UART_SetConfig+0x152>
 800558a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800558e:	d817      	bhi.n	80055c0 <UART_SetConfig+0x164>
 8005590:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005594:	d011      	beq.n	80055ba <UART_SetConfig+0x15e>
 8005596:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800559a:	d811      	bhi.n	80055c0 <UART_SetConfig+0x164>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <UART_SetConfig+0x14c>
 80055a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055a4:	d006      	beq.n	80055b4 <UART_SetConfig+0x158>
 80055a6:	e00b      	b.n	80055c0 <UART_SetConfig+0x164>
 80055a8:	2300      	movs	r3, #0
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e061      	b.n	8005672 <UART_SetConfig+0x216>
 80055ae:	2302      	movs	r3, #2
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e05e      	b.n	8005672 <UART_SetConfig+0x216>
 80055b4:	2304      	movs	r3, #4
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e05b      	b.n	8005672 <UART_SetConfig+0x216>
 80055ba:	2308      	movs	r3, #8
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e058      	b.n	8005672 <UART_SetConfig+0x216>
 80055c0:	2310      	movs	r3, #16
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e055      	b.n	8005672 <UART_SetConfig+0x216>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005784 <UART_SetConfig+0x328>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d124      	bne.n	800561a <UART_SetConfig+0x1be>
 80055d0:	4b69      	ldr	r3, [pc, #420]	@ (8005778 <UART_SetConfig+0x31c>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80055d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055dc:	d011      	beq.n	8005602 <UART_SetConfig+0x1a6>
 80055de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055e2:	d817      	bhi.n	8005614 <UART_SetConfig+0x1b8>
 80055e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055e8:	d011      	beq.n	800560e <UART_SetConfig+0x1b2>
 80055ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055ee:	d811      	bhi.n	8005614 <UART_SetConfig+0x1b8>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <UART_SetConfig+0x1a0>
 80055f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f8:	d006      	beq.n	8005608 <UART_SetConfig+0x1ac>
 80055fa:	e00b      	b.n	8005614 <UART_SetConfig+0x1b8>
 80055fc:	2300      	movs	r3, #0
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e037      	b.n	8005672 <UART_SetConfig+0x216>
 8005602:	2302      	movs	r3, #2
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e034      	b.n	8005672 <UART_SetConfig+0x216>
 8005608:	2304      	movs	r3, #4
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e031      	b.n	8005672 <UART_SetConfig+0x216>
 800560e:	2308      	movs	r3, #8
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e02e      	b.n	8005672 <UART_SetConfig+0x216>
 8005614:	2310      	movs	r3, #16
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e02b      	b.n	8005672 <UART_SetConfig+0x216>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a5a      	ldr	r2, [pc, #360]	@ (8005788 <UART_SetConfig+0x32c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d124      	bne.n	800566e <UART_SetConfig+0x212>
 8005624:	4b54      	ldr	r3, [pc, #336]	@ (8005778 <UART_SetConfig+0x31c>)
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800562c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005630:	d011      	beq.n	8005656 <UART_SetConfig+0x1fa>
 8005632:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005636:	d817      	bhi.n	8005668 <UART_SetConfig+0x20c>
 8005638:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800563c:	d011      	beq.n	8005662 <UART_SetConfig+0x206>
 800563e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005642:	d811      	bhi.n	8005668 <UART_SetConfig+0x20c>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <UART_SetConfig+0x1f4>
 8005648:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800564c:	d006      	beq.n	800565c <UART_SetConfig+0x200>
 800564e:	e00b      	b.n	8005668 <UART_SetConfig+0x20c>
 8005650:	2300      	movs	r3, #0
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e00d      	b.n	8005672 <UART_SetConfig+0x216>
 8005656:	2302      	movs	r3, #2
 8005658:	77fb      	strb	r3, [r7, #31]
 800565a:	e00a      	b.n	8005672 <UART_SetConfig+0x216>
 800565c:	2304      	movs	r3, #4
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e007      	b.n	8005672 <UART_SetConfig+0x216>
 8005662:	2308      	movs	r3, #8
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e004      	b.n	8005672 <UART_SetConfig+0x216>
 8005668:	2310      	movs	r3, #16
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e001      	b.n	8005672 <UART_SetConfig+0x216>
 800566e:	2310      	movs	r3, #16
 8005670:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567a:	d15b      	bne.n	8005734 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800567c:	7ffb      	ldrb	r3, [r7, #31]
 800567e:	2b08      	cmp	r3, #8
 8005680:	d827      	bhi.n	80056d2 <UART_SetConfig+0x276>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <UART_SetConfig+0x22c>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056b5 	.word	0x080056b5
 8005690:	080056bd 	.word	0x080056bd
 8005694:	080056d3 	.word	0x080056d3
 8005698:	080056c3 	.word	0x080056c3
 800569c:	080056d3 	.word	0x080056d3
 80056a0:	080056d3 	.word	0x080056d3
 80056a4:	080056d3 	.word	0x080056d3
 80056a8:	080056cb 	.word	0x080056cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fe f884 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80056b0:	61b8      	str	r0, [r7, #24]
        break;
 80056b2:	e013      	b.n	80056dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fe f8a2 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 80056b8:	61b8      	str	r0, [r7, #24]
        break;
 80056ba:	e00f      	b.n	80056dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b33      	ldr	r3, [pc, #204]	@ (800578c <UART_SetConfig+0x330>)
 80056be:	61bb      	str	r3, [r7, #24]
        break;
 80056c0:	e00c      	b.n	80056dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c2:	f7fe f803 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 80056c6:	61b8      	str	r0, [r7, #24]
        break;
 80056c8:	e008      	b.n	80056dc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ce:	61bb      	str	r3, [r7, #24]
        break;
 80056d0:	e004      	b.n	80056dc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	77bb      	strb	r3, [r7, #30]
        break;
 80056da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8082 	beq.w	80057e8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	005a      	lsls	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	441a      	add	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b0f      	cmp	r3, #15
 80056fe:	d916      	bls.n	800572e <UART_SetConfig+0x2d2>
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005706:	d212      	bcs.n	800572e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f023 030f 	bic.w	r3, r3, #15
 8005710:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	b29b      	uxth	r3, r3
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	b29a      	uxth	r2, r3
 800571e:	89fb      	ldrh	r3, [r7, #14]
 8005720:	4313      	orrs	r3, r2
 8005722:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	89fa      	ldrh	r2, [r7, #14]
 800572a:	60da      	str	r2, [r3, #12]
 800572c:	e05c      	b.n	80057e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	77bb      	strb	r3, [r7, #30]
 8005732:	e059      	b.n	80057e8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005734:	7ffb      	ldrb	r3, [r7, #31]
 8005736:	2b08      	cmp	r3, #8
 8005738:	d835      	bhi.n	80057a6 <UART_SetConfig+0x34a>
 800573a:	a201      	add	r2, pc, #4	@ (adr r2, 8005740 <UART_SetConfig+0x2e4>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005765 	.word	0x08005765
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005791 	.word	0x08005791
 800574c:	080057a7 	.word	0x080057a7
 8005750:	08005797 	.word	0x08005797
 8005754:	080057a7 	.word	0x080057a7
 8005758:	080057a7 	.word	0x080057a7
 800575c:	080057a7 	.word	0x080057a7
 8005760:	0800579f 	.word	0x0800579f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005764:	f7fe f828 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8005768:	61b8      	str	r0, [r7, #24]
        break;
 800576a:	e021      	b.n	80057b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800576c:	f7fe f846 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005770:	61b8      	str	r0, [r7, #24]
        break;
 8005772:	e01d      	b.n	80057b0 <UART_SetConfig+0x354>
 8005774:	40013800 	.word	0x40013800
 8005778:	40021000 	.word	0x40021000
 800577c:	40004400 	.word	0x40004400
 8005780:	40004800 	.word	0x40004800
 8005784:	40004c00 	.word	0x40004c00
 8005788:	40005000 	.word	0x40005000
 800578c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005790:	4b1b      	ldr	r3, [pc, #108]	@ (8005800 <UART_SetConfig+0x3a4>)
 8005792:	61bb      	str	r3, [r7, #24]
        break;
 8005794:	e00c      	b.n	80057b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005796:	f7fd ff99 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800579a:	61b8      	str	r0, [r7, #24]
        break;
 800579c:	e008      	b.n	80057b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057a2:	61bb      	str	r3, [r7, #24]
        break;
 80057a4:	e004      	b.n	80057b0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	77bb      	strb	r3, [r7, #30]
        break;
 80057ae:	bf00      	nop
    }

    if (pclk != 0U)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d018      	beq.n	80057e8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	085a      	lsrs	r2, r3, #1
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	441a      	add	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b0f      	cmp	r3, #15
 80057ce:	d909      	bls.n	80057e4 <UART_SetConfig+0x388>
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d6:	d205      	bcs.n	80057e4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	e001      	b.n	80057e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	007a1200 	.word	0x007a1200

08005804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01a      	beq.n	800591a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005902:	d10a      	bne.n	800591a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b098      	sub	sp, #96	@ 0x60
 800594c:	af02      	add	r7, sp, #8
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005958:	f7fc f984 	bl	8001c64 <HAL_GetTick>
 800595c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b08      	cmp	r3, #8
 800596a:	d12e      	bne.n	80059ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005974:	2200      	movs	r2, #0
 8005976:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f88c 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d021      	beq.n	80059ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800599a:	653b      	str	r3, [r7, #80]	@ 0x50
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e6      	bne.n	8005986 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e062      	b.n	8005a90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d149      	bne.n	8005a6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e0:	2200      	movs	r2, #0
 80059e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f856 	bl	8005a98 <UART_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d03c      	beq.n	8005a6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e6      	bne.n	80059f2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a44:	61fa      	str	r2, [r7, #28]
 8005a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	69b9      	ldr	r1, [r7, #24]
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	617b      	str	r3, [r7, #20]
   return(result);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e011      	b.n	8005a90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3758      	adds	r7, #88	@ 0x58
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa8:	e049      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d045      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab2:	f7fc f8d7 	bl	8001c64 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e048      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d031      	beq.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d110      	bne.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2208      	movs	r2, #8
 8005aee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f8ed 	bl	8005cd0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2208      	movs	r2, #8
 8005afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e029      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b18:	d111      	bne.n	8005b3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f8d3 	bl	8005cd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e00f      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2301      	moveq	r3, #1
 8005b50:	2300      	movne	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d0a6      	beq.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b097      	sub	sp, #92	@ 0x5c
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b9a:	d10e      	bne.n	8005bba <UART_Start_Receive_IT+0x52>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <UART_Start_Receive_IT+0x48>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005baa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bae:	e01a      	b.n	8005be6 <UART_Start_Receive_IT+0x7e>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	22ff      	movs	r2, #255	@ 0xff
 8005bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bb8:	e015      	b.n	8005be6 <UART_Start_Receive_IT+0x7e>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10d      	bne.n	8005bde <UART_Start_Receive_IT+0x76>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <UART_Start_Receive_IT+0x6c>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	22ff      	movs	r2, #255	@ 0xff
 8005bce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bd2:	e008      	b.n	8005be6 <UART_Start_Receive_IT+0x7e>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	227f      	movs	r2, #127	@ 0x7f
 8005bd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bdc:	e003      	b.n	8005be6 <UART_Start_Receive_IT+0x7e>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2222      	movs	r2, #34	@ 0x22
 8005bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c16:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005c18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c32:	d107      	bne.n	8005c44 <UART_Start_Receive_IT+0xdc>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d103      	bne.n	8005c44 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a22      	ldr	r2, [pc, #136]	@ (8005cc8 <UART_Start_Receive_IT+0x160>)
 8005c40:	669a      	str	r2, [r3, #104]	@ 0x68
 8005c42:	e002      	b.n	8005c4a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a21      	ldr	r2, [pc, #132]	@ (8005ccc <UART_Start_Receive_IT+0x164>)
 8005c48:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d019      	beq.n	8005c86 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c72:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e6      	bne.n	8005c52 <UART_Start_Receive_IT+0xea>
 8005c84:	e018      	b.n	8005cb8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	613b      	str	r3, [r7, #16]
   return(result);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f043 0320 	orr.w	r3, r3, #32
 8005c9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ca4:	623b      	str	r3, [r7, #32]
 8005ca6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	69f9      	ldr	r1, [r7, #28]
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e6      	bne.n	8005c86 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	375c      	adds	r7, #92	@ 0x5c
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	08005fc1 	.word	0x08005fc1
 8005ccc:	08005e19 	.word	0x08005e19

08005cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b095      	sub	sp, #84	@ 0x54
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e6      	bne.n	8005cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e5      	bne.n	8005d0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d118      	bne.n	8005d78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f023 0310 	bic.w	r3, r3, #16
 8005d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6979      	ldr	r1, [r7, #20]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	613b      	str	r3, [r7, #16]
   return(result);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e6      	bne.n	8005d46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d8c:	bf00      	nop
 8005d8e:	3754      	adds	r7, #84	@ 0x54
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff fb3a 	bl	8005430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	61bb      	str	r3, [r7, #24]
 8005dec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6979      	ldr	r1, [r7, #20]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	613b      	str	r3, [r7, #16]
   return(result);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e6      	bne.n	8005dcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fb06 	bl	800541c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e10:	bf00      	nop
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b09c      	sub	sp, #112	@ 0x70
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e30:	2b22      	cmp	r3, #34	@ 0x22
 8005e32:	f040 80b9 	bne.w	8005fa8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005e44:	b2d9      	uxtb	r1, r3
 8005e46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e50:	400a      	ands	r2, r1
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f040 809c 	bne.w	8005fb8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ea0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ea4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e6      	bne.n	8005e80 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005ed2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e5      	bne.n	8005eb2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d018      	beq.n	8005f3a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	623b      	str	r3, [r7, #32]
   return(result);
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e6      	bne.n	8005f08 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d12e      	bne.n	8005fa0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0310 	bic.w	r3, r3, #16
 8005f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	69b9      	ldr	r1, [r7, #24]
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	617b      	str	r3, [r7, #20]
   return(result);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e6      	bne.n	8005f48 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d103      	bne.n	8005f90 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff fa53 	bl	8005444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f9e:	e00b      	b.n	8005fb8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fb f9e9 	bl	8001378 <HAL_UART_RxCpltCallback>
}
 8005fa6:	e007      	b.n	8005fb8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0208 	orr.w	r2, r2, #8
 8005fb6:	619a      	str	r2, [r3, #24]
}
 8005fb8:	bf00      	nop
 8005fba:	3770      	adds	r7, #112	@ 0x70
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b09c      	sub	sp, #112	@ 0x70
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005fce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd8:	2b22      	cmp	r3, #34	@ 0x22
 8005fda:	f040 80b9 	bne.w	8006150 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005fe4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005fee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005ff2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ffc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006002:	1c9a      	adds	r2, r3, #2
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 809c 	bne.w	8006160 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603c:	667b      	str	r3, [r7, #100]	@ 0x64
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006046:	657b      	str	r3, [r7, #84]	@ 0x54
 8006048:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800604c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e6      	bne.n	8006028 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	663b      	str	r3, [r7, #96]	@ 0x60
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800607a:	643a      	str	r2, [r7, #64]	@ 0x40
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d018      	beq.n	80060e2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060d0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e6      	bne.n	80060b0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d12e      	bne.n	8006148 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f023 0310 	bic.w	r3, r3, #16
 8006104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	613b      	str	r3, [r7, #16]
   return(result);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e6      	bne.n	80060f0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b10      	cmp	r3, #16
 800612e:	d103      	bne.n	8006138 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2210      	movs	r2, #16
 8006136:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff f97f 	bl	8005444 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006146:	e00b      	b.n	8006160 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fb f915 	bl	8001378 <HAL_UART_RxCpltCallback>
}
 800614e:	e007      	b.n	8006160 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0208 	orr.w	r2, r2, #8
 800615e:	619a      	str	r2, [r3, #24]
}
 8006160:	bf00      	nop
 8006162:	3770      	adds	r7, #112	@ 0x70
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <__cvt>:
 800617c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	ec57 6b10 	vmov	r6, r7, d0
 8006184:	2f00      	cmp	r7, #0
 8006186:	460c      	mov	r4, r1
 8006188:	4619      	mov	r1, r3
 800618a:	463b      	mov	r3, r7
 800618c:	bfbb      	ittet	lt
 800618e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006192:	461f      	movlt	r7, r3
 8006194:	2300      	movge	r3, #0
 8006196:	232d      	movlt	r3, #45	@ 0x2d
 8006198:	700b      	strb	r3, [r1, #0]
 800619a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800619c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061a0:	4691      	mov	r9, r2
 80061a2:	f023 0820 	bic.w	r8, r3, #32
 80061a6:	bfbc      	itt	lt
 80061a8:	4632      	movlt	r2, r6
 80061aa:	4616      	movlt	r6, r2
 80061ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061b0:	d005      	beq.n	80061be <__cvt+0x42>
 80061b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061b6:	d100      	bne.n	80061ba <__cvt+0x3e>
 80061b8:	3401      	adds	r4, #1
 80061ba:	2102      	movs	r1, #2
 80061bc:	e000      	b.n	80061c0 <__cvt+0x44>
 80061be:	2103      	movs	r1, #3
 80061c0:	ab03      	add	r3, sp, #12
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	ab02      	add	r3, sp, #8
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	ec47 6b10 	vmov	d0, r6, r7
 80061cc:	4653      	mov	r3, sl
 80061ce:	4622      	mov	r2, r4
 80061d0:	f000 fe3a 	bl	8006e48 <_dtoa_r>
 80061d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80061d8:	4605      	mov	r5, r0
 80061da:	d119      	bne.n	8006210 <__cvt+0x94>
 80061dc:	f019 0f01 	tst.w	r9, #1
 80061e0:	d00e      	beq.n	8006200 <__cvt+0x84>
 80061e2:	eb00 0904 	add.w	r9, r0, r4
 80061e6:	2200      	movs	r2, #0
 80061e8:	2300      	movs	r3, #0
 80061ea:	4630      	mov	r0, r6
 80061ec:	4639      	mov	r1, r7
 80061ee:	f7fa fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80061f2:	b108      	cbz	r0, 80061f8 <__cvt+0x7c>
 80061f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061f8:	2230      	movs	r2, #48	@ 0x30
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	454b      	cmp	r3, r9
 80061fe:	d31e      	bcc.n	800623e <__cvt+0xc2>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006204:	1b5b      	subs	r3, r3, r5
 8006206:	4628      	mov	r0, r5
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	b004      	add	sp, #16
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006214:	eb00 0904 	add.w	r9, r0, r4
 8006218:	d1e5      	bne.n	80061e6 <__cvt+0x6a>
 800621a:	7803      	ldrb	r3, [r0, #0]
 800621c:	2b30      	cmp	r3, #48	@ 0x30
 800621e:	d10a      	bne.n	8006236 <__cvt+0xba>
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	4630      	mov	r0, r6
 8006226:	4639      	mov	r1, r7
 8006228:	f7fa fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800622c:	b918      	cbnz	r0, 8006236 <__cvt+0xba>
 800622e:	f1c4 0401 	rsb	r4, r4, #1
 8006232:	f8ca 4000 	str.w	r4, [sl]
 8006236:	f8da 3000 	ldr.w	r3, [sl]
 800623a:	4499      	add	r9, r3
 800623c:	e7d3      	b.n	80061e6 <__cvt+0x6a>
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	9103      	str	r1, [sp, #12]
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e7d9      	b.n	80061fa <__cvt+0x7e>

08006246 <__exponent>:
 8006246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006248:	2900      	cmp	r1, #0
 800624a:	bfba      	itte	lt
 800624c:	4249      	neglt	r1, r1
 800624e:	232d      	movlt	r3, #45	@ 0x2d
 8006250:	232b      	movge	r3, #43	@ 0x2b
 8006252:	2909      	cmp	r1, #9
 8006254:	7002      	strb	r2, [r0, #0]
 8006256:	7043      	strb	r3, [r0, #1]
 8006258:	dd29      	ble.n	80062ae <__exponent+0x68>
 800625a:	f10d 0307 	add.w	r3, sp, #7
 800625e:	461d      	mov	r5, r3
 8006260:	270a      	movs	r7, #10
 8006262:	461a      	mov	r2, r3
 8006264:	fbb1 f6f7 	udiv	r6, r1, r7
 8006268:	fb07 1416 	mls	r4, r7, r6, r1
 800626c:	3430      	adds	r4, #48	@ 0x30
 800626e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006272:	460c      	mov	r4, r1
 8006274:	2c63      	cmp	r4, #99	@ 0x63
 8006276:	f103 33ff 	add.w	r3, r3, #4294967295
 800627a:	4631      	mov	r1, r6
 800627c:	dcf1      	bgt.n	8006262 <__exponent+0x1c>
 800627e:	3130      	adds	r1, #48	@ 0x30
 8006280:	1e94      	subs	r4, r2, #2
 8006282:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006286:	1c41      	adds	r1, r0, #1
 8006288:	4623      	mov	r3, r4
 800628a:	42ab      	cmp	r3, r5
 800628c:	d30a      	bcc.n	80062a4 <__exponent+0x5e>
 800628e:	f10d 0309 	add.w	r3, sp, #9
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	42ac      	cmp	r4, r5
 8006296:	bf88      	it	hi
 8006298:	2300      	movhi	r3, #0
 800629a:	3302      	adds	r3, #2
 800629c:	4403      	add	r3, r0
 800629e:	1a18      	subs	r0, r3, r0
 80062a0:	b003      	add	sp, #12
 80062a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062ac:	e7ed      	b.n	800628a <__exponent+0x44>
 80062ae:	2330      	movs	r3, #48	@ 0x30
 80062b0:	3130      	adds	r1, #48	@ 0x30
 80062b2:	7083      	strb	r3, [r0, #2]
 80062b4:	70c1      	strb	r1, [r0, #3]
 80062b6:	1d03      	adds	r3, r0, #4
 80062b8:	e7f1      	b.n	800629e <__exponent+0x58>
	...

080062bc <_printf_float>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	b08d      	sub	sp, #52	@ 0x34
 80062c2:	460c      	mov	r4, r1
 80062c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80062c8:	4616      	mov	r6, r2
 80062ca:	461f      	mov	r7, r3
 80062cc:	4605      	mov	r5, r0
 80062ce:	f000 fcbb 	bl	8006c48 <_localeconv_r>
 80062d2:	6803      	ldr	r3, [r0, #0]
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7f9 ffca 	bl	8000270 <strlen>
 80062dc:	2300      	movs	r3, #0
 80062de:	930a      	str	r3, [sp, #40]	@ 0x28
 80062e0:	f8d8 3000 	ldr.w	r3, [r8]
 80062e4:	9005      	str	r0, [sp, #20]
 80062e6:	3307      	adds	r3, #7
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	f103 0208 	add.w	r2, r3, #8
 80062f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062f4:	f8d4 b000 	ldr.w	fp, [r4]
 80062f8:	f8c8 2000 	str.w	r2, [r8]
 80062fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006300:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006304:	9307      	str	r3, [sp, #28]
 8006306:	f8cd 8018 	str.w	r8, [sp, #24]
 800630a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800630e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006312:	4b9c      	ldr	r3, [pc, #624]	@ (8006584 <_printf_float+0x2c8>)
 8006314:	f04f 32ff 	mov.w	r2, #4294967295
 8006318:	f7fa fc08 	bl	8000b2c <__aeabi_dcmpun>
 800631c:	bb70      	cbnz	r0, 800637c <_printf_float+0xc0>
 800631e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006322:	4b98      	ldr	r3, [pc, #608]	@ (8006584 <_printf_float+0x2c8>)
 8006324:	f04f 32ff 	mov.w	r2, #4294967295
 8006328:	f7fa fbe2 	bl	8000af0 <__aeabi_dcmple>
 800632c:	bb30      	cbnz	r0, 800637c <_printf_float+0xc0>
 800632e:	2200      	movs	r2, #0
 8006330:	2300      	movs	r3, #0
 8006332:	4640      	mov	r0, r8
 8006334:	4649      	mov	r1, r9
 8006336:	f7fa fbd1 	bl	8000adc <__aeabi_dcmplt>
 800633a:	b110      	cbz	r0, 8006342 <_printf_float+0x86>
 800633c:	232d      	movs	r3, #45	@ 0x2d
 800633e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006342:	4a91      	ldr	r2, [pc, #580]	@ (8006588 <_printf_float+0x2cc>)
 8006344:	4b91      	ldr	r3, [pc, #580]	@ (800658c <_printf_float+0x2d0>)
 8006346:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800634a:	bf94      	ite	ls
 800634c:	4690      	movls	r8, r2
 800634e:	4698      	movhi	r8, r3
 8006350:	2303      	movs	r3, #3
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	f02b 0304 	bic.w	r3, fp, #4
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	f04f 0900 	mov.w	r9, #0
 800635e:	9700      	str	r7, [sp, #0]
 8006360:	4633      	mov	r3, r6
 8006362:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f9d2 	bl	8006710 <_printf_common>
 800636c:	3001      	adds	r0, #1
 800636e:	f040 808d 	bne.w	800648c <_printf_float+0x1d0>
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	b00d      	add	sp, #52	@ 0x34
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7fa fbd2 	bl	8000b2c <__aeabi_dcmpun>
 8006388:	b140      	cbz	r0, 800639c <_printf_float+0xe0>
 800638a:	464b      	mov	r3, r9
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfbc      	itt	lt
 8006390:	232d      	movlt	r3, #45	@ 0x2d
 8006392:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006396:	4a7e      	ldr	r2, [pc, #504]	@ (8006590 <_printf_float+0x2d4>)
 8006398:	4b7e      	ldr	r3, [pc, #504]	@ (8006594 <_printf_float+0x2d8>)
 800639a:	e7d4      	b.n	8006346 <_printf_float+0x8a>
 800639c:	6863      	ldr	r3, [r4, #4]
 800639e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063a2:	9206      	str	r2, [sp, #24]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	d13b      	bne.n	8006420 <_printf_float+0x164>
 80063a8:	2306      	movs	r3, #6
 80063aa:	6063      	str	r3, [r4, #4]
 80063ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80063b0:	2300      	movs	r3, #0
 80063b2:	6022      	str	r2, [r4, #0]
 80063b4:	9303      	str	r3, [sp, #12]
 80063b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80063b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80063bc:	ab09      	add	r3, sp, #36	@ 0x24
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	ec49 8b10 	vmov	d0, r8, r9
 80063c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80063ca:	4628      	mov	r0, r5
 80063cc:	f7ff fed6 	bl	800617c <__cvt>
 80063d0:	9b06      	ldr	r3, [sp, #24]
 80063d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063d4:	2b47      	cmp	r3, #71	@ 0x47
 80063d6:	4680      	mov	r8, r0
 80063d8:	d129      	bne.n	800642e <_printf_float+0x172>
 80063da:	1cc8      	adds	r0, r1, #3
 80063dc:	db02      	blt.n	80063e4 <_printf_float+0x128>
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	4299      	cmp	r1, r3
 80063e2:	dd41      	ble.n	8006468 <_printf_float+0x1ac>
 80063e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80063e8:	fa5f fa8a 	uxtb.w	sl, sl
 80063ec:	3901      	subs	r1, #1
 80063ee:	4652      	mov	r2, sl
 80063f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80063f6:	f7ff ff26 	bl	8006246 <__exponent>
 80063fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063fc:	1813      	adds	r3, r2, r0
 80063fe:	2a01      	cmp	r2, #1
 8006400:	4681      	mov	r9, r0
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	dc02      	bgt.n	800640c <_printf_float+0x150>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	07d2      	lsls	r2, r2, #31
 800640a:	d501      	bpl.n	8006410 <_printf_float+0x154>
 800640c:	3301      	adds	r3, #1
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0a2      	beq.n	800635e <_printf_float+0xa2>
 8006418:	232d      	movs	r3, #45	@ 0x2d
 800641a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800641e:	e79e      	b.n	800635e <_printf_float+0xa2>
 8006420:	9a06      	ldr	r2, [sp, #24]
 8006422:	2a47      	cmp	r2, #71	@ 0x47
 8006424:	d1c2      	bne.n	80063ac <_printf_float+0xf0>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1c0      	bne.n	80063ac <_printf_float+0xf0>
 800642a:	2301      	movs	r3, #1
 800642c:	e7bd      	b.n	80063aa <_printf_float+0xee>
 800642e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006432:	d9db      	bls.n	80063ec <_printf_float+0x130>
 8006434:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006438:	d118      	bne.n	800646c <_printf_float+0x1b0>
 800643a:	2900      	cmp	r1, #0
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	dd0b      	ble.n	8006458 <_printf_float+0x19c>
 8006440:	6121      	str	r1, [r4, #16]
 8006442:	b913      	cbnz	r3, 800644a <_printf_float+0x18e>
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	07d0      	lsls	r0, r2, #31
 8006448:	d502      	bpl.n	8006450 <_printf_float+0x194>
 800644a:	3301      	adds	r3, #1
 800644c:	440b      	add	r3, r1
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006452:	f04f 0900 	mov.w	r9, #0
 8006456:	e7db      	b.n	8006410 <_printf_float+0x154>
 8006458:	b913      	cbnz	r3, 8006460 <_printf_float+0x1a4>
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	07d2      	lsls	r2, r2, #31
 800645e:	d501      	bpl.n	8006464 <_printf_float+0x1a8>
 8006460:	3302      	adds	r3, #2
 8006462:	e7f4      	b.n	800644e <_printf_float+0x192>
 8006464:	2301      	movs	r3, #1
 8006466:	e7f2      	b.n	800644e <_printf_float+0x192>
 8006468:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800646c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800646e:	4299      	cmp	r1, r3
 8006470:	db05      	blt.n	800647e <_printf_float+0x1c2>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	6121      	str	r1, [r4, #16]
 8006476:	07d8      	lsls	r0, r3, #31
 8006478:	d5ea      	bpl.n	8006450 <_printf_float+0x194>
 800647a:	1c4b      	adds	r3, r1, #1
 800647c:	e7e7      	b.n	800644e <_printf_float+0x192>
 800647e:	2900      	cmp	r1, #0
 8006480:	bfd4      	ite	le
 8006482:	f1c1 0202 	rsble	r2, r1, #2
 8006486:	2201      	movgt	r2, #1
 8006488:	4413      	add	r3, r2
 800648a:	e7e0      	b.n	800644e <_printf_float+0x192>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	055a      	lsls	r2, r3, #21
 8006490:	d407      	bmi.n	80064a2 <_printf_float+0x1e6>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	4642      	mov	r2, r8
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d12b      	bne.n	80064f8 <_printf_float+0x23c>
 80064a0:	e767      	b.n	8006372 <_printf_float+0xb6>
 80064a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064a6:	f240 80dd 	bls.w	8006664 <_printf_float+0x3a8>
 80064aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	f7fa fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d033      	beq.n	8006522 <_printf_float+0x266>
 80064ba:	4a37      	ldr	r2, [pc, #220]	@ (8006598 <_printf_float+0x2dc>)
 80064bc:	2301      	movs	r3, #1
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	f43f af54 	beq.w	8006372 <_printf_float+0xb6>
 80064ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80064ce:	4543      	cmp	r3, r8
 80064d0:	db02      	blt.n	80064d8 <_printf_float+0x21c>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	07d8      	lsls	r0, r3, #31
 80064d6:	d50f      	bpl.n	80064f8 <_printf_float+0x23c>
 80064d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af45 	beq.w	8006372 <_printf_float+0xb6>
 80064e8:	f04f 0900 	mov.w	r9, #0
 80064ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80064f0:	f104 0a1a 	add.w	sl, r4, #26
 80064f4:	45c8      	cmp	r8, r9
 80064f6:	dc09      	bgt.n	800650c <_printf_float+0x250>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	079b      	lsls	r3, r3, #30
 80064fc:	f100 8103 	bmi.w	8006706 <_printf_float+0x44a>
 8006500:	68e0      	ldr	r0, [r4, #12]
 8006502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006504:	4298      	cmp	r0, r3
 8006506:	bfb8      	it	lt
 8006508:	4618      	movlt	r0, r3
 800650a:	e734      	b.n	8006376 <_printf_float+0xba>
 800650c:	2301      	movs	r3, #1
 800650e:	4652      	mov	r2, sl
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af2b 	beq.w	8006372 <_printf_float+0xb6>
 800651c:	f109 0901 	add.w	r9, r9, #1
 8006520:	e7e8      	b.n	80064f4 <_printf_float+0x238>
 8006522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	dc39      	bgt.n	800659c <_printf_float+0x2e0>
 8006528:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <_printf_float+0x2dc>)
 800652a:	2301      	movs	r3, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f af1d 	beq.w	8006372 <_printf_float+0xb6>
 8006538:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800653c:	ea59 0303 	orrs.w	r3, r9, r3
 8006540:	d102      	bne.n	8006548 <_printf_float+0x28c>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	07d9      	lsls	r1, r3, #31
 8006546:	d5d7      	bpl.n	80064f8 <_printf_float+0x23c>
 8006548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af0d 	beq.w	8006372 <_printf_float+0xb6>
 8006558:	f04f 0a00 	mov.w	sl, #0
 800655c:	f104 0b1a 	add.w	fp, r4, #26
 8006560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006562:	425b      	negs	r3, r3
 8006564:	4553      	cmp	r3, sl
 8006566:	dc01      	bgt.n	800656c <_printf_float+0x2b0>
 8006568:	464b      	mov	r3, r9
 800656a:	e793      	b.n	8006494 <_printf_float+0x1d8>
 800656c:	2301      	movs	r3, #1
 800656e:	465a      	mov	r2, fp
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f aefb 	beq.w	8006372 <_printf_float+0xb6>
 800657c:	f10a 0a01 	add.w	sl, sl, #1
 8006580:	e7ee      	b.n	8006560 <_printf_float+0x2a4>
 8006582:	bf00      	nop
 8006584:	7fefffff 	.word	0x7fefffff
 8006588:	08008b34 	.word	0x08008b34
 800658c:	08008b38 	.word	0x08008b38
 8006590:	08008b3c 	.word	0x08008b3c
 8006594:	08008b40 	.word	0x08008b40
 8006598:	08008b44 	.word	0x08008b44
 800659c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800659e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065a2:	4553      	cmp	r3, sl
 80065a4:	bfa8      	it	ge
 80065a6:	4653      	movge	r3, sl
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	4699      	mov	r9, r3
 80065ac:	dc36      	bgt.n	800661c <_printf_float+0x360>
 80065ae:	f04f 0b00 	mov.w	fp, #0
 80065b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b6:	f104 021a 	add.w	r2, r4, #26
 80065ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065bc:	9306      	str	r3, [sp, #24]
 80065be:	eba3 0309 	sub.w	r3, r3, r9
 80065c2:	455b      	cmp	r3, fp
 80065c4:	dc31      	bgt.n	800662a <_printf_float+0x36e>
 80065c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c8:	459a      	cmp	sl, r3
 80065ca:	dc3a      	bgt.n	8006642 <_printf_float+0x386>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07da      	lsls	r2, r3, #31
 80065d0:	d437      	bmi.n	8006642 <_printf_float+0x386>
 80065d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d4:	ebaa 0903 	sub.w	r9, sl, r3
 80065d8:	9b06      	ldr	r3, [sp, #24]
 80065da:	ebaa 0303 	sub.w	r3, sl, r3
 80065de:	4599      	cmp	r9, r3
 80065e0:	bfa8      	it	ge
 80065e2:	4699      	movge	r9, r3
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	dc33      	bgt.n	8006652 <_printf_float+0x396>
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065f2:	f104 0b1a 	add.w	fp, r4, #26
 80065f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f8:	ebaa 0303 	sub.w	r3, sl, r3
 80065fc:	eba3 0309 	sub.w	r3, r3, r9
 8006600:	4543      	cmp	r3, r8
 8006602:	f77f af79 	ble.w	80064f8 <_printf_float+0x23c>
 8006606:	2301      	movs	r3, #1
 8006608:	465a      	mov	r2, fp
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f aeae 	beq.w	8006372 <_printf_float+0xb6>
 8006616:	f108 0801 	add.w	r8, r8, #1
 800661a:	e7ec      	b.n	80065f6 <_printf_float+0x33a>
 800661c:	4642      	mov	r2, r8
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	d1c2      	bne.n	80065ae <_printf_float+0x2f2>
 8006628:	e6a3      	b.n	8006372 <_printf_float+0xb6>
 800662a:	2301      	movs	r3, #1
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	9206      	str	r2, [sp, #24]
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae9c 	beq.w	8006372 <_printf_float+0xb6>
 800663a:	9a06      	ldr	r2, [sp, #24]
 800663c:	f10b 0b01 	add.w	fp, fp, #1
 8006640:	e7bb      	b.n	80065ba <_printf_float+0x2fe>
 8006642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	d1c0      	bne.n	80065d2 <_printf_float+0x316>
 8006650:	e68f      	b.n	8006372 <_printf_float+0xb6>
 8006652:	9a06      	ldr	r2, [sp, #24]
 8006654:	464b      	mov	r3, r9
 8006656:	4442      	add	r2, r8
 8006658:	4631      	mov	r1, r6
 800665a:	4628      	mov	r0, r5
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	d1c3      	bne.n	80065ea <_printf_float+0x32e>
 8006662:	e686      	b.n	8006372 <_printf_float+0xb6>
 8006664:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006668:	f1ba 0f01 	cmp.w	sl, #1
 800666c:	dc01      	bgt.n	8006672 <_printf_float+0x3b6>
 800666e:	07db      	lsls	r3, r3, #31
 8006670:	d536      	bpl.n	80066e0 <_printf_float+0x424>
 8006672:	2301      	movs	r3, #1
 8006674:	4642      	mov	r2, r8
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	f43f ae78 	beq.w	8006372 <_printf_float+0xb6>
 8006682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae70 	beq.w	8006372 <_printf_float+0xb6>
 8006692:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006696:	2200      	movs	r2, #0
 8006698:	2300      	movs	r3, #0
 800669a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800669e:	f7fa fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a2:	b9c0      	cbnz	r0, 80066d6 <_printf_float+0x41a>
 80066a4:	4653      	mov	r3, sl
 80066a6:	f108 0201 	add.w	r2, r8, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	d10c      	bne.n	80066ce <_printf_float+0x412>
 80066b4:	e65d      	b.n	8006372 <_printf_float+0xb6>
 80066b6:	2301      	movs	r3, #1
 80066b8:	465a      	mov	r2, fp
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f ae56 	beq.w	8006372 <_printf_float+0xb6>
 80066c6:	f108 0801 	add.w	r8, r8, #1
 80066ca:	45d0      	cmp	r8, sl
 80066cc:	dbf3      	blt.n	80066b6 <_printf_float+0x3fa>
 80066ce:	464b      	mov	r3, r9
 80066d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066d4:	e6df      	b.n	8006496 <_printf_float+0x1da>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	f104 0b1a 	add.w	fp, r4, #26
 80066de:	e7f4      	b.n	80066ca <_printf_float+0x40e>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4642      	mov	r2, r8
 80066e4:	e7e1      	b.n	80066aa <_printf_float+0x3ee>
 80066e6:	2301      	movs	r3, #1
 80066e8:	464a      	mov	r2, r9
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f ae3e 	beq.w	8006372 <_printf_float+0xb6>
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	4543      	cmp	r3, r8
 8006702:	dcf0      	bgt.n	80066e6 <_printf_float+0x42a>
 8006704:	e6fc      	b.n	8006500 <_printf_float+0x244>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	f104 0919 	add.w	r9, r4, #25
 800670e:	e7f4      	b.n	80066fa <_printf_float+0x43e>

08006710 <_printf_common>:
 8006710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	4616      	mov	r6, r2
 8006716:	4698      	mov	r8, r3
 8006718:	688a      	ldr	r2, [r1, #8]
 800671a:	690b      	ldr	r3, [r1, #16]
 800671c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006720:	4293      	cmp	r3, r2
 8006722:	bfb8      	it	lt
 8006724:	4613      	movlt	r3, r2
 8006726:	6033      	str	r3, [r6, #0]
 8006728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800672c:	4607      	mov	r7, r0
 800672e:	460c      	mov	r4, r1
 8006730:	b10a      	cbz	r2, 8006736 <_printf_common+0x26>
 8006732:	3301      	adds	r3, #1
 8006734:	6033      	str	r3, [r6, #0]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	0699      	lsls	r1, r3, #26
 800673a:	bf42      	ittt	mi
 800673c:	6833      	ldrmi	r3, [r6, #0]
 800673e:	3302      	addmi	r3, #2
 8006740:	6033      	strmi	r3, [r6, #0]
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	f015 0506 	ands.w	r5, r5, #6
 8006748:	d106      	bne.n	8006758 <_printf_common+0x48>
 800674a:	f104 0a19 	add.w	sl, r4, #25
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	6832      	ldr	r2, [r6, #0]
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	42ab      	cmp	r3, r5
 8006756:	dc26      	bgt.n	80067a6 <_printf_common+0x96>
 8006758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	3b00      	subs	r3, #0
 8006760:	bf18      	it	ne
 8006762:	2301      	movne	r3, #1
 8006764:	0692      	lsls	r2, r2, #26
 8006766:	d42b      	bmi.n	80067c0 <_printf_common+0xb0>
 8006768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800676c:	4641      	mov	r1, r8
 800676e:	4638      	mov	r0, r7
 8006770:	47c8      	blx	r9
 8006772:	3001      	adds	r0, #1
 8006774:	d01e      	beq.n	80067b4 <_printf_common+0xa4>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	f003 0306 	and.w	r3, r3, #6
 800677e:	2b04      	cmp	r3, #4
 8006780:	bf02      	ittt	eq
 8006782:	68e5      	ldreq	r5, [r4, #12]
 8006784:	6833      	ldreq	r3, [r6, #0]
 8006786:	1aed      	subeq	r5, r5, r3
 8006788:	68a3      	ldr	r3, [r4, #8]
 800678a:	bf0c      	ite	eq
 800678c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006790:	2500      	movne	r5, #0
 8006792:	4293      	cmp	r3, r2
 8006794:	bfc4      	itt	gt
 8006796:	1a9b      	subgt	r3, r3, r2
 8006798:	18ed      	addgt	r5, r5, r3
 800679a:	2600      	movs	r6, #0
 800679c:	341a      	adds	r4, #26
 800679e:	42b5      	cmp	r5, r6
 80067a0:	d11a      	bne.n	80067d8 <_printf_common+0xc8>
 80067a2:	2000      	movs	r0, #0
 80067a4:	e008      	b.n	80067b8 <_printf_common+0xa8>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4652      	mov	r2, sl
 80067aa:	4641      	mov	r1, r8
 80067ac:	4638      	mov	r0, r7
 80067ae:	47c8      	blx	r9
 80067b0:	3001      	adds	r0, #1
 80067b2:	d103      	bne.n	80067bc <_printf_common+0xac>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067bc:	3501      	adds	r5, #1
 80067be:	e7c6      	b.n	800674e <_printf_common+0x3e>
 80067c0:	18e1      	adds	r1, r4, r3
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	2030      	movs	r0, #48	@ 0x30
 80067c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067ca:	4422      	add	r2, r4
 80067cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067d4:	3302      	adds	r3, #2
 80067d6:	e7c7      	b.n	8006768 <_printf_common+0x58>
 80067d8:	2301      	movs	r3, #1
 80067da:	4622      	mov	r2, r4
 80067dc:	4641      	mov	r1, r8
 80067de:	4638      	mov	r0, r7
 80067e0:	47c8      	blx	r9
 80067e2:	3001      	adds	r0, #1
 80067e4:	d0e6      	beq.n	80067b4 <_printf_common+0xa4>
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7d9      	b.n	800679e <_printf_common+0x8e>
	...

080067ec <_printf_i>:
 80067ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	7e0f      	ldrb	r7, [r1, #24]
 80067f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067f4:	2f78      	cmp	r7, #120	@ 0x78
 80067f6:	4691      	mov	r9, r2
 80067f8:	4680      	mov	r8, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	469a      	mov	sl, r3
 80067fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006802:	d807      	bhi.n	8006814 <_printf_i+0x28>
 8006804:	2f62      	cmp	r7, #98	@ 0x62
 8006806:	d80a      	bhi.n	800681e <_printf_i+0x32>
 8006808:	2f00      	cmp	r7, #0
 800680a:	f000 80d2 	beq.w	80069b2 <_printf_i+0x1c6>
 800680e:	2f58      	cmp	r7, #88	@ 0x58
 8006810:	f000 80b9 	beq.w	8006986 <_printf_i+0x19a>
 8006814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800681c:	e03a      	b.n	8006894 <_printf_i+0xa8>
 800681e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006822:	2b15      	cmp	r3, #21
 8006824:	d8f6      	bhi.n	8006814 <_printf_i+0x28>
 8006826:	a101      	add	r1, pc, #4	@ (adr r1, 800682c <_printf_i+0x40>)
 8006828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800682c:	08006885 	.word	0x08006885
 8006830:	08006899 	.word	0x08006899
 8006834:	08006815 	.word	0x08006815
 8006838:	08006815 	.word	0x08006815
 800683c:	08006815 	.word	0x08006815
 8006840:	08006815 	.word	0x08006815
 8006844:	08006899 	.word	0x08006899
 8006848:	08006815 	.word	0x08006815
 800684c:	08006815 	.word	0x08006815
 8006850:	08006815 	.word	0x08006815
 8006854:	08006815 	.word	0x08006815
 8006858:	08006999 	.word	0x08006999
 800685c:	080068c3 	.word	0x080068c3
 8006860:	08006953 	.word	0x08006953
 8006864:	08006815 	.word	0x08006815
 8006868:	08006815 	.word	0x08006815
 800686c:	080069bb 	.word	0x080069bb
 8006870:	08006815 	.word	0x08006815
 8006874:	080068c3 	.word	0x080068c3
 8006878:	08006815 	.word	0x08006815
 800687c:	08006815 	.word	0x08006815
 8006880:	0800695b 	.word	0x0800695b
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6032      	str	r2, [r6, #0]
 800688c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006894:	2301      	movs	r3, #1
 8006896:	e09d      	b.n	80069d4 <_printf_i+0x1e8>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	6820      	ldr	r0, [r4, #0]
 800689c:	1d19      	adds	r1, r3, #4
 800689e:	6031      	str	r1, [r6, #0]
 80068a0:	0606      	lsls	r6, r0, #24
 80068a2:	d501      	bpl.n	80068a8 <_printf_i+0xbc>
 80068a4:	681d      	ldr	r5, [r3, #0]
 80068a6:	e003      	b.n	80068b0 <_printf_i+0xc4>
 80068a8:	0645      	lsls	r5, r0, #25
 80068aa:	d5fb      	bpl.n	80068a4 <_printf_i+0xb8>
 80068ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	da03      	bge.n	80068bc <_printf_i+0xd0>
 80068b4:	232d      	movs	r3, #45	@ 0x2d
 80068b6:	426d      	negs	r5, r5
 80068b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068bc:	4859      	ldr	r0, [pc, #356]	@ (8006a24 <_printf_i+0x238>)
 80068be:	230a      	movs	r3, #10
 80068c0:	e011      	b.n	80068e6 <_printf_i+0xfa>
 80068c2:	6821      	ldr	r1, [r4, #0]
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	0608      	lsls	r0, r1, #24
 80068c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068cc:	d402      	bmi.n	80068d4 <_printf_i+0xe8>
 80068ce:	0649      	lsls	r1, r1, #25
 80068d0:	bf48      	it	mi
 80068d2:	b2ad      	uxthmi	r5, r5
 80068d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068d6:	4853      	ldr	r0, [pc, #332]	@ (8006a24 <_printf_i+0x238>)
 80068d8:	6033      	str	r3, [r6, #0]
 80068da:	bf14      	ite	ne
 80068dc:	230a      	movne	r3, #10
 80068de:	2308      	moveq	r3, #8
 80068e0:	2100      	movs	r1, #0
 80068e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068e6:	6866      	ldr	r6, [r4, #4]
 80068e8:	60a6      	str	r6, [r4, #8]
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	bfa2      	ittt	ge
 80068ee:	6821      	ldrge	r1, [r4, #0]
 80068f0:	f021 0104 	bicge.w	r1, r1, #4
 80068f4:	6021      	strge	r1, [r4, #0]
 80068f6:	b90d      	cbnz	r5, 80068fc <_printf_i+0x110>
 80068f8:	2e00      	cmp	r6, #0
 80068fa:	d04b      	beq.n	8006994 <_printf_i+0x1a8>
 80068fc:	4616      	mov	r6, r2
 80068fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006902:	fb03 5711 	mls	r7, r3, r1, r5
 8006906:	5dc7      	ldrb	r7, [r0, r7]
 8006908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800690c:	462f      	mov	r7, r5
 800690e:	42bb      	cmp	r3, r7
 8006910:	460d      	mov	r5, r1
 8006912:	d9f4      	bls.n	80068fe <_printf_i+0x112>
 8006914:	2b08      	cmp	r3, #8
 8006916:	d10b      	bne.n	8006930 <_printf_i+0x144>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	07df      	lsls	r7, r3, #31
 800691c:	d508      	bpl.n	8006930 <_printf_i+0x144>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	6861      	ldr	r1, [r4, #4]
 8006922:	4299      	cmp	r1, r3
 8006924:	bfde      	ittt	le
 8006926:	2330      	movle	r3, #48	@ 0x30
 8006928:	f806 3c01 	strble.w	r3, [r6, #-1]
 800692c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006930:	1b92      	subs	r2, r2, r6
 8006932:	6122      	str	r2, [r4, #16]
 8006934:	f8cd a000 	str.w	sl, [sp]
 8006938:	464b      	mov	r3, r9
 800693a:	aa03      	add	r2, sp, #12
 800693c:	4621      	mov	r1, r4
 800693e:	4640      	mov	r0, r8
 8006940:	f7ff fee6 	bl	8006710 <_printf_common>
 8006944:	3001      	adds	r0, #1
 8006946:	d14a      	bne.n	80069de <_printf_i+0x1f2>
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	b004      	add	sp, #16
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f043 0320 	orr.w	r3, r3, #32
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	4833      	ldr	r0, [pc, #204]	@ (8006a28 <_printf_i+0x23c>)
 800695c:	2778      	movs	r7, #120	@ 0x78
 800695e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	6831      	ldr	r1, [r6, #0]
 8006966:	061f      	lsls	r7, r3, #24
 8006968:	f851 5b04 	ldr.w	r5, [r1], #4
 800696c:	d402      	bmi.n	8006974 <_printf_i+0x188>
 800696e:	065f      	lsls	r7, r3, #25
 8006970:	bf48      	it	mi
 8006972:	b2ad      	uxthmi	r5, r5
 8006974:	6031      	str	r1, [r6, #0]
 8006976:	07d9      	lsls	r1, r3, #31
 8006978:	bf44      	itt	mi
 800697a:	f043 0320 	orrmi.w	r3, r3, #32
 800697e:	6023      	strmi	r3, [r4, #0]
 8006980:	b11d      	cbz	r5, 800698a <_printf_i+0x19e>
 8006982:	2310      	movs	r3, #16
 8006984:	e7ac      	b.n	80068e0 <_printf_i+0xf4>
 8006986:	4827      	ldr	r0, [pc, #156]	@ (8006a24 <_printf_i+0x238>)
 8006988:	e7e9      	b.n	800695e <_printf_i+0x172>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	f023 0320 	bic.w	r3, r3, #32
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	e7f6      	b.n	8006982 <_printf_i+0x196>
 8006994:	4616      	mov	r6, r2
 8006996:	e7bd      	b.n	8006914 <_printf_i+0x128>
 8006998:	6833      	ldr	r3, [r6, #0]
 800699a:	6825      	ldr	r5, [r4, #0]
 800699c:	6961      	ldr	r1, [r4, #20]
 800699e:	1d18      	adds	r0, r3, #4
 80069a0:	6030      	str	r0, [r6, #0]
 80069a2:	062e      	lsls	r6, r5, #24
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	d501      	bpl.n	80069ac <_printf_i+0x1c0>
 80069a8:	6019      	str	r1, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <_printf_i+0x1c6>
 80069ac:	0668      	lsls	r0, r5, #25
 80069ae:	d5fb      	bpl.n	80069a8 <_printf_i+0x1bc>
 80069b0:	8019      	strh	r1, [r3, #0]
 80069b2:	2300      	movs	r3, #0
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	4616      	mov	r6, r2
 80069b8:	e7bc      	b.n	8006934 <_printf_i+0x148>
 80069ba:	6833      	ldr	r3, [r6, #0]
 80069bc:	1d1a      	adds	r2, r3, #4
 80069be:	6032      	str	r2, [r6, #0]
 80069c0:	681e      	ldr	r6, [r3, #0]
 80069c2:	6862      	ldr	r2, [r4, #4]
 80069c4:	2100      	movs	r1, #0
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7f9 fc02 	bl	80001d0 <memchr>
 80069cc:	b108      	cbz	r0, 80069d2 <_printf_i+0x1e6>
 80069ce:	1b80      	subs	r0, r0, r6
 80069d0:	6060      	str	r0, [r4, #4]
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	2300      	movs	r3, #0
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069dc:	e7aa      	b.n	8006934 <_printf_i+0x148>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	4632      	mov	r2, r6
 80069e2:	4649      	mov	r1, r9
 80069e4:	4640      	mov	r0, r8
 80069e6:	47d0      	blx	sl
 80069e8:	3001      	adds	r0, #1
 80069ea:	d0ad      	beq.n	8006948 <_printf_i+0x15c>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	079b      	lsls	r3, r3, #30
 80069f0:	d413      	bmi.n	8006a1a <_printf_i+0x22e>
 80069f2:	68e0      	ldr	r0, [r4, #12]
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	4298      	cmp	r0, r3
 80069f8:	bfb8      	it	lt
 80069fa:	4618      	movlt	r0, r3
 80069fc:	e7a6      	b.n	800694c <_printf_i+0x160>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4632      	mov	r2, r6
 8006a02:	4649      	mov	r1, r9
 8006a04:	4640      	mov	r0, r8
 8006a06:	47d0      	blx	sl
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d09d      	beq.n	8006948 <_printf_i+0x15c>
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	9903      	ldr	r1, [sp, #12]
 8006a12:	1a5b      	subs	r3, r3, r1
 8006a14:	42ab      	cmp	r3, r5
 8006a16:	dcf2      	bgt.n	80069fe <_printf_i+0x212>
 8006a18:	e7eb      	b.n	80069f2 <_printf_i+0x206>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	f104 0619 	add.w	r6, r4, #25
 8006a20:	e7f5      	b.n	8006a0e <_printf_i+0x222>
 8006a22:	bf00      	nop
 8006a24:	08008b46 	.word	0x08008b46
 8006a28:	08008b57 	.word	0x08008b57

08006a2c <std>:
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	b510      	push	{r4, lr}
 8006a30:	4604      	mov	r4, r0
 8006a32:	e9c0 3300 	strd	r3, r3, [r0]
 8006a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a3a:	6083      	str	r3, [r0, #8]
 8006a3c:	8181      	strh	r1, [r0, #12]
 8006a3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a40:	81c2      	strh	r2, [r0, #14]
 8006a42:	6183      	str	r3, [r0, #24]
 8006a44:	4619      	mov	r1, r3
 8006a46:	2208      	movs	r2, #8
 8006a48:	305c      	adds	r0, #92	@ 0x5c
 8006a4a:	f000 f8f4 	bl	8006c36 <memset>
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <std+0x58>)
 8006a50:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <std+0x5c>)
 8006a54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <std+0x60>)
 8006a58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x64>)
 8006a5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x68>)
 8006a60:	6224      	str	r4, [r4, #32]
 8006a62:	429c      	cmp	r4, r3
 8006a64:	d006      	beq.n	8006a74 <std+0x48>
 8006a66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a6a:	4294      	cmp	r4, r2
 8006a6c:	d002      	beq.n	8006a74 <std+0x48>
 8006a6e:	33d0      	adds	r3, #208	@ 0xd0
 8006a70:	429c      	cmp	r4, r3
 8006a72:	d105      	bne.n	8006a80 <std+0x54>
 8006a74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7c:	f000 b958 	b.w	8006d30 <__retarget_lock_init_recursive>
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	08006bb1 	.word	0x08006bb1
 8006a88:	08006bd3 	.word	0x08006bd3
 8006a8c:	08006c0b 	.word	0x08006c0b
 8006a90:	08006c2f 	.word	0x08006c2f
 8006a94:	20000364 	.word	0x20000364

08006a98 <stdio_exit_handler>:
 8006a98:	4a02      	ldr	r2, [pc, #8]	@ (8006aa4 <stdio_exit_handler+0xc>)
 8006a9a:	4903      	ldr	r1, [pc, #12]	@ (8006aa8 <stdio_exit_handler+0x10>)
 8006a9c:	4803      	ldr	r0, [pc, #12]	@ (8006aac <stdio_exit_handler+0x14>)
 8006a9e:	f000 b869 	b.w	8006b74 <_fwalk_sglue>
 8006aa2:	bf00      	nop
 8006aa4:	20000018 	.word	0x20000018
 8006aa8:	080083dd 	.word	0x080083dd
 8006aac:	20000028 	.word	0x20000028

08006ab0 <cleanup_stdio>:
 8006ab0:	6841      	ldr	r1, [r0, #4]
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <cleanup_stdio+0x34>)
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	d001      	beq.n	8006ac0 <cleanup_stdio+0x10>
 8006abc:	f001 fc8e 	bl	80083dc <_fflush_r>
 8006ac0:	68a1      	ldr	r1, [r4, #8]
 8006ac2:	4b09      	ldr	r3, [pc, #36]	@ (8006ae8 <cleanup_stdio+0x38>)
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	d002      	beq.n	8006ace <cleanup_stdio+0x1e>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f001 fc87 	bl	80083dc <_fflush_r>
 8006ace:	68e1      	ldr	r1, [r4, #12]
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <cleanup_stdio+0x3c>)
 8006ad2:	4299      	cmp	r1, r3
 8006ad4:	d004      	beq.n	8006ae0 <cleanup_stdio+0x30>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f001 bc7e 	b.w	80083dc <_fflush_r>
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000364 	.word	0x20000364
 8006ae8:	200003cc 	.word	0x200003cc
 8006aec:	20000434 	.word	0x20000434

08006af0 <global_stdio_init.part.0>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <global_stdio_init.part.0+0x30>)
 8006af4:	4c0b      	ldr	r4, [pc, #44]	@ (8006b24 <global_stdio_init.part.0+0x34>)
 8006af6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b28 <global_stdio_init.part.0+0x38>)
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	4620      	mov	r0, r4
 8006afc:	2200      	movs	r2, #0
 8006afe:	2104      	movs	r1, #4
 8006b00:	f7ff ff94 	bl	8006a2c <std>
 8006b04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b08:	2201      	movs	r2, #1
 8006b0a:	2109      	movs	r1, #9
 8006b0c:	f7ff ff8e 	bl	8006a2c <std>
 8006b10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b14:	2202      	movs	r2, #2
 8006b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b1a:	2112      	movs	r1, #18
 8006b1c:	f7ff bf86 	b.w	8006a2c <std>
 8006b20:	2000049c 	.word	0x2000049c
 8006b24:	20000364 	.word	0x20000364
 8006b28:	08006a99 	.word	0x08006a99

08006b2c <__sfp_lock_acquire>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	@ (8006b34 <__sfp_lock_acquire+0x8>)
 8006b2e:	f000 b900 	b.w	8006d32 <__retarget_lock_acquire_recursive>
 8006b32:	bf00      	nop
 8006b34:	200004a5 	.word	0x200004a5

08006b38 <__sfp_lock_release>:
 8006b38:	4801      	ldr	r0, [pc, #4]	@ (8006b40 <__sfp_lock_release+0x8>)
 8006b3a:	f000 b8fb 	b.w	8006d34 <__retarget_lock_release_recursive>
 8006b3e:	bf00      	nop
 8006b40:	200004a5 	.word	0x200004a5

08006b44 <__sinit>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	4604      	mov	r4, r0
 8006b48:	f7ff fff0 	bl	8006b2c <__sfp_lock_acquire>
 8006b4c:	6a23      	ldr	r3, [r4, #32]
 8006b4e:	b11b      	cbz	r3, 8006b58 <__sinit+0x14>
 8006b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b54:	f7ff bff0 	b.w	8006b38 <__sfp_lock_release>
 8006b58:	4b04      	ldr	r3, [pc, #16]	@ (8006b6c <__sinit+0x28>)
 8006b5a:	6223      	str	r3, [r4, #32]
 8006b5c:	4b04      	ldr	r3, [pc, #16]	@ (8006b70 <__sinit+0x2c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1f5      	bne.n	8006b50 <__sinit+0xc>
 8006b64:	f7ff ffc4 	bl	8006af0 <global_stdio_init.part.0>
 8006b68:	e7f2      	b.n	8006b50 <__sinit+0xc>
 8006b6a:	bf00      	nop
 8006b6c:	08006ab1 	.word	0x08006ab1
 8006b70:	2000049c 	.word	0x2000049c

08006b74 <_fwalk_sglue>:
 8006b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b78:	4607      	mov	r7, r0
 8006b7a:	4688      	mov	r8, r1
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	2600      	movs	r6, #0
 8006b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b84:	f1b9 0901 	subs.w	r9, r9, #1
 8006b88:	d505      	bpl.n	8006b96 <_fwalk_sglue+0x22>
 8006b8a:	6824      	ldr	r4, [r4, #0]
 8006b8c:	2c00      	cmp	r4, #0
 8006b8e:	d1f7      	bne.n	8006b80 <_fwalk_sglue+0xc>
 8006b90:	4630      	mov	r0, r6
 8006b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b96:	89ab      	ldrh	r3, [r5, #12]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d907      	bls.n	8006bac <_fwalk_sglue+0x38>
 8006b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	d003      	beq.n	8006bac <_fwalk_sglue+0x38>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	47c0      	blx	r8
 8006baa:	4306      	orrs	r6, r0
 8006bac:	3568      	adds	r5, #104	@ 0x68
 8006bae:	e7e9      	b.n	8006b84 <_fwalk_sglue+0x10>

08006bb0 <__sread>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb8:	f000 f86c 	bl	8006c94 <_read_r>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	bfab      	itete	ge
 8006bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc4:	181b      	addge	r3, r3, r0
 8006bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bca:	bfac      	ite	ge
 8006bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bce:	81a3      	strhlt	r3, [r4, #12]
 8006bd0:	bd10      	pop	{r4, pc}

08006bd2 <__swrite>:
 8006bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd6:	461f      	mov	r7, r3
 8006bd8:	898b      	ldrh	r3, [r1, #12]
 8006bda:	05db      	lsls	r3, r3, #23
 8006bdc:	4605      	mov	r5, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	4616      	mov	r6, r2
 8006be2:	d505      	bpl.n	8006bf0 <__swrite+0x1e>
 8006be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be8:	2302      	movs	r3, #2
 8006bea:	2200      	movs	r2, #0
 8006bec:	f000 f840 	bl	8006c70 <_lseek_r>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	463b      	mov	r3, r7
 8006c00:	4628      	mov	r0, r5
 8006c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c06:	f000 b857 	b.w	8006cb8 <_write_r>

08006c0a <__sseek>:
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c12:	f000 f82d 	bl	8006c70 <_lseek_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	bf15      	itete	ne
 8006c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c26:	81a3      	strheq	r3, [r4, #12]
 8006c28:	bf18      	it	ne
 8006c2a:	81a3      	strhne	r3, [r4, #12]
 8006c2c:	bd10      	pop	{r4, pc}

08006c2e <__sclose>:
 8006c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c32:	f000 b80d 	b.w	8006c50 <_close_r>

08006c36 <memset>:
 8006c36:	4402      	add	r2, r0
 8006c38:	4603      	mov	r3, r0
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d100      	bne.n	8006c40 <memset+0xa>
 8006c3e:	4770      	bx	lr
 8006c40:	f803 1b01 	strb.w	r1, [r3], #1
 8006c44:	e7f9      	b.n	8006c3a <memset+0x4>
	...

08006c48 <_localeconv_r>:
 8006c48:	4800      	ldr	r0, [pc, #0]	@ (8006c4c <_localeconv_r+0x4>)
 8006c4a:	4770      	bx	lr
 8006c4c:	20000164 	.word	0x20000164

08006c50 <_close_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4d06      	ldr	r5, [pc, #24]	@ (8006c6c <_close_r+0x1c>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	f7fa ff02 	bl	8001a64 <_close>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_close_r+0x1a>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_close_r+0x1a>
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	200004a0 	.word	0x200004a0

08006c70 <_lseek_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d07      	ldr	r5, [pc, #28]	@ (8006c90 <_lseek_r+0x20>)
 8006c74:	4604      	mov	r4, r0
 8006c76:	4608      	mov	r0, r1
 8006c78:	4611      	mov	r1, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	602a      	str	r2, [r5, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f7fa ff17 	bl	8001ab2 <_lseek>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_lseek_r+0x1e>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_lseek_r+0x1e>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	200004a0 	.word	0x200004a0

08006c94 <_read_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	@ (8006cb4 <_read_r+0x20>)
 8006c98:	4604      	mov	r4, r0
 8006c9a:	4608      	mov	r0, r1
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	602a      	str	r2, [r5, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f7fa fea5 	bl	80019f2 <_read>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_read_r+0x1e>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_read_r+0x1e>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	200004a0 	.word	0x200004a0

08006cb8 <_write_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	@ (8006cd8 <_write_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fa feb0 	bl	8001a2c <_write>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_write_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_write_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	200004a0 	.word	0x200004a0

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	@ (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000024 	.word	0x20000024

08006ce8 <__libc_init_array>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4d0d      	ldr	r5, [pc, #52]	@ (8006d20 <__libc_init_array+0x38>)
 8006cec:	4c0d      	ldr	r4, [pc, #52]	@ (8006d24 <__libc_init_array+0x3c>)
 8006cee:	1b64      	subs	r4, r4, r5
 8006cf0:	10a4      	asrs	r4, r4, #2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	42a6      	cmp	r6, r4
 8006cf6:	d109      	bne.n	8006d0c <__libc_init_array+0x24>
 8006cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8006d28 <__libc_init_array+0x40>)
 8006cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8006d2c <__libc_init_array+0x44>)
 8006cfc:	f001 febc 	bl	8008a78 <_init>
 8006d00:	1b64      	subs	r4, r4, r5
 8006d02:	10a4      	asrs	r4, r4, #2
 8006d04:	2600      	movs	r6, #0
 8006d06:	42a6      	cmp	r6, r4
 8006d08:	d105      	bne.n	8006d16 <__libc_init_array+0x2e>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d10:	4798      	blx	r3
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7ee      	b.n	8006cf4 <__libc_init_array+0xc>
 8006d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1a:	4798      	blx	r3
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	e7f2      	b.n	8006d06 <__libc_init_array+0x1e>
 8006d20:	08008eb0 	.word	0x08008eb0
 8006d24:	08008eb0 	.word	0x08008eb0
 8006d28:	08008eb0 	.word	0x08008eb0
 8006d2c:	08008eb4 	.word	0x08008eb4

08006d30 <__retarget_lock_init_recursive>:
 8006d30:	4770      	bx	lr

08006d32 <__retarget_lock_acquire_recursive>:
 8006d32:	4770      	bx	lr

08006d34 <__retarget_lock_release_recursive>:
 8006d34:	4770      	bx	lr

08006d36 <quorem>:
 8006d36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	6903      	ldr	r3, [r0, #16]
 8006d3c:	690c      	ldr	r4, [r1, #16]
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	4607      	mov	r7, r0
 8006d42:	db7e      	blt.n	8006e42 <quorem+0x10c>
 8006d44:	3c01      	subs	r4, #1
 8006d46:	f101 0814 	add.w	r8, r1, #20
 8006d4a:	00a3      	lsls	r3, r4, #2
 8006d4c:	f100 0514 	add.w	r5, r0, #20
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d60:	3301      	adds	r3, #1
 8006d62:	429a      	cmp	r2, r3
 8006d64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d68:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d6c:	d32e      	bcc.n	8006dcc <quorem+0x96>
 8006d6e:	f04f 0a00 	mov.w	sl, #0
 8006d72:	46c4      	mov	ip, r8
 8006d74:	46ae      	mov	lr, r5
 8006d76:	46d3      	mov	fp, sl
 8006d78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d7c:	b298      	uxth	r0, r3
 8006d7e:	fb06 a000 	mla	r0, r6, r0, sl
 8006d82:	0c02      	lsrs	r2, r0, #16
 8006d84:	0c1b      	lsrs	r3, r3, #16
 8006d86:	fb06 2303 	mla	r3, r6, r3, r2
 8006d8a:	f8de 2000 	ldr.w	r2, [lr]
 8006d8e:	b280      	uxth	r0, r0
 8006d90:	b292      	uxth	r2, r2
 8006d92:	1a12      	subs	r2, r2, r0
 8006d94:	445a      	add	r2, fp
 8006d96:	f8de 0000 	ldr.w	r0, [lr]
 8006d9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006da4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006da8:	b292      	uxth	r2, r2
 8006daa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dae:	45e1      	cmp	r9, ip
 8006db0:	f84e 2b04 	str.w	r2, [lr], #4
 8006db4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006db8:	d2de      	bcs.n	8006d78 <quorem+0x42>
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	58eb      	ldr	r3, [r5, r3]
 8006dbe:	b92b      	cbnz	r3, 8006dcc <quorem+0x96>
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	3b04      	subs	r3, #4
 8006dc4:	429d      	cmp	r5, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	d32f      	bcc.n	8006e2a <quorem+0xf4>
 8006dca:	613c      	str	r4, [r7, #16]
 8006dcc:	4638      	mov	r0, r7
 8006dce:	f001 f979 	bl	80080c4 <__mcmp>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	db25      	blt.n	8006e22 <quorem+0xec>
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dde:	f8d1 c000 	ldr.w	ip, [r1]
 8006de2:	fa1f fe82 	uxth.w	lr, r2
 8006de6:	fa1f f38c 	uxth.w	r3, ip
 8006dea:	eba3 030e 	sub.w	r3, r3, lr
 8006dee:	4403      	add	r3, r0
 8006df0:	0c12      	lsrs	r2, r2, #16
 8006df2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006df6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e00:	45c1      	cmp	r9, r8
 8006e02:	f841 3b04 	str.w	r3, [r1], #4
 8006e06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e0a:	d2e6      	bcs.n	8006dda <quorem+0xa4>
 8006e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e14:	b922      	cbnz	r2, 8006e20 <quorem+0xea>
 8006e16:	3b04      	subs	r3, #4
 8006e18:	429d      	cmp	r5, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	d30b      	bcc.n	8006e36 <quorem+0x100>
 8006e1e:	613c      	str	r4, [r7, #16]
 8006e20:	3601      	adds	r6, #1
 8006e22:	4630      	mov	r0, r6
 8006e24:	b003      	add	sp, #12
 8006e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	3b04      	subs	r3, #4
 8006e2e:	2a00      	cmp	r2, #0
 8006e30:	d1cb      	bne.n	8006dca <quorem+0x94>
 8006e32:	3c01      	subs	r4, #1
 8006e34:	e7c6      	b.n	8006dc4 <quorem+0x8e>
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	d1ef      	bne.n	8006e1e <quorem+0xe8>
 8006e3e:	3c01      	subs	r4, #1
 8006e40:	e7ea      	b.n	8006e18 <quorem+0xe2>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e7ee      	b.n	8006e24 <quorem+0xee>
	...

08006e48 <_dtoa_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	69c7      	ldr	r7, [r0, #28]
 8006e4e:	b099      	sub	sp, #100	@ 0x64
 8006e50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e54:	ec55 4b10 	vmov	r4, r5, d0
 8006e58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e5c:	4683      	mov	fp, r0
 8006e5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e62:	b97f      	cbnz	r7, 8006e84 <_dtoa_r+0x3c>
 8006e64:	2010      	movs	r0, #16
 8006e66:	f000 fdfd 	bl	8007a64 <malloc>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e70:	b920      	cbnz	r0, 8006e7c <_dtoa_r+0x34>
 8006e72:	4ba7      	ldr	r3, [pc, #668]	@ (8007110 <_dtoa_r+0x2c8>)
 8006e74:	21ef      	movs	r1, #239	@ 0xef
 8006e76:	48a7      	ldr	r0, [pc, #668]	@ (8007114 <_dtoa_r+0x2cc>)
 8006e78:	f001 faf6 	bl	8008468 <__assert_func>
 8006e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e80:	6007      	str	r7, [r0, #0]
 8006e82:	60c7      	str	r7, [r0, #12]
 8006e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	b159      	cbz	r1, 8006ea4 <_dtoa_r+0x5c>
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	604a      	str	r2, [r1, #4]
 8006e90:	2301      	movs	r3, #1
 8006e92:	4093      	lsls	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
 8006e96:	4658      	mov	r0, fp
 8006e98:	f000 feda 	bl	8007c50 <_Bfree>
 8006e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	1e2b      	subs	r3, r5, #0
 8006ea6:	bfb9      	ittee	lt
 8006ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006eac:	9303      	strlt	r3, [sp, #12]
 8006eae:	2300      	movge	r3, #0
 8006eb0:	6033      	strge	r3, [r6, #0]
 8006eb2:	9f03      	ldr	r7, [sp, #12]
 8006eb4:	4b98      	ldr	r3, [pc, #608]	@ (8007118 <_dtoa_r+0x2d0>)
 8006eb6:	bfbc      	itt	lt
 8006eb8:	2201      	movlt	r2, #1
 8006eba:	6032      	strlt	r2, [r6, #0]
 8006ebc:	43bb      	bics	r3, r7
 8006ebe:	d112      	bne.n	8006ee6 <_dtoa_r+0x9e>
 8006ec0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ecc:	4323      	orrs	r3, r4
 8006ece:	f000 854d 	beq.w	800796c <_dtoa_r+0xb24>
 8006ed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ed4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800712c <_dtoa_r+0x2e4>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 854f 	beq.w	800797c <_dtoa_r+0xb34>
 8006ede:	f10a 0303 	add.w	r3, sl, #3
 8006ee2:	f000 bd49 	b.w	8007978 <_dtoa_r+0xb30>
 8006ee6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eea:	2200      	movs	r2, #0
 8006eec:	ec51 0b17 	vmov	r0, r1, d7
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ef6:	f7f9 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006efa:	4680      	mov	r8, r0
 8006efc:	b158      	cbz	r0, 8006f16 <_dtoa_r+0xce>
 8006efe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f00:	2301      	movs	r3, #1
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f06:	b113      	cbz	r3, 8006f0e <_dtoa_r+0xc6>
 8006f08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f0a:	4b84      	ldr	r3, [pc, #528]	@ (800711c <_dtoa_r+0x2d4>)
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007130 <_dtoa_r+0x2e8>
 8006f12:	f000 bd33 	b.w	800797c <_dtoa_r+0xb34>
 8006f16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f1a:	aa16      	add	r2, sp, #88	@ 0x58
 8006f1c:	a917      	add	r1, sp, #92	@ 0x5c
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f001 f980 	bl	8008224 <__d2b>
 8006f24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f28:	4681      	mov	r9, r0
 8006f2a:	2e00      	cmp	r6, #0
 8006f2c:	d077      	beq.n	800701e <_dtoa_r+0x1d6>
 8006f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f48:	4619      	mov	r1, r3
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4b74      	ldr	r3, [pc, #464]	@ (8007120 <_dtoa_r+0x2d8>)
 8006f4e:	f7f9 f99b 	bl	8000288 <__aeabi_dsub>
 8006f52:	a369      	add	r3, pc, #420	@ (adr r3, 80070f8 <_dtoa_r+0x2b0>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	f7f9 fb4e 	bl	80005f8 <__aeabi_dmul>
 8006f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8007100 <_dtoa_r+0x2b8>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f7f9 f993 	bl	800028c <__adddf3>
 8006f66:	4604      	mov	r4, r0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	f7f9 fada 	bl	8000524 <__aeabi_i2d>
 8006f70:	a365      	add	r3, pc, #404	@ (adr r3, 8007108 <_dtoa_r+0x2c0>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 fb3f 	bl	80005f8 <__aeabi_dmul>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 f983 	bl	800028c <__adddf3>
 8006f86:	4604      	mov	r4, r0
 8006f88:	460d      	mov	r5, r1
 8006f8a:	f7f9 fde5 	bl	8000b58 <__aeabi_d2iz>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4607      	mov	r7, r0
 8006f92:	2300      	movs	r3, #0
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fda0 	bl	8000adc <__aeabi_dcmplt>
 8006f9c:	b140      	cbz	r0, 8006fb0 <_dtoa_r+0x168>
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7f9 fac0 	bl	8000524 <__aeabi_i2d>
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	f7f9 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fac:	b900      	cbnz	r0, 8006fb0 <_dtoa_r+0x168>
 8006fae:	3f01      	subs	r7, #1
 8006fb0:	2f16      	cmp	r7, #22
 8006fb2:	d851      	bhi.n	8007058 <_dtoa_r+0x210>
 8006fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8007124 <_dtoa_r+0x2dc>)
 8006fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc2:	f7f9 fd8b 	bl	8000adc <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d048      	beq.n	800705c <_dtoa_r+0x214>
 8006fca:	3f01      	subs	r7, #1
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9312      	str	r3, [sp, #72]	@ 0x48
 8006fd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fd2:	1b9b      	subs	r3, r3, r6
 8006fd4:	1e5a      	subs	r2, r3, #1
 8006fd6:	bf44      	itt	mi
 8006fd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006fdc:	2300      	movmi	r3, #0
 8006fde:	9208      	str	r2, [sp, #32]
 8006fe0:	bf54      	ite	pl
 8006fe2:	f04f 0800 	movpl.w	r8, #0
 8006fe6:	9308      	strmi	r3, [sp, #32]
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	db39      	blt.n	8007060 <_dtoa_r+0x218>
 8006fec:	9b08      	ldr	r3, [sp, #32]
 8006fee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ff0:	443b      	add	r3, r7
 8006ff2:	9308      	str	r3, [sp, #32]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffa:	2b09      	cmp	r3, #9
 8006ffc:	d864      	bhi.n	80070c8 <_dtoa_r+0x280>
 8006ffe:	2b05      	cmp	r3, #5
 8007000:	bfc4      	itt	gt
 8007002:	3b04      	subgt	r3, #4
 8007004:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007008:	f1a3 0302 	sub.w	r3, r3, #2
 800700c:	bfcc      	ite	gt
 800700e:	2400      	movgt	r4, #0
 8007010:	2401      	movle	r4, #1
 8007012:	2b03      	cmp	r3, #3
 8007014:	d863      	bhi.n	80070de <_dtoa_r+0x296>
 8007016:	e8df f003 	tbb	[pc, r3]
 800701a:	372a      	.short	0x372a
 800701c:	5535      	.short	0x5535
 800701e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007022:	441e      	add	r6, r3
 8007024:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007028:	2b20      	cmp	r3, #32
 800702a:	bfc1      	itttt	gt
 800702c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007030:	409f      	lslgt	r7, r3
 8007032:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007036:	fa24 f303 	lsrgt.w	r3, r4, r3
 800703a:	bfd6      	itet	le
 800703c:	f1c3 0320 	rsble	r3, r3, #32
 8007040:	ea47 0003 	orrgt.w	r0, r7, r3
 8007044:	fa04 f003 	lslle.w	r0, r4, r3
 8007048:	f7f9 fa5c 	bl	8000504 <__aeabi_ui2d>
 800704c:	2201      	movs	r2, #1
 800704e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007052:	3e01      	subs	r6, #1
 8007054:	9214      	str	r2, [sp, #80]	@ 0x50
 8007056:	e777      	b.n	8006f48 <_dtoa_r+0x100>
 8007058:	2301      	movs	r3, #1
 800705a:	e7b8      	b.n	8006fce <_dtoa_r+0x186>
 800705c:	9012      	str	r0, [sp, #72]	@ 0x48
 800705e:	e7b7      	b.n	8006fd0 <_dtoa_r+0x188>
 8007060:	427b      	negs	r3, r7
 8007062:	930a      	str	r3, [sp, #40]	@ 0x28
 8007064:	2300      	movs	r3, #0
 8007066:	eba8 0807 	sub.w	r8, r8, r7
 800706a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800706c:	e7c4      	b.n	8006ff8 <_dtoa_r+0x1b0>
 800706e:	2300      	movs	r3, #0
 8007070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	dc35      	bgt.n	80070e4 <_dtoa_r+0x29c>
 8007078:	2301      	movs	r3, #1
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	9307      	str	r3, [sp, #28]
 800707e:	461a      	mov	r2, r3
 8007080:	920e      	str	r2, [sp, #56]	@ 0x38
 8007082:	e00b      	b.n	800709c <_dtoa_r+0x254>
 8007084:	2301      	movs	r3, #1
 8007086:	e7f3      	b.n	8007070 <_dtoa_r+0x228>
 8007088:	2300      	movs	r3, #0
 800708a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800708c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	3301      	adds	r3, #1
 8007094:	2b01      	cmp	r3, #1
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	bfb8      	it	lt
 800709a:	2301      	movlt	r3, #1
 800709c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070a0:	2100      	movs	r1, #0
 80070a2:	2204      	movs	r2, #4
 80070a4:	f102 0514 	add.w	r5, r2, #20
 80070a8:	429d      	cmp	r5, r3
 80070aa:	d91f      	bls.n	80070ec <_dtoa_r+0x2a4>
 80070ac:	6041      	str	r1, [r0, #4]
 80070ae:	4658      	mov	r0, fp
 80070b0:	f000 fd8e 	bl	8007bd0 <_Balloc>
 80070b4:	4682      	mov	sl, r0
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d13c      	bne.n	8007134 <_dtoa_r+0x2ec>
 80070ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <_dtoa_r+0x2e0>)
 80070bc:	4602      	mov	r2, r0
 80070be:	f240 11af 	movw	r1, #431	@ 0x1af
 80070c2:	e6d8      	b.n	8006e76 <_dtoa_r+0x2e>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e7e0      	b.n	800708a <_dtoa_r+0x242>
 80070c8:	2401      	movs	r4, #1
 80070ca:	2300      	movs	r3, #0
 80070cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070d0:	f04f 33ff 	mov.w	r3, #4294967295
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	2312      	movs	r3, #18
 80070dc:	e7d0      	b.n	8007080 <_dtoa_r+0x238>
 80070de:	2301      	movs	r3, #1
 80070e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070e2:	e7f5      	b.n	80070d0 <_dtoa_r+0x288>
 80070e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	e7d7      	b.n	800709c <_dtoa_r+0x254>
 80070ec:	3101      	adds	r1, #1
 80070ee:	0052      	lsls	r2, r2, #1
 80070f0:	e7d8      	b.n	80070a4 <_dtoa_r+0x25c>
 80070f2:	bf00      	nop
 80070f4:	f3af 8000 	nop.w
 80070f8:	636f4361 	.word	0x636f4361
 80070fc:	3fd287a7 	.word	0x3fd287a7
 8007100:	8b60c8b3 	.word	0x8b60c8b3
 8007104:	3fc68a28 	.word	0x3fc68a28
 8007108:	509f79fb 	.word	0x509f79fb
 800710c:	3fd34413 	.word	0x3fd34413
 8007110:	08008b75 	.word	0x08008b75
 8007114:	08008b8c 	.word	0x08008b8c
 8007118:	7ff00000 	.word	0x7ff00000
 800711c:	08008b45 	.word	0x08008b45
 8007120:	3ff80000 	.word	0x3ff80000
 8007124:	08008c88 	.word	0x08008c88
 8007128:	08008be4 	.word	0x08008be4
 800712c:	08008b71 	.word	0x08008b71
 8007130:	08008b44 	.word	0x08008b44
 8007134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007138:	6018      	str	r0, [r3, #0]
 800713a:	9b07      	ldr	r3, [sp, #28]
 800713c:	2b0e      	cmp	r3, #14
 800713e:	f200 80a4 	bhi.w	800728a <_dtoa_r+0x442>
 8007142:	2c00      	cmp	r4, #0
 8007144:	f000 80a1 	beq.w	800728a <_dtoa_r+0x442>
 8007148:	2f00      	cmp	r7, #0
 800714a:	dd33      	ble.n	80071b4 <_dtoa_r+0x36c>
 800714c:	4bad      	ldr	r3, [pc, #692]	@ (8007404 <_dtoa_r+0x5bc>)
 800714e:	f007 020f 	and.w	r2, r7, #15
 8007152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007156:	ed93 7b00 	vldr	d7, [r3]
 800715a:	05f8      	lsls	r0, r7, #23
 800715c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007164:	d516      	bpl.n	8007194 <_dtoa_r+0x34c>
 8007166:	4ba8      	ldr	r3, [pc, #672]	@ (8007408 <_dtoa_r+0x5c0>)
 8007168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800716c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007170:	f7f9 fb6c 	bl	800084c <__aeabi_ddiv>
 8007174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007178:	f004 040f 	and.w	r4, r4, #15
 800717c:	2603      	movs	r6, #3
 800717e:	4da2      	ldr	r5, [pc, #648]	@ (8007408 <_dtoa_r+0x5c0>)
 8007180:	b954      	cbnz	r4, 8007198 <_dtoa_r+0x350>
 8007182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800718a:	f7f9 fb5f 	bl	800084c <__aeabi_ddiv>
 800718e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007192:	e028      	b.n	80071e6 <_dtoa_r+0x39e>
 8007194:	2602      	movs	r6, #2
 8007196:	e7f2      	b.n	800717e <_dtoa_r+0x336>
 8007198:	07e1      	lsls	r1, r4, #31
 800719a:	d508      	bpl.n	80071ae <_dtoa_r+0x366>
 800719c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071a4:	f7f9 fa28 	bl	80005f8 <__aeabi_dmul>
 80071a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ac:	3601      	adds	r6, #1
 80071ae:	1064      	asrs	r4, r4, #1
 80071b0:	3508      	adds	r5, #8
 80071b2:	e7e5      	b.n	8007180 <_dtoa_r+0x338>
 80071b4:	f000 80d2 	beq.w	800735c <_dtoa_r+0x514>
 80071b8:	427c      	negs	r4, r7
 80071ba:	4b92      	ldr	r3, [pc, #584]	@ (8007404 <_dtoa_r+0x5bc>)
 80071bc:	4d92      	ldr	r5, [pc, #584]	@ (8007408 <_dtoa_r+0x5c0>)
 80071be:	f004 020f 	and.w	r2, r4, #15
 80071c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071ce:	f7f9 fa13 	bl	80005f8 <__aeabi_dmul>
 80071d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d6:	1124      	asrs	r4, r4, #4
 80071d8:	2300      	movs	r3, #0
 80071da:	2602      	movs	r6, #2
 80071dc:	2c00      	cmp	r4, #0
 80071de:	f040 80b2 	bne.w	8007346 <_dtoa_r+0x4fe>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1d3      	bne.n	800718e <_dtoa_r+0x346>
 80071e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80b7 	beq.w	8007360 <_dtoa_r+0x518>
 80071f2:	4b86      	ldr	r3, [pc, #536]	@ (800740c <_dtoa_r+0x5c4>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	4620      	mov	r0, r4
 80071f8:	4629      	mov	r1, r5
 80071fa:	f7f9 fc6f 	bl	8000adc <__aeabi_dcmplt>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f000 80ae 	beq.w	8007360 <_dtoa_r+0x518>
 8007204:	9b07      	ldr	r3, [sp, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 80aa 	beq.w	8007360 <_dtoa_r+0x518>
 800720c:	9b00      	ldr	r3, [sp, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	dd37      	ble.n	8007282 <_dtoa_r+0x43a>
 8007212:	1e7b      	subs	r3, r7, #1
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	4620      	mov	r0, r4
 8007218:	4b7d      	ldr	r3, [pc, #500]	@ (8007410 <_dtoa_r+0x5c8>)
 800721a:	2200      	movs	r2, #0
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 f9eb 	bl	80005f8 <__aeabi_dmul>
 8007222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007226:	9c00      	ldr	r4, [sp, #0]
 8007228:	3601      	adds	r6, #1
 800722a:	4630      	mov	r0, r6
 800722c:	f7f9 f97a 	bl	8000524 <__aeabi_i2d>
 8007230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007234:	f7f9 f9e0 	bl	80005f8 <__aeabi_dmul>
 8007238:	4b76      	ldr	r3, [pc, #472]	@ (8007414 <_dtoa_r+0x5cc>)
 800723a:	2200      	movs	r2, #0
 800723c:	f7f9 f826 	bl	800028c <__adddf3>
 8007240:	4605      	mov	r5, r0
 8007242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007246:	2c00      	cmp	r4, #0
 8007248:	f040 808d 	bne.w	8007366 <_dtoa_r+0x51e>
 800724c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007250:	4b71      	ldr	r3, [pc, #452]	@ (8007418 <_dtoa_r+0x5d0>)
 8007252:	2200      	movs	r2, #0
 8007254:	f7f9 f818 	bl	8000288 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007260:	462a      	mov	r2, r5
 8007262:	4633      	mov	r3, r6
 8007264:	f7f9 fc58 	bl	8000b18 <__aeabi_dcmpgt>
 8007268:	2800      	cmp	r0, #0
 800726a:	f040 828b 	bne.w	8007784 <_dtoa_r+0x93c>
 800726e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007272:	462a      	mov	r2, r5
 8007274:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007278:	f7f9 fc30 	bl	8000adc <__aeabi_dcmplt>
 800727c:	2800      	cmp	r0, #0
 800727e:	f040 8128 	bne.w	80074d2 <_dtoa_r+0x68a>
 8007282:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007286:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800728a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800728c:	2b00      	cmp	r3, #0
 800728e:	f2c0 815a 	blt.w	8007546 <_dtoa_r+0x6fe>
 8007292:	2f0e      	cmp	r7, #14
 8007294:	f300 8157 	bgt.w	8007546 <_dtoa_r+0x6fe>
 8007298:	4b5a      	ldr	r3, [pc, #360]	@ (8007404 <_dtoa_r+0x5bc>)
 800729a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800729e:	ed93 7b00 	vldr	d7, [r3]
 80072a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	ed8d 7b00 	vstr	d7, [sp]
 80072aa:	da03      	bge.n	80072b4 <_dtoa_r+0x46c>
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f340 8101 	ble.w	80074b6 <_dtoa_r+0x66e>
 80072b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072b8:	4656      	mov	r6, sl
 80072ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f9 fac3 	bl	800084c <__aeabi_ddiv>
 80072c6:	f7f9 fc47 	bl	8000b58 <__aeabi_d2iz>
 80072ca:	4680      	mov	r8, r0
 80072cc:	f7f9 f92a 	bl	8000524 <__aeabi_i2d>
 80072d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072d4:	f7f9 f990 	bl	80005f8 <__aeabi_dmul>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072e4:	f7f8 ffd0 	bl	8000288 <__aeabi_dsub>
 80072e8:	f806 4b01 	strb.w	r4, [r6], #1
 80072ec:	9d07      	ldr	r5, [sp, #28]
 80072ee:	eba6 040a 	sub.w	r4, r6, sl
 80072f2:	42a5      	cmp	r5, r4
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	f040 8117 	bne.w	800752a <_dtoa_r+0x6e2>
 80072fc:	f7f8 ffc6 	bl	800028c <__adddf3>
 8007300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007304:	4604      	mov	r4, r0
 8007306:	460d      	mov	r5, r1
 8007308:	f7f9 fc06 	bl	8000b18 <__aeabi_dcmpgt>
 800730c:	2800      	cmp	r0, #0
 800730e:	f040 80f9 	bne.w	8007504 <_dtoa_r+0x6bc>
 8007312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f9 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800731e:	b118      	cbz	r0, 8007328 <_dtoa_r+0x4e0>
 8007320:	f018 0f01 	tst.w	r8, #1
 8007324:	f040 80ee 	bne.w	8007504 <_dtoa_r+0x6bc>
 8007328:	4649      	mov	r1, r9
 800732a:	4658      	mov	r0, fp
 800732c:	f000 fc90 	bl	8007c50 <_Bfree>
 8007330:	2300      	movs	r3, #0
 8007332:	7033      	strb	r3, [r6, #0]
 8007334:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007336:	3701      	adds	r7, #1
 8007338:	601f      	str	r7, [r3, #0]
 800733a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 831d 	beq.w	800797c <_dtoa_r+0xb34>
 8007342:	601e      	str	r6, [r3, #0]
 8007344:	e31a      	b.n	800797c <_dtoa_r+0xb34>
 8007346:	07e2      	lsls	r2, r4, #31
 8007348:	d505      	bpl.n	8007356 <_dtoa_r+0x50e>
 800734a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800734e:	f7f9 f953 	bl	80005f8 <__aeabi_dmul>
 8007352:	3601      	adds	r6, #1
 8007354:	2301      	movs	r3, #1
 8007356:	1064      	asrs	r4, r4, #1
 8007358:	3508      	adds	r5, #8
 800735a:	e73f      	b.n	80071dc <_dtoa_r+0x394>
 800735c:	2602      	movs	r6, #2
 800735e:	e742      	b.n	80071e6 <_dtoa_r+0x39e>
 8007360:	9c07      	ldr	r4, [sp, #28]
 8007362:	9704      	str	r7, [sp, #16]
 8007364:	e761      	b.n	800722a <_dtoa_r+0x3e2>
 8007366:	4b27      	ldr	r3, [pc, #156]	@ (8007404 <_dtoa_r+0x5bc>)
 8007368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800736a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800736e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007372:	4454      	add	r4, sl
 8007374:	2900      	cmp	r1, #0
 8007376:	d053      	beq.n	8007420 <_dtoa_r+0x5d8>
 8007378:	4928      	ldr	r1, [pc, #160]	@ (800741c <_dtoa_r+0x5d4>)
 800737a:	2000      	movs	r0, #0
 800737c:	f7f9 fa66 	bl	800084c <__aeabi_ddiv>
 8007380:	4633      	mov	r3, r6
 8007382:	462a      	mov	r2, r5
 8007384:	f7f8 ff80 	bl	8000288 <__aeabi_dsub>
 8007388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800738c:	4656      	mov	r6, sl
 800738e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007392:	f7f9 fbe1 	bl	8000b58 <__aeabi_d2iz>
 8007396:	4605      	mov	r5, r0
 8007398:	f7f9 f8c4 	bl	8000524 <__aeabi_i2d>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a4:	f7f8 ff70 	bl	8000288 <__aeabi_dsub>
 80073a8:	3530      	adds	r5, #48	@ 0x30
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073b2:	f806 5b01 	strb.w	r5, [r6], #1
 80073b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073ba:	f7f9 fb8f 	bl	8000adc <__aeabi_dcmplt>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d171      	bne.n	80074a6 <_dtoa_r+0x65e>
 80073c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073c6:	4911      	ldr	r1, [pc, #68]	@ (800740c <_dtoa_r+0x5c4>)
 80073c8:	2000      	movs	r0, #0
 80073ca:	f7f8 ff5d 	bl	8000288 <__aeabi_dsub>
 80073ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073d2:	f7f9 fb83 	bl	8000adc <__aeabi_dcmplt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f040 8095 	bne.w	8007506 <_dtoa_r+0x6be>
 80073dc:	42a6      	cmp	r6, r4
 80073de:	f43f af50 	beq.w	8007282 <_dtoa_r+0x43a>
 80073e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007410 <_dtoa_r+0x5c8>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	f7f9 f905 	bl	80005f8 <__aeabi_dmul>
 80073ee:	4b08      	ldr	r3, [pc, #32]	@ (8007410 <_dtoa_r+0x5c8>)
 80073f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073f4:	2200      	movs	r2, #0
 80073f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fa:	f7f9 f8fd 	bl	80005f8 <__aeabi_dmul>
 80073fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007402:	e7c4      	b.n	800738e <_dtoa_r+0x546>
 8007404:	08008c88 	.word	0x08008c88
 8007408:	08008c60 	.word	0x08008c60
 800740c:	3ff00000 	.word	0x3ff00000
 8007410:	40240000 	.word	0x40240000
 8007414:	401c0000 	.word	0x401c0000
 8007418:	40140000 	.word	0x40140000
 800741c:	3fe00000 	.word	0x3fe00000
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	f7f9 f8e8 	bl	80005f8 <__aeabi_dmul>
 8007428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800742c:	9415      	str	r4, [sp, #84]	@ 0x54
 800742e:	4656      	mov	r6, sl
 8007430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007434:	f7f9 fb90 	bl	8000b58 <__aeabi_d2iz>
 8007438:	4605      	mov	r5, r0
 800743a:	f7f9 f873 	bl	8000524 <__aeabi_i2d>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007446:	f7f8 ff1f 	bl	8000288 <__aeabi_dsub>
 800744a:	3530      	adds	r5, #48	@ 0x30
 800744c:	f806 5b01 	strb.w	r5, [r6], #1
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	42a6      	cmp	r6, r4
 8007456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	d124      	bne.n	80074aa <_dtoa_r+0x662>
 8007460:	4bac      	ldr	r3, [pc, #688]	@ (8007714 <_dtoa_r+0x8cc>)
 8007462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007466:	f7f8 ff11 	bl	800028c <__adddf3>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007472:	f7f9 fb51 	bl	8000b18 <__aeabi_dcmpgt>
 8007476:	2800      	cmp	r0, #0
 8007478:	d145      	bne.n	8007506 <_dtoa_r+0x6be>
 800747a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800747e:	49a5      	ldr	r1, [pc, #660]	@ (8007714 <_dtoa_r+0x8cc>)
 8007480:	2000      	movs	r0, #0
 8007482:	f7f8 ff01 	bl	8000288 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748e:	f7f9 fb25 	bl	8000adc <__aeabi_dcmplt>
 8007492:	2800      	cmp	r0, #0
 8007494:	f43f aef5 	beq.w	8007282 <_dtoa_r+0x43a>
 8007498:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800749a:	1e73      	subs	r3, r6, #1
 800749c:	9315      	str	r3, [sp, #84]	@ 0x54
 800749e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074a2:	2b30      	cmp	r3, #48	@ 0x30
 80074a4:	d0f8      	beq.n	8007498 <_dtoa_r+0x650>
 80074a6:	9f04      	ldr	r7, [sp, #16]
 80074a8:	e73e      	b.n	8007328 <_dtoa_r+0x4e0>
 80074aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007718 <_dtoa_r+0x8d0>)
 80074ac:	f7f9 f8a4 	bl	80005f8 <__aeabi_dmul>
 80074b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074b4:	e7bc      	b.n	8007430 <_dtoa_r+0x5e8>
 80074b6:	d10c      	bne.n	80074d2 <_dtoa_r+0x68a>
 80074b8:	4b98      	ldr	r3, [pc, #608]	@ (800771c <_dtoa_r+0x8d4>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c0:	f7f9 f89a 	bl	80005f8 <__aeabi_dmul>
 80074c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c8:	f7f9 fb1c 	bl	8000b04 <__aeabi_dcmpge>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f000 8157 	beq.w	8007780 <_dtoa_r+0x938>
 80074d2:	2400      	movs	r4, #0
 80074d4:	4625      	mov	r5, r4
 80074d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d8:	43db      	mvns	r3, r3
 80074da:	9304      	str	r3, [sp, #16]
 80074dc:	4656      	mov	r6, sl
 80074de:	2700      	movs	r7, #0
 80074e0:	4621      	mov	r1, r4
 80074e2:	4658      	mov	r0, fp
 80074e4:	f000 fbb4 	bl	8007c50 <_Bfree>
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	d0dc      	beq.n	80074a6 <_dtoa_r+0x65e>
 80074ec:	b12f      	cbz	r7, 80074fa <_dtoa_r+0x6b2>
 80074ee:	42af      	cmp	r7, r5
 80074f0:	d003      	beq.n	80074fa <_dtoa_r+0x6b2>
 80074f2:	4639      	mov	r1, r7
 80074f4:	4658      	mov	r0, fp
 80074f6:	f000 fbab 	bl	8007c50 <_Bfree>
 80074fa:	4629      	mov	r1, r5
 80074fc:	4658      	mov	r0, fp
 80074fe:	f000 fba7 	bl	8007c50 <_Bfree>
 8007502:	e7d0      	b.n	80074a6 <_dtoa_r+0x65e>
 8007504:	9704      	str	r7, [sp, #16]
 8007506:	4633      	mov	r3, r6
 8007508:	461e      	mov	r6, r3
 800750a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800750e:	2a39      	cmp	r2, #57	@ 0x39
 8007510:	d107      	bne.n	8007522 <_dtoa_r+0x6da>
 8007512:	459a      	cmp	sl, r3
 8007514:	d1f8      	bne.n	8007508 <_dtoa_r+0x6c0>
 8007516:	9a04      	ldr	r2, [sp, #16]
 8007518:	3201      	adds	r2, #1
 800751a:	9204      	str	r2, [sp, #16]
 800751c:	2230      	movs	r2, #48	@ 0x30
 800751e:	f88a 2000 	strb.w	r2, [sl]
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	3201      	adds	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	e7bd      	b.n	80074a6 <_dtoa_r+0x65e>
 800752a:	4b7b      	ldr	r3, [pc, #492]	@ (8007718 <_dtoa_r+0x8d0>)
 800752c:	2200      	movs	r2, #0
 800752e:	f7f9 f863 	bl	80005f8 <__aeabi_dmul>
 8007532:	2200      	movs	r2, #0
 8007534:	2300      	movs	r3, #0
 8007536:	4604      	mov	r4, r0
 8007538:	460d      	mov	r5, r1
 800753a:	f7f9 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800753e:	2800      	cmp	r0, #0
 8007540:	f43f aebb 	beq.w	80072ba <_dtoa_r+0x472>
 8007544:	e6f0      	b.n	8007328 <_dtoa_r+0x4e0>
 8007546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007548:	2a00      	cmp	r2, #0
 800754a:	f000 80db 	beq.w	8007704 <_dtoa_r+0x8bc>
 800754e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007550:	2a01      	cmp	r2, #1
 8007552:	f300 80bf 	bgt.w	80076d4 <_dtoa_r+0x88c>
 8007556:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007558:	2a00      	cmp	r2, #0
 800755a:	f000 80b7 	beq.w	80076cc <_dtoa_r+0x884>
 800755e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007562:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007564:	4646      	mov	r6, r8
 8007566:	9a08      	ldr	r2, [sp, #32]
 8007568:	2101      	movs	r1, #1
 800756a:	441a      	add	r2, r3
 800756c:	4658      	mov	r0, fp
 800756e:	4498      	add	r8, r3
 8007570:	9208      	str	r2, [sp, #32]
 8007572:	f000 fc21 	bl	8007db8 <__i2b>
 8007576:	4605      	mov	r5, r0
 8007578:	b15e      	cbz	r6, 8007592 <_dtoa_r+0x74a>
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	dd08      	ble.n	8007592 <_dtoa_r+0x74a>
 8007580:	42b3      	cmp	r3, r6
 8007582:	9a08      	ldr	r2, [sp, #32]
 8007584:	bfa8      	it	ge
 8007586:	4633      	movge	r3, r6
 8007588:	eba8 0803 	sub.w	r8, r8, r3
 800758c:	1af6      	subs	r6, r6, r3
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007594:	b1f3      	cbz	r3, 80075d4 <_dtoa_r+0x78c>
 8007596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80b7 	beq.w	800770c <_dtoa_r+0x8c4>
 800759e:	b18c      	cbz	r4, 80075c4 <_dtoa_r+0x77c>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4622      	mov	r2, r4
 80075a4:	4658      	mov	r0, fp
 80075a6:	f000 fcc7 	bl	8007f38 <__pow5mult>
 80075aa:	464a      	mov	r2, r9
 80075ac:	4601      	mov	r1, r0
 80075ae:	4605      	mov	r5, r0
 80075b0:	4658      	mov	r0, fp
 80075b2:	f000 fc17 	bl	8007de4 <__multiply>
 80075b6:	4649      	mov	r1, r9
 80075b8:	9004      	str	r0, [sp, #16]
 80075ba:	4658      	mov	r0, fp
 80075bc:	f000 fb48 	bl	8007c50 <_Bfree>
 80075c0:	9b04      	ldr	r3, [sp, #16]
 80075c2:	4699      	mov	r9, r3
 80075c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075c6:	1b1a      	subs	r2, r3, r4
 80075c8:	d004      	beq.n	80075d4 <_dtoa_r+0x78c>
 80075ca:	4649      	mov	r1, r9
 80075cc:	4658      	mov	r0, fp
 80075ce:	f000 fcb3 	bl	8007f38 <__pow5mult>
 80075d2:	4681      	mov	r9, r0
 80075d4:	2101      	movs	r1, #1
 80075d6:	4658      	mov	r0, fp
 80075d8:	f000 fbee 	bl	8007db8 <__i2b>
 80075dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075de:	4604      	mov	r4, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 81cf 	beq.w	8007984 <_dtoa_r+0xb3c>
 80075e6:	461a      	mov	r2, r3
 80075e8:	4601      	mov	r1, r0
 80075ea:	4658      	mov	r0, fp
 80075ec:	f000 fca4 	bl	8007f38 <__pow5mult>
 80075f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	4604      	mov	r4, r0
 80075f6:	f300 8095 	bgt.w	8007724 <_dtoa_r+0x8dc>
 80075fa:	9b02      	ldr	r3, [sp, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8087 	bne.w	8007710 <_dtoa_r+0x8c8>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007608:	2b00      	cmp	r3, #0
 800760a:	f040 8089 	bne.w	8007720 <_dtoa_r+0x8d8>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007614:	0d1b      	lsrs	r3, r3, #20
 8007616:	051b      	lsls	r3, r3, #20
 8007618:	b12b      	cbz	r3, 8007626 <_dtoa_r+0x7de>
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	3301      	adds	r3, #1
 800761e:	9308      	str	r3, [sp, #32]
 8007620:	f108 0801 	add.w	r8, r8, #1
 8007624:	2301      	movs	r3, #1
 8007626:	930a      	str	r3, [sp, #40]	@ 0x28
 8007628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 81b0 	beq.w	8007990 <_dtoa_r+0xb48>
 8007630:	6923      	ldr	r3, [r4, #16]
 8007632:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007636:	6918      	ldr	r0, [r3, #16]
 8007638:	f000 fb72 	bl	8007d20 <__hi0bits>
 800763c:	f1c0 0020 	rsb	r0, r0, #32
 8007640:	9b08      	ldr	r3, [sp, #32]
 8007642:	4418      	add	r0, r3
 8007644:	f010 001f 	ands.w	r0, r0, #31
 8007648:	d077      	beq.n	800773a <_dtoa_r+0x8f2>
 800764a:	f1c0 0320 	rsb	r3, r0, #32
 800764e:	2b04      	cmp	r3, #4
 8007650:	dd6b      	ble.n	800772a <_dtoa_r+0x8e2>
 8007652:	9b08      	ldr	r3, [sp, #32]
 8007654:	f1c0 001c 	rsb	r0, r0, #28
 8007658:	4403      	add	r3, r0
 800765a:	4480      	add	r8, r0
 800765c:	4406      	add	r6, r0
 800765e:	9308      	str	r3, [sp, #32]
 8007660:	f1b8 0f00 	cmp.w	r8, #0
 8007664:	dd05      	ble.n	8007672 <_dtoa_r+0x82a>
 8007666:	4649      	mov	r1, r9
 8007668:	4642      	mov	r2, r8
 800766a:	4658      	mov	r0, fp
 800766c:	f000 fcbe 	bl	8007fec <__lshift>
 8007670:	4681      	mov	r9, r0
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	2b00      	cmp	r3, #0
 8007676:	dd05      	ble.n	8007684 <_dtoa_r+0x83c>
 8007678:	4621      	mov	r1, r4
 800767a:	461a      	mov	r2, r3
 800767c:	4658      	mov	r0, fp
 800767e:	f000 fcb5 	bl	8007fec <__lshift>
 8007682:	4604      	mov	r4, r0
 8007684:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007686:	2b00      	cmp	r3, #0
 8007688:	d059      	beq.n	800773e <_dtoa_r+0x8f6>
 800768a:	4621      	mov	r1, r4
 800768c:	4648      	mov	r0, r9
 800768e:	f000 fd19 	bl	80080c4 <__mcmp>
 8007692:	2800      	cmp	r0, #0
 8007694:	da53      	bge.n	800773e <_dtoa_r+0x8f6>
 8007696:	1e7b      	subs	r3, r7, #1
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	4649      	mov	r1, r9
 800769c:	2300      	movs	r3, #0
 800769e:	220a      	movs	r2, #10
 80076a0:	4658      	mov	r0, fp
 80076a2:	f000 faf7 	bl	8007c94 <__multadd>
 80076a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a8:	4681      	mov	r9, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 8172 	beq.w	8007994 <_dtoa_r+0xb4c>
 80076b0:	2300      	movs	r3, #0
 80076b2:	4629      	mov	r1, r5
 80076b4:	220a      	movs	r2, #10
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 faec 	bl	8007c94 <__multadd>
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	4605      	mov	r5, r0
 80076c2:	dc67      	bgt.n	8007794 <_dtoa_r+0x94c>
 80076c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	dc41      	bgt.n	800774e <_dtoa_r+0x906>
 80076ca:	e063      	b.n	8007794 <_dtoa_r+0x94c>
 80076cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076d2:	e746      	b.n	8007562 <_dtoa_r+0x71a>
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	1e5c      	subs	r4, r3, #1
 80076d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076da:	42a3      	cmp	r3, r4
 80076dc:	bfbf      	itttt	lt
 80076de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80076e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80076e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80076e4:	1ae3      	sublt	r3, r4, r3
 80076e6:	bfb4      	ite	lt
 80076e8:	18d2      	addlt	r2, r2, r3
 80076ea:	1b1c      	subge	r4, r3, r4
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	bfbc      	itt	lt
 80076f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80076f2:	2400      	movlt	r4, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfb5      	itete	lt
 80076f8:	eba8 0603 	sublt.w	r6, r8, r3
 80076fc:	9b07      	ldrge	r3, [sp, #28]
 80076fe:	2300      	movlt	r3, #0
 8007700:	4646      	movge	r6, r8
 8007702:	e730      	b.n	8007566 <_dtoa_r+0x71e>
 8007704:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007706:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007708:	4646      	mov	r6, r8
 800770a:	e735      	b.n	8007578 <_dtoa_r+0x730>
 800770c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800770e:	e75c      	b.n	80075ca <_dtoa_r+0x782>
 8007710:	2300      	movs	r3, #0
 8007712:	e788      	b.n	8007626 <_dtoa_r+0x7de>
 8007714:	3fe00000 	.word	0x3fe00000
 8007718:	40240000 	.word	0x40240000
 800771c:	40140000 	.word	0x40140000
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	e780      	b.n	8007626 <_dtoa_r+0x7de>
 8007724:	2300      	movs	r3, #0
 8007726:	930a      	str	r3, [sp, #40]	@ 0x28
 8007728:	e782      	b.n	8007630 <_dtoa_r+0x7e8>
 800772a:	d099      	beq.n	8007660 <_dtoa_r+0x818>
 800772c:	9a08      	ldr	r2, [sp, #32]
 800772e:	331c      	adds	r3, #28
 8007730:	441a      	add	r2, r3
 8007732:	4498      	add	r8, r3
 8007734:	441e      	add	r6, r3
 8007736:	9208      	str	r2, [sp, #32]
 8007738:	e792      	b.n	8007660 <_dtoa_r+0x818>
 800773a:	4603      	mov	r3, r0
 800773c:	e7f6      	b.n	800772c <_dtoa_r+0x8e4>
 800773e:	9b07      	ldr	r3, [sp, #28]
 8007740:	9704      	str	r7, [sp, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dc20      	bgt.n	8007788 <_dtoa_r+0x940>
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774a:	2b02      	cmp	r3, #2
 800774c:	dd1e      	ble.n	800778c <_dtoa_r+0x944>
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f47f aec0 	bne.w	80074d6 <_dtoa_r+0x68e>
 8007756:	4621      	mov	r1, r4
 8007758:	2205      	movs	r2, #5
 800775a:	4658      	mov	r0, fp
 800775c:	f000 fa9a 	bl	8007c94 <__multadd>
 8007760:	4601      	mov	r1, r0
 8007762:	4604      	mov	r4, r0
 8007764:	4648      	mov	r0, r9
 8007766:	f000 fcad 	bl	80080c4 <__mcmp>
 800776a:	2800      	cmp	r0, #0
 800776c:	f77f aeb3 	ble.w	80074d6 <_dtoa_r+0x68e>
 8007770:	4656      	mov	r6, sl
 8007772:	2331      	movs	r3, #49	@ 0x31
 8007774:	f806 3b01 	strb.w	r3, [r6], #1
 8007778:	9b04      	ldr	r3, [sp, #16]
 800777a:	3301      	adds	r3, #1
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	e6ae      	b.n	80074de <_dtoa_r+0x696>
 8007780:	9c07      	ldr	r4, [sp, #28]
 8007782:	9704      	str	r7, [sp, #16]
 8007784:	4625      	mov	r5, r4
 8007786:	e7f3      	b.n	8007770 <_dtoa_r+0x928>
 8007788:	9b07      	ldr	r3, [sp, #28]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8104 	beq.w	800799c <_dtoa_r+0xb54>
 8007794:	2e00      	cmp	r6, #0
 8007796:	dd05      	ble.n	80077a4 <_dtoa_r+0x95c>
 8007798:	4629      	mov	r1, r5
 800779a:	4632      	mov	r2, r6
 800779c:	4658      	mov	r0, fp
 800779e:	f000 fc25 	bl	8007fec <__lshift>
 80077a2:	4605      	mov	r5, r0
 80077a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05a      	beq.n	8007860 <_dtoa_r+0xa18>
 80077aa:	6869      	ldr	r1, [r5, #4]
 80077ac:	4658      	mov	r0, fp
 80077ae:	f000 fa0f 	bl	8007bd0 <_Balloc>
 80077b2:	4606      	mov	r6, r0
 80077b4:	b928      	cbnz	r0, 80077c2 <_dtoa_r+0x97a>
 80077b6:	4b84      	ldr	r3, [pc, #528]	@ (80079c8 <_dtoa_r+0xb80>)
 80077b8:	4602      	mov	r2, r0
 80077ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077be:	f7ff bb5a 	b.w	8006e76 <_dtoa_r+0x2e>
 80077c2:	692a      	ldr	r2, [r5, #16]
 80077c4:	3202      	adds	r2, #2
 80077c6:	0092      	lsls	r2, r2, #2
 80077c8:	f105 010c 	add.w	r1, r5, #12
 80077cc:	300c      	adds	r0, #12
 80077ce:	f000 fe3d 	bl	800844c <memcpy>
 80077d2:	2201      	movs	r2, #1
 80077d4:	4631      	mov	r1, r6
 80077d6:	4658      	mov	r0, fp
 80077d8:	f000 fc08 	bl	8007fec <__lshift>
 80077dc:	f10a 0301 	add.w	r3, sl, #1
 80077e0:	9307      	str	r3, [sp, #28]
 80077e2:	9b00      	ldr	r3, [sp, #0]
 80077e4:	4453      	add	r3, sl
 80077e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	462f      	mov	r7, r5
 80077f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f2:	4605      	mov	r5, r0
 80077f4:	9b07      	ldr	r3, [sp, #28]
 80077f6:	4621      	mov	r1, r4
 80077f8:	3b01      	subs	r3, #1
 80077fa:	4648      	mov	r0, r9
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	f7ff fa9a 	bl	8006d36 <quorem>
 8007802:	4639      	mov	r1, r7
 8007804:	9002      	str	r0, [sp, #8]
 8007806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800780a:	4648      	mov	r0, r9
 800780c:	f000 fc5a 	bl	80080c4 <__mcmp>
 8007810:	462a      	mov	r2, r5
 8007812:	9008      	str	r0, [sp, #32]
 8007814:	4621      	mov	r1, r4
 8007816:	4658      	mov	r0, fp
 8007818:	f000 fc70 	bl	80080fc <__mdiff>
 800781c:	68c2      	ldr	r2, [r0, #12]
 800781e:	4606      	mov	r6, r0
 8007820:	bb02      	cbnz	r2, 8007864 <_dtoa_r+0xa1c>
 8007822:	4601      	mov	r1, r0
 8007824:	4648      	mov	r0, r9
 8007826:	f000 fc4d 	bl	80080c4 <__mcmp>
 800782a:	4602      	mov	r2, r0
 800782c:	4631      	mov	r1, r6
 800782e:	4658      	mov	r0, fp
 8007830:	920e      	str	r2, [sp, #56]	@ 0x38
 8007832:	f000 fa0d 	bl	8007c50 <_Bfree>
 8007836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800783a:	9e07      	ldr	r6, [sp, #28]
 800783c:	ea43 0102 	orr.w	r1, r3, r2
 8007840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007842:	4319      	orrs	r1, r3
 8007844:	d110      	bne.n	8007868 <_dtoa_r+0xa20>
 8007846:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800784a:	d029      	beq.n	80078a0 <_dtoa_r+0xa58>
 800784c:	9b08      	ldr	r3, [sp, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	dd02      	ble.n	8007858 <_dtoa_r+0xa10>
 8007852:	9b02      	ldr	r3, [sp, #8]
 8007854:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007858:	9b00      	ldr	r3, [sp, #0]
 800785a:	f883 8000 	strb.w	r8, [r3]
 800785e:	e63f      	b.n	80074e0 <_dtoa_r+0x698>
 8007860:	4628      	mov	r0, r5
 8007862:	e7bb      	b.n	80077dc <_dtoa_r+0x994>
 8007864:	2201      	movs	r2, #1
 8007866:	e7e1      	b.n	800782c <_dtoa_r+0x9e4>
 8007868:	9b08      	ldr	r3, [sp, #32]
 800786a:	2b00      	cmp	r3, #0
 800786c:	db04      	blt.n	8007878 <_dtoa_r+0xa30>
 800786e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007870:	430b      	orrs	r3, r1
 8007872:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007874:	430b      	orrs	r3, r1
 8007876:	d120      	bne.n	80078ba <_dtoa_r+0xa72>
 8007878:	2a00      	cmp	r2, #0
 800787a:	dded      	ble.n	8007858 <_dtoa_r+0xa10>
 800787c:	4649      	mov	r1, r9
 800787e:	2201      	movs	r2, #1
 8007880:	4658      	mov	r0, fp
 8007882:	f000 fbb3 	bl	8007fec <__lshift>
 8007886:	4621      	mov	r1, r4
 8007888:	4681      	mov	r9, r0
 800788a:	f000 fc1b 	bl	80080c4 <__mcmp>
 800788e:	2800      	cmp	r0, #0
 8007890:	dc03      	bgt.n	800789a <_dtoa_r+0xa52>
 8007892:	d1e1      	bne.n	8007858 <_dtoa_r+0xa10>
 8007894:	f018 0f01 	tst.w	r8, #1
 8007898:	d0de      	beq.n	8007858 <_dtoa_r+0xa10>
 800789a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800789e:	d1d8      	bne.n	8007852 <_dtoa_r+0xa0a>
 80078a0:	9a00      	ldr	r2, [sp, #0]
 80078a2:	2339      	movs	r3, #57	@ 0x39
 80078a4:	7013      	strb	r3, [r2, #0]
 80078a6:	4633      	mov	r3, r6
 80078a8:	461e      	mov	r6, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078b0:	2a39      	cmp	r2, #57	@ 0x39
 80078b2:	d052      	beq.n	800795a <_dtoa_r+0xb12>
 80078b4:	3201      	adds	r2, #1
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	e612      	b.n	80074e0 <_dtoa_r+0x698>
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	dd07      	ble.n	80078ce <_dtoa_r+0xa86>
 80078be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078c2:	d0ed      	beq.n	80078a0 <_dtoa_r+0xa58>
 80078c4:	9a00      	ldr	r2, [sp, #0]
 80078c6:	f108 0301 	add.w	r3, r8, #1
 80078ca:	7013      	strb	r3, [r2, #0]
 80078cc:	e608      	b.n	80074e0 <_dtoa_r+0x698>
 80078ce:	9b07      	ldr	r3, [sp, #28]
 80078d0:	9a07      	ldr	r2, [sp, #28]
 80078d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80078d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078d8:	4293      	cmp	r3, r2
 80078da:	d028      	beq.n	800792e <_dtoa_r+0xae6>
 80078dc:	4649      	mov	r1, r9
 80078de:	2300      	movs	r3, #0
 80078e0:	220a      	movs	r2, #10
 80078e2:	4658      	mov	r0, fp
 80078e4:	f000 f9d6 	bl	8007c94 <__multadd>
 80078e8:	42af      	cmp	r7, r5
 80078ea:	4681      	mov	r9, r0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	f04f 020a 	mov.w	r2, #10
 80078f4:	4639      	mov	r1, r7
 80078f6:	4658      	mov	r0, fp
 80078f8:	d107      	bne.n	800790a <_dtoa_r+0xac2>
 80078fa:	f000 f9cb 	bl	8007c94 <__multadd>
 80078fe:	4607      	mov	r7, r0
 8007900:	4605      	mov	r5, r0
 8007902:	9b07      	ldr	r3, [sp, #28]
 8007904:	3301      	adds	r3, #1
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	e774      	b.n	80077f4 <_dtoa_r+0x9ac>
 800790a:	f000 f9c3 	bl	8007c94 <__multadd>
 800790e:	4629      	mov	r1, r5
 8007910:	4607      	mov	r7, r0
 8007912:	2300      	movs	r3, #0
 8007914:	220a      	movs	r2, #10
 8007916:	4658      	mov	r0, fp
 8007918:	f000 f9bc 	bl	8007c94 <__multadd>
 800791c:	4605      	mov	r5, r0
 800791e:	e7f0      	b.n	8007902 <_dtoa_r+0xaba>
 8007920:	9b00      	ldr	r3, [sp, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	bfcc      	ite	gt
 8007926:	461e      	movgt	r6, r3
 8007928:	2601      	movle	r6, #1
 800792a:	4456      	add	r6, sl
 800792c:	2700      	movs	r7, #0
 800792e:	4649      	mov	r1, r9
 8007930:	2201      	movs	r2, #1
 8007932:	4658      	mov	r0, fp
 8007934:	f000 fb5a 	bl	8007fec <__lshift>
 8007938:	4621      	mov	r1, r4
 800793a:	4681      	mov	r9, r0
 800793c:	f000 fbc2 	bl	80080c4 <__mcmp>
 8007940:	2800      	cmp	r0, #0
 8007942:	dcb0      	bgt.n	80078a6 <_dtoa_r+0xa5e>
 8007944:	d102      	bne.n	800794c <_dtoa_r+0xb04>
 8007946:	f018 0f01 	tst.w	r8, #1
 800794a:	d1ac      	bne.n	80078a6 <_dtoa_r+0xa5e>
 800794c:	4633      	mov	r3, r6
 800794e:	461e      	mov	r6, r3
 8007950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007954:	2a30      	cmp	r2, #48	@ 0x30
 8007956:	d0fa      	beq.n	800794e <_dtoa_r+0xb06>
 8007958:	e5c2      	b.n	80074e0 <_dtoa_r+0x698>
 800795a:	459a      	cmp	sl, r3
 800795c:	d1a4      	bne.n	80078a8 <_dtoa_r+0xa60>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	2331      	movs	r3, #49	@ 0x31
 8007966:	f88a 3000 	strb.w	r3, [sl]
 800796a:	e5b9      	b.n	80074e0 <_dtoa_r+0x698>
 800796c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800796e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80079cc <_dtoa_r+0xb84>
 8007972:	b11b      	cbz	r3, 800797c <_dtoa_r+0xb34>
 8007974:	f10a 0308 	add.w	r3, sl, #8
 8007978:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	4650      	mov	r0, sl
 800797e:	b019      	add	sp, #100	@ 0x64
 8007980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007986:	2b01      	cmp	r3, #1
 8007988:	f77f ae37 	ble.w	80075fa <_dtoa_r+0x7b2>
 800798c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800798e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007990:	2001      	movs	r0, #1
 8007992:	e655      	b.n	8007640 <_dtoa_r+0x7f8>
 8007994:	9b00      	ldr	r3, [sp, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f77f aed6 	ble.w	8007748 <_dtoa_r+0x900>
 800799c:	4656      	mov	r6, sl
 800799e:	4621      	mov	r1, r4
 80079a0:	4648      	mov	r0, r9
 80079a2:	f7ff f9c8 	bl	8006d36 <quorem>
 80079a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079aa:	f806 8b01 	strb.w	r8, [r6], #1
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	eba6 020a 	sub.w	r2, r6, sl
 80079b4:	4293      	cmp	r3, r2
 80079b6:	ddb3      	ble.n	8007920 <_dtoa_r+0xad8>
 80079b8:	4649      	mov	r1, r9
 80079ba:	2300      	movs	r3, #0
 80079bc:	220a      	movs	r2, #10
 80079be:	4658      	mov	r0, fp
 80079c0:	f000 f968 	bl	8007c94 <__multadd>
 80079c4:	4681      	mov	r9, r0
 80079c6:	e7ea      	b.n	800799e <_dtoa_r+0xb56>
 80079c8:	08008be4 	.word	0x08008be4
 80079cc:	08008b68 	.word	0x08008b68

080079d0 <_free_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4605      	mov	r5, r0
 80079d4:	2900      	cmp	r1, #0
 80079d6:	d041      	beq.n	8007a5c <_free_r+0x8c>
 80079d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079dc:	1f0c      	subs	r4, r1, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bfb8      	it	lt
 80079e2:	18e4      	addlt	r4, r4, r3
 80079e4:	f000 f8e8 	bl	8007bb8 <__malloc_lock>
 80079e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a60 <_free_r+0x90>)
 80079ea:	6813      	ldr	r3, [r2, #0]
 80079ec:	b933      	cbnz	r3, 80079fc <_free_r+0x2c>
 80079ee:	6063      	str	r3, [r4, #4]
 80079f0:	6014      	str	r4, [r2, #0]
 80079f2:	4628      	mov	r0, r5
 80079f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f8:	f000 b8e4 	b.w	8007bc4 <__malloc_unlock>
 80079fc:	42a3      	cmp	r3, r4
 80079fe:	d908      	bls.n	8007a12 <_free_r+0x42>
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	1821      	adds	r1, r4, r0
 8007a04:	428b      	cmp	r3, r1
 8007a06:	bf01      	itttt	eq
 8007a08:	6819      	ldreq	r1, [r3, #0]
 8007a0a:	685b      	ldreq	r3, [r3, #4]
 8007a0c:	1809      	addeq	r1, r1, r0
 8007a0e:	6021      	streq	r1, [r4, #0]
 8007a10:	e7ed      	b.n	80079ee <_free_r+0x1e>
 8007a12:	461a      	mov	r2, r3
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	b10b      	cbz	r3, 8007a1c <_free_r+0x4c>
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	d9fa      	bls.n	8007a12 <_free_r+0x42>
 8007a1c:	6811      	ldr	r1, [r2, #0]
 8007a1e:	1850      	adds	r0, r2, r1
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d10b      	bne.n	8007a3c <_free_r+0x6c>
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	4401      	add	r1, r0
 8007a28:	1850      	adds	r0, r2, r1
 8007a2a:	4283      	cmp	r3, r0
 8007a2c:	6011      	str	r1, [r2, #0]
 8007a2e:	d1e0      	bne.n	80079f2 <_free_r+0x22>
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	6053      	str	r3, [r2, #4]
 8007a36:	4408      	add	r0, r1
 8007a38:	6010      	str	r0, [r2, #0]
 8007a3a:	e7da      	b.n	80079f2 <_free_r+0x22>
 8007a3c:	d902      	bls.n	8007a44 <_free_r+0x74>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	e7d6      	b.n	80079f2 <_free_r+0x22>
 8007a44:	6820      	ldr	r0, [r4, #0]
 8007a46:	1821      	adds	r1, r4, r0
 8007a48:	428b      	cmp	r3, r1
 8007a4a:	bf04      	itt	eq
 8007a4c:	6819      	ldreq	r1, [r3, #0]
 8007a4e:	685b      	ldreq	r3, [r3, #4]
 8007a50:	6063      	str	r3, [r4, #4]
 8007a52:	bf04      	itt	eq
 8007a54:	1809      	addeq	r1, r1, r0
 8007a56:	6021      	streq	r1, [r4, #0]
 8007a58:	6054      	str	r4, [r2, #4]
 8007a5a:	e7ca      	b.n	80079f2 <_free_r+0x22>
 8007a5c:	bd38      	pop	{r3, r4, r5, pc}
 8007a5e:	bf00      	nop
 8007a60:	200004ac 	.word	0x200004ac

08007a64 <malloc>:
 8007a64:	4b02      	ldr	r3, [pc, #8]	@ (8007a70 <malloc+0xc>)
 8007a66:	4601      	mov	r1, r0
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f000 b825 	b.w	8007ab8 <_malloc_r>
 8007a6e:	bf00      	nop
 8007a70:	20000024 	.word	0x20000024

08007a74 <sbrk_aligned>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4e0f      	ldr	r6, [pc, #60]	@ (8007ab4 <sbrk_aligned+0x40>)
 8007a78:	460c      	mov	r4, r1
 8007a7a:	6831      	ldr	r1, [r6, #0]
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	b911      	cbnz	r1, 8007a86 <sbrk_aligned+0x12>
 8007a80:	f000 fcd4 	bl	800842c <_sbrk_r>
 8007a84:	6030      	str	r0, [r6, #0]
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 fccf 	bl	800842c <_sbrk_r>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d103      	bne.n	8007a9a <sbrk_aligned+0x26>
 8007a92:	f04f 34ff 	mov.w	r4, #4294967295
 8007a96:	4620      	mov	r0, r4
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	1cc4      	adds	r4, r0, #3
 8007a9c:	f024 0403 	bic.w	r4, r4, #3
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d0f8      	beq.n	8007a96 <sbrk_aligned+0x22>
 8007aa4:	1a21      	subs	r1, r4, r0
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 fcc0 	bl	800842c <_sbrk_r>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d1f2      	bne.n	8007a96 <sbrk_aligned+0x22>
 8007ab0:	e7ef      	b.n	8007a92 <sbrk_aligned+0x1e>
 8007ab2:	bf00      	nop
 8007ab4:	200004a8 	.word	0x200004a8

08007ab8 <_malloc_r>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	1ccd      	adds	r5, r1, #3
 8007abe:	f025 0503 	bic.w	r5, r5, #3
 8007ac2:	3508      	adds	r5, #8
 8007ac4:	2d0c      	cmp	r5, #12
 8007ac6:	bf38      	it	cc
 8007ac8:	250c      	movcc	r5, #12
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	4606      	mov	r6, r0
 8007ace:	db01      	blt.n	8007ad4 <_malloc_r+0x1c>
 8007ad0:	42a9      	cmp	r1, r5
 8007ad2:	d904      	bls.n	8007ade <_malloc_r+0x26>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	6033      	str	r3, [r6, #0]
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bb4 <_malloc_r+0xfc>
 8007ae2:	f000 f869 	bl	8007bb8 <__malloc_lock>
 8007ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aea:	461c      	mov	r4, r3
 8007aec:	bb44      	cbnz	r4, 8007b40 <_malloc_r+0x88>
 8007aee:	4629      	mov	r1, r5
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff ffbf 	bl	8007a74 <sbrk_aligned>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	4604      	mov	r4, r0
 8007afa:	d158      	bne.n	8007bae <_malloc_r+0xf6>
 8007afc:	f8d8 4000 	ldr.w	r4, [r8]
 8007b00:	4627      	mov	r7, r4
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	d143      	bne.n	8007b8e <_malloc_r+0xd6>
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	d04b      	beq.n	8007ba2 <_malloc_r+0xea>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4630      	mov	r0, r6
 8007b10:	eb04 0903 	add.w	r9, r4, r3
 8007b14:	f000 fc8a 	bl	800842c <_sbrk_r>
 8007b18:	4581      	cmp	r9, r0
 8007b1a:	d142      	bne.n	8007ba2 <_malloc_r+0xea>
 8007b1c:	6821      	ldr	r1, [r4, #0]
 8007b1e:	1a6d      	subs	r5, r5, r1
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ffa6 	bl	8007a74 <sbrk_aligned>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d03a      	beq.n	8007ba2 <_malloc_r+0xea>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	442b      	add	r3, r5
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	f8d8 3000 	ldr.w	r3, [r8]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	bb62      	cbnz	r2, 8007b94 <_malloc_r+0xdc>
 8007b3a:	f8c8 7000 	str.w	r7, [r8]
 8007b3e:	e00f      	b.n	8007b60 <_malloc_r+0xa8>
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	1b52      	subs	r2, r2, r5
 8007b44:	d420      	bmi.n	8007b88 <_malloc_r+0xd0>
 8007b46:	2a0b      	cmp	r2, #11
 8007b48:	d917      	bls.n	8007b7a <_malloc_r+0xc2>
 8007b4a:	1961      	adds	r1, r4, r5
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	6025      	str	r5, [r4, #0]
 8007b50:	bf18      	it	ne
 8007b52:	6059      	strne	r1, [r3, #4]
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	bf08      	it	eq
 8007b58:	f8c8 1000 	streq.w	r1, [r8]
 8007b5c:	5162      	str	r2, [r4, r5]
 8007b5e:	604b      	str	r3, [r1, #4]
 8007b60:	4630      	mov	r0, r6
 8007b62:	f000 f82f 	bl	8007bc4 <__malloc_unlock>
 8007b66:	f104 000b 	add.w	r0, r4, #11
 8007b6a:	1d23      	adds	r3, r4, #4
 8007b6c:	f020 0007 	bic.w	r0, r0, #7
 8007b70:	1ac2      	subs	r2, r0, r3
 8007b72:	bf1c      	itt	ne
 8007b74:	1a1b      	subne	r3, r3, r0
 8007b76:	50a3      	strne	r3, [r4, r2]
 8007b78:	e7af      	b.n	8007ada <_malloc_r+0x22>
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	bf0c      	ite	eq
 8007b80:	f8c8 2000 	streq.w	r2, [r8]
 8007b84:	605a      	strne	r2, [r3, #4]
 8007b86:	e7eb      	b.n	8007b60 <_malloc_r+0xa8>
 8007b88:	4623      	mov	r3, r4
 8007b8a:	6864      	ldr	r4, [r4, #4]
 8007b8c:	e7ae      	b.n	8007aec <_malloc_r+0x34>
 8007b8e:	463c      	mov	r4, r7
 8007b90:	687f      	ldr	r7, [r7, #4]
 8007b92:	e7b6      	b.n	8007b02 <_malloc_r+0x4a>
 8007b94:	461a      	mov	r2, r3
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d1fb      	bne.n	8007b94 <_malloc_r+0xdc>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6053      	str	r3, [r2, #4]
 8007ba0:	e7de      	b.n	8007b60 <_malloc_r+0xa8>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	6033      	str	r3, [r6, #0]
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 f80c 	bl	8007bc4 <__malloc_unlock>
 8007bac:	e794      	b.n	8007ad8 <_malloc_r+0x20>
 8007bae:	6005      	str	r5, [r0, #0]
 8007bb0:	e7d6      	b.n	8007b60 <_malloc_r+0xa8>
 8007bb2:	bf00      	nop
 8007bb4:	200004ac 	.word	0x200004ac

08007bb8 <__malloc_lock>:
 8007bb8:	4801      	ldr	r0, [pc, #4]	@ (8007bc0 <__malloc_lock+0x8>)
 8007bba:	f7ff b8ba 	b.w	8006d32 <__retarget_lock_acquire_recursive>
 8007bbe:	bf00      	nop
 8007bc0:	200004a4 	.word	0x200004a4

08007bc4 <__malloc_unlock>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	@ (8007bcc <__malloc_unlock+0x8>)
 8007bc6:	f7ff b8b5 	b.w	8006d34 <__retarget_lock_release_recursive>
 8007bca:	bf00      	nop
 8007bcc:	200004a4 	.word	0x200004a4

08007bd0 <_Balloc>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	69c6      	ldr	r6, [r0, #28]
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	b976      	cbnz	r6, 8007bf8 <_Balloc+0x28>
 8007bda:	2010      	movs	r0, #16
 8007bdc:	f7ff ff42 	bl	8007a64 <malloc>
 8007be0:	4602      	mov	r2, r0
 8007be2:	61e0      	str	r0, [r4, #28]
 8007be4:	b920      	cbnz	r0, 8007bf0 <_Balloc+0x20>
 8007be6:	4b18      	ldr	r3, [pc, #96]	@ (8007c48 <_Balloc+0x78>)
 8007be8:	4818      	ldr	r0, [pc, #96]	@ (8007c4c <_Balloc+0x7c>)
 8007bea:	216b      	movs	r1, #107	@ 0x6b
 8007bec:	f000 fc3c 	bl	8008468 <__assert_func>
 8007bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bf4:	6006      	str	r6, [r0, #0]
 8007bf6:	60c6      	str	r6, [r0, #12]
 8007bf8:	69e6      	ldr	r6, [r4, #28]
 8007bfa:	68f3      	ldr	r3, [r6, #12]
 8007bfc:	b183      	cbz	r3, 8007c20 <_Balloc+0x50>
 8007bfe:	69e3      	ldr	r3, [r4, #28]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c06:	b9b8      	cbnz	r0, 8007c38 <_Balloc+0x68>
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c0e:	1d72      	adds	r2, r6, #5
 8007c10:	0092      	lsls	r2, r2, #2
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 fc46 	bl	80084a4 <_calloc_r>
 8007c18:	b160      	cbz	r0, 8007c34 <_Balloc+0x64>
 8007c1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c1e:	e00e      	b.n	8007c3e <_Balloc+0x6e>
 8007c20:	2221      	movs	r2, #33	@ 0x21
 8007c22:	2104      	movs	r1, #4
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fc3d 	bl	80084a4 <_calloc_r>
 8007c2a:	69e3      	ldr	r3, [r4, #28]
 8007c2c:	60f0      	str	r0, [r6, #12]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e4      	bne.n	8007bfe <_Balloc+0x2e>
 8007c34:	2000      	movs	r0, #0
 8007c36:	bd70      	pop	{r4, r5, r6, pc}
 8007c38:	6802      	ldr	r2, [r0, #0]
 8007c3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c44:	e7f7      	b.n	8007c36 <_Balloc+0x66>
 8007c46:	bf00      	nop
 8007c48:	08008b75 	.word	0x08008b75
 8007c4c:	08008bf5 	.word	0x08008bf5

08007c50 <_Bfree>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	69c6      	ldr	r6, [r0, #28]
 8007c54:	4605      	mov	r5, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	b976      	cbnz	r6, 8007c78 <_Bfree+0x28>
 8007c5a:	2010      	movs	r0, #16
 8007c5c:	f7ff ff02 	bl	8007a64 <malloc>
 8007c60:	4602      	mov	r2, r0
 8007c62:	61e8      	str	r0, [r5, #28]
 8007c64:	b920      	cbnz	r0, 8007c70 <_Bfree+0x20>
 8007c66:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <_Bfree+0x3c>)
 8007c68:	4809      	ldr	r0, [pc, #36]	@ (8007c90 <_Bfree+0x40>)
 8007c6a:	218f      	movs	r1, #143	@ 0x8f
 8007c6c:	f000 fbfc 	bl	8008468 <__assert_func>
 8007c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c74:	6006      	str	r6, [r0, #0]
 8007c76:	60c6      	str	r6, [r0, #12]
 8007c78:	b13c      	cbz	r4, 8007c8a <_Bfree+0x3a>
 8007c7a:	69eb      	ldr	r3, [r5, #28]
 8007c7c:	6862      	ldr	r2, [r4, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c84:	6021      	str	r1, [r4, #0]
 8007c86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	08008b75 	.word	0x08008b75
 8007c90:	08008bf5 	.word	0x08008bf5

08007c94 <__multadd>:
 8007c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	690d      	ldr	r5, [r1, #16]
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	461e      	mov	r6, r3
 8007ca0:	f101 0c14 	add.w	ip, r1, #20
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f8dc 3000 	ldr.w	r3, [ip]
 8007caa:	b299      	uxth	r1, r3
 8007cac:	fb02 6101 	mla	r1, r2, r1, r6
 8007cb0:	0c1e      	lsrs	r6, r3, #16
 8007cb2:	0c0b      	lsrs	r3, r1, #16
 8007cb4:	fb02 3306 	mla	r3, r2, r6, r3
 8007cb8:	b289      	uxth	r1, r1
 8007cba:	3001      	adds	r0, #1
 8007cbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cc0:	4285      	cmp	r5, r0
 8007cc2:	f84c 1b04 	str.w	r1, [ip], #4
 8007cc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cca:	dcec      	bgt.n	8007ca6 <__multadd+0x12>
 8007ccc:	b30e      	cbz	r6, 8007d12 <__multadd+0x7e>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	42ab      	cmp	r3, r5
 8007cd2:	dc19      	bgt.n	8007d08 <__multadd+0x74>
 8007cd4:	6861      	ldr	r1, [r4, #4]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	3101      	adds	r1, #1
 8007cda:	f7ff ff79 	bl	8007bd0 <_Balloc>
 8007cde:	4680      	mov	r8, r0
 8007ce0:	b928      	cbnz	r0, 8007cee <__multadd+0x5a>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <__multadd+0x84>)
 8007ce6:	480d      	ldr	r0, [pc, #52]	@ (8007d1c <__multadd+0x88>)
 8007ce8:	21ba      	movs	r1, #186	@ 0xba
 8007cea:	f000 fbbd 	bl	8008468 <__assert_func>
 8007cee:	6922      	ldr	r2, [r4, #16]
 8007cf0:	3202      	adds	r2, #2
 8007cf2:	f104 010c 	add.w	r1, r4, #12
 8007cf6:	0092      	lsls	r2, r2, #2
 8007cf8:	300c      	adds	r0, #12
 8007cfa:	f000 fba7 	bl	800844c <memcpy>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7ff ffa5 	bl	8007c50 <_Bfree>
 8007d06:	4644      	mov	r4, r8
 8007d08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d0c:	3501      	adds	r5, #1
 8007d0e:	615e      	str	r6, [r3, #20]
 8007d10:	6125      	str	r5, [r4, #16]
 8007d12:	4620      	mov	r0, r4
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	08008be4 	.word	0x08008be4
 8007d1c:	08008bf5 	.word	0x08008bf5

08007d20 <__hi0bits>:
 8007d20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d24:	4603      	mov	r3, r0
 8007d26:	bf36      	itet	cc
 8007d28:	0403      	lslcc	r3, r0, #16
 8007d2a:	2000      	movcs	r0, #0
 8007d2c:	2010      	movcc	r0, #16
 8007d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d32:	bf3c      	itt	cc
 8007d34:	021b      	lslcc	r3, r3, #8
 8007d36:	3008      	addcc	r0, #8
 8007d38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d3c:	bf3c      	itt	cc
 8007d3e:	011b      	lslcc	r3, r3, #4
 8007d40:	3004      	addcc	r0, #4
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d46:	bf3c      	itt	cc
 8007d48:	009b      	lslcc	r3, r3, #2
 8007d4a:	3002      	addcc	r0, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	db05      	blt.n	8007d5c <__hi0bits+0x3c>
 8007d50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d54:	f100 0001 	add.w	r0, r0, #1
 8007d58:	bf08      	it	eq
 8007d5a:	2020      	moveq	r0, #32
 8007d5c:	4770      	bx	lr

08007d5e <__lo0bits>:
 8007d5e:	6803      	ldr	r3, [r0, #0]
 8007d60:	4602      	mov	r2, r0
 8007d62:	f013 0007 	ands.w	r0, r3, #7
 8007d66:	d00b      	beq.n	8007d80 <__lo0bits+0x22>
 8007d68:	07d9      	lsls	r1, r3, #31
 8007d6a:	d421      	bmi.n	8007db0 <__lo0bits+0x52>
 8007d6c:	0798      	lsls	r0, r3, #30
 8007d6e:	bf49      	itett	mi
 8007d70:	085b      	lsrmi	r3, r3, #1
 8007d72:	089b      	lsrpl	r3, r3, #2
 8007d74:	2001      	movmi	r0, #1
 8007d76:	6013      	strmi	r3, [r2, #0]
 8007d78:	bf5c      	itt	pl
 8007d7a:	6013      	strpl	r3, [r2, #0]
 8007d7c:	2002      	movpl	r0, #2
 8007d7e:	4770      	bx	lr
 8007d80:	b299      	uxth	r1, r3
 8007d82:	b909      	cbnz	r1, 8007d88 <__lo0bits+0x2a>
 8007d84:	0c1b      	lsrs	r3, r3, #16
 8007d86:	2010      	movs	r0, #16
 8007d88:	b2d9      	uxtb	r1, r3
 8007d8a:	b909      	cbnz	r1, 8007d90 <__lo0bits+0x32>
 8007d8c:	3008      	adds	r0, #8
 8007d8e:	0a1b      	lsrs	r3, r3, #8
 8007d90:	0719      	lsls	r1, r3, #28
 8007d92:	bf04      	itt	eq
 8007d94:	091b      	lsreq	r3, r3, #4
 8007d96:	3004      	addeq	r0, #4
 8007d98:	0799      	lsls	r1, r3, #30
 8007d9a:	bf04      	itt	eq
 8007d9c:	089b      	lsreq	r3, r3, #2
 8007d9e:	3002      	addeq	r0, #2
 8007da0:	07d9      	lsls	r1, r3, #31
 8007da2:	d403      	bmi.n	8007dac <__lo0bits+0x4e>
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	f100 0001 	add.w	r0, r0, #1
 8007daa:	d003      	beq.n	8007db4 <__lo0bits+0x56>
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	4770      	bx	lr
 8007db0:	2000      	movs	r0, #0
 8007db2:	4770      	bx	lr
 8007db4:	2020      	movs	r0, #32
 8007db6:	4770      	bx	lr

08007db8 <__i2b>:
 8007db8:	b510      	push	{r4, lr}
 8007dba:	460c      	mov	r4, r1
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	f7ff ff07 	bl	8007bd0 <_Balloc>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	b928      	cbnz	r0, 8007dd2 <__i2b+0x1a>
 8007dc6:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <__i2b+0x24>)
 8007dc8:	4805      	ldr	r0, [pc, #20]	@ (8007de0 <__i2b+0x28>)
 8007dca:	f240 1145 	movw	r1, #325	@ 0x145
 8007dce:	f000 fb4b 	bl	8008468 <__assert_func>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	6144      	str	r4, [r0, #20]
 8007dd6:	6103      	str	r3, [r0, #16]
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	bf00      	nop
 8007ddc:	08008be4 	.word	0x08008be4
 8007de0:	08008bf5 	.word	0x08008bf5

08007de4 <__multiply>:
 8007de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	4614      	mov	r4, r2
 8007dea:	690a      	ldr	r2, [r1, #16]
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	bfa8      	it	ge
 8007df2:	4623      	movge	r3, r4
 8007df4:	460f      	mov	r7, r1
 8007df6:	bfa4      	itt	ge
 8007df8:	460c      	movge	r4, r1
 8007dfa:	461f      	movge	r7, r3
 8007dfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e04:	68a3      	ldr	r3, [r4, #8]
 8007e06:	6861      	ldr	r1, [r4, #4]
 8007e08:	eb0a 0609 	add.w	r6, sl, r9
 8007e0c:	42b3      	cmp	r3, r6
 8007e0e:	b085      	sub	sp, #20
 8007e10:	bfb8      	it	lt
 8007e12:	3101      	addlt	r1, #1
 8007e14:	f7ff fedc 	bl	8007bd0 <_Balloc>
 8007e18:	b930      	cbnz	r0, 8007e28 <__multiply+0x44>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	4b44      	ldr	r3, [pc, #272]	@ (8007f30 <__multiply+0x14c>)
 8007e1e:	4845      	ldr	r0, [pc, #276]	@ (8007f34 <__multiply+0x150>)
 8007e20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e24:	f000 fb20 	bl	8008468 <__assert_func>
 8007e28:	f100 0514 	add.w	r5, r0, #20
 8007e2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e30:	462b      	mov	r3, r5
 8007e32:	2200      	movs	r2, #0
 8007e34:	4543      	cmp	r3, r8
 8007e36:	d321      	bcc.n	8007e7c <__multiply+0x98>
 8007e38:	f107 0114 	add.w	r1, r7, #20
 8007e3c:	f104 0214 	add.w	r2, r4, #20
 8007e40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e48:	9302      	str	r3, [sp, #8]
 8007e4a:	1b13      	subs	r3, r2, r4
 8007e4c:	3b15      	subs	r3, #21
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	3304      	adds	r3, #4
 8007e54:	f104 0715 	add.w	r7, r4, #21
 8007e58:	42ba      	cmp	r2, r7
 8007e5a:	bf38      	it	cc
 8007e5c:	2304      	movcc	r3, #4
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	9b02      	ldr	r3, [sp, #8]
 8007e62:	9103      	str	r1, [sp, #12]
 8007e64:	428b      	cmp	r3, r1
 8007e66:	d80c      	bhi.n	8007e82 <__multiply+0x9e>
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	dd03      	ble.n	8007e74 <__multiply+0x90>
 8007e6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d05b      	beq.n	8007f2c <__multiply+0x148>
 8007e74:	6106      	str	r6, [r0, #16]
 8007e76:	b005      	add	sp, #20
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	f843 2b04 	str.w	r2, [r3], #4
 8007e80:	e7d8      	b.n	8007e34 <__multiply+0x50>
 8007e82:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e86:	f1ba 0f00 	cmp.w	sl, #0
 8007e8a:	d024      	beq.n	8007ed6 <__multiply+0xf2>
 8007e8c:	f104 0e14 	add.w	lr, r4, #20
 8007e90:	46a9      	mov	r9, r5
 8007e92:	f04f 0c00 	mov.w	ip, #0
 8007e96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e9a:	f8d9 3000 	ldr.w	r3, [r9]
 8007e9e:	fa1f fb87 	uxth.w	fp, r7
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ea8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007eac:	f8d9 7000 	ldr.w	r7, [r9]
 8007eb0:	4463      	add	r3, ip
 8007eb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007eb6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007eba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ec4:	4572      	cmp	r2, lr
 8007ec6:	f849 3b04 	str.w	r3, [r9], #4
 8007eca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ece:	d8e2      	bhi.n	8007e96 <__multiply+0xb2>
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	f845 c003 	str.w	ip, [r5, r3]
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007edc:	3104      	adds	r1, #4
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	d021      	beq.n	8007f28 <__multiply+0x144>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	f104 0c14 	add.w	ip, r4, #20
 8007eea:	46ae      	mov	lr, r5
 8007eec:	f04f 0a00 	mov.w	sl, #0
 8007ef0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ef4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ef8:	fb09 770b 	mla	r7, r9, fp, r7
 8007efc:	4457      	add	r7, sl
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f04:	f84e 3b04 	str.w	r3, [lr], #4
 8007f08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f10:	f8be 3000 	ldrh.w	r3, [lr]
 8007f14:	fb09 330a 	mla	r3, r9, sl, r3
 8007f18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f1c:	4562      	cmp	r2, ip
 8007f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f22:	d8e5      	bhi.n	8007ef0 <__multiply+0x10c>
 8007f24:	9f01      	ldr	r7, [sp, #4]
 8007f26:	51eb      	str	r3, [r5, r7]
 8007f28:	3504      	adds	r5, #4
 8007f2a:	e799      	b.n	8007e60 <__multiply+0x7c>
 8007f2c:	3e01      	subs	r6, #1
 8007f2e:	e79b      	b.n	8007e68 <__multiply+0x84>
 8007f30:	08008be4 	.word	0x08008be4
 8007f34:	08008bf5 	.word	0x08008bf5

08007f38 <__pow5mult>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	4615      	mov	r5, r2
 8007f3e:	f012 0203 	ands.w	r2, r2, #3
 8007f42:	4607      	mov	r7, r0
 8007f44:	460e      	mov	r6, r1
 8007f46:	d007      	beq.n	8007f58 <__pow5mult+0x20>
 8007f48:	4c25      	ldr	r4, [pc, #148]	@ (8007fe0 <__pow5mult+0xa8>)
 8007f4a:	3a01      	subs	r2, #1
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f52:	f7ff fe9f 	bl	8007c94 <__multadd>
 8007f56:	4606      	mov	r6, r0
 8007f58:	10ad      	asrs	r5, r5, #2
 8007f5a:	d03d      	beq.n	8007fd8 <__pow5mult+0xa0>
 8007f5c:	69fc      	ldr	r4, [r7, #28]
 8007f5e:	b97c      	cbnz	r4, 8007f80 <__pow5mult+0x48>
 8007f60:	2010      	movs	r0, #16
 8007f62:	f7ff fd7f 	bl	8007a64 <malloc>
 8007f66:	4602      	mov	r2, r0
 8007f68:	61f8      	str	r0, [r7, #28]
 8007f6a:	b928      	cbnz	r0, 8007f78 <__pow5mult+0x40>
 8007f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe4 <__pow5mult+0xac>)
 8007f6e:	481e      	ldr	r0, [pc, #120]	@ (8007fe8 <__pow5mult+0xb0>)
 8007f70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f74:	f000 fa78 	bl	8008468 <__assert_func>
 8007f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f7c:	6004      	str	r4, [r0, #0]
 8007f7e:	60c4      	str	r4, [r0, #12]
 8007f80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f88:	b94c      	cbnz	r4, 8007f9e <__pow5mult+0x66>
 8007f8a:	f240 2171 	movw	r1, #625	@ 0x271
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f7ff ff12 	bl	8007db8 <__i2b>
 8007f94:	2300      	movs	r3, #0
 8007f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	f04f 0900 	mov.w	r9, #0
 8007fa2:	07eb      	lsls	r3, r5, #31
 8007fa4:	d50a      	bpl.n	8007fbc <__pow5mult+0x84>
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4638      	mov	r0, r7
 8007fac:	f7ff ff1a 	bl	8007de4 <__multiply>
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f7ff fe4b 	bl	8007c50 <_Bfree>
 8007fba:	4646      	mov	r6, r8
 8007fbc:	106d      	asrs	r5, r5, #1
 8007fbe:	d00b      	beq.n	8007fd8 <__pow5mult+0xa0>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	b938      	cbnz	r0, 8007fd4 <__pow5mult+0x9c>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f7ff ff0b 	bl	8007de4 <__multiply>
 8007fce:	6020      	str	r0, [r4, #0]
 8007fd0:	f8c0 9000 	str.w	r9, [r0]
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	e7e4      	b.n	8007fa2 <__pow5mult+0x6a>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fde:	bf00      	nop
 8007fe0:	08008c50 	.word	0x08008c50
 8007fe4:	08008b75 	.word	0x08008b75
 8007fe8:	08008bf5 	.word	0x08008bf5

08007fec <__lshift>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	6849      	ldr	r1, [r1, #4]
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	4691      	mov	r9, r2
 8008000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008004:	f108 0601 	add.w	r6, r8, #1
 8008008:	42b3      	cmp	r3, r6
 800800a:	db0b      	blt.n	8008024 <__lshift+0x38>
 800800c:	4638      	mov	r0, r7
 800800e:	f7ff fddf 	bl	8007bd0 <_Balloc>
 8008012:	4605      	mov	r5, r0
 8008014:	b948      	cbnz	r0, 800802a <__lshift+0x3e>
 8008016:	4602      	mov	r2, r0
 8008018:	4b28      	ldr	r3, [pc, #160]	@ (80080bc <__lshift+0xd0>)
 800801a:	4829      	ldr	r0, [pc, #164]	@ (80080c0 <__lshift+0xd4>)
 800801c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008020:	f000 fa22 	bl	8008468 <__assert_func>
 8008024:	3101      	adds	r1, #1
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	e7ee      	b.n	8008008 <__lshift+0x1c>
 800802a:	2300      	movs	r3, #0
 800802c:	f100 0114 	add.w	r1, r0, #20
 8008030:	f100 0210 	add.w	r2, r0, #16
 8008034:	4618      	mov	r0, r3
 8008036:	4553      	cmp	r3, sl
 8008038:	db33      	blt.n	80080a2 <__lshift+0xb6>
 800803a:	6920      	ldr	r0, [r4, #16]
 800803c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008040:	f104 0314 	add.w	r3, r4, #20
 8008044:	f019 091f 	ands.w	r9, r9, #31
 8008048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800804c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008050:	d02b      	beq.n	80080aa <__lshift+0xbe>
 8008052:	f1c9 0e20 	rsb	lr, r9, #32
 8008056:	468a      	mov	sl, r1
 8008058:	2200      	movs	r2, #0
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	fa00 f009 	lsl.w	r0, r0, r9
 8008060:	4310      	orrs	r0, r2
 8008062:	f84a 0b04 	str.w	r0, [sl], #4
 8008066:	f853 2b04 	ldr.w	r2, [r3], #4
 800806a:	459c      	cmp	ip, r3
 800806c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008070:	d8f3      	bhi.n	800805a <__lshift+0x6e>
 8008072:	ebac 0304 	sub.w	r3, ip, r4
 8008076:	3b15      	subs	r3, #21
 8008078:	f023 0303 	bic.w	r3, r3, #3
 800807c:	3304      	adds	r3, #4
 800807e:	f104 0015 	add.w	r0, r4, #21
 8008082:	4584      	cmp	ip, r0
 8008084:	bf38      	it	cc
 8008086:	2304      	movcc	r3, #4
 8008088:	50ca      	str	r2, [r1, r3]
 800808a:	b10a      	cbz	r2, 8008090 <__lshift+0xa4>
 800808c:	f108 0602 	add.w	r6, r8, #2
 8008090:	3e01      	subs	r6, #1
 8008092:	4638      	mov	r0, r7
 8008094:	612e      	str	r6, [r5, #16]
 8008096:	4621      	mov	r1, r4
 8008098:	f7ff fdda 	bl	8007c50 <_Bfree>
 800809c:	4628      	mov	r0, r5
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080a6:	3301      	adds	r3, #1
 80080a8:	e7c5      	b.n	8008036 <__lshift+0x4a>
 80080aa:	3904      	subs	r1, #4
 80080ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80080b4:	459c      	cmp	ip, r3
 80080b6:	d8f9      	bhi.n	80080ac <__lshift+0xc0>
 80080b8:	e7ea      	b.n	8008090 <__lshift+0xa4>
 80080ba:	bf00      	nop
 80080bc:	08008be4 	.word	0x08008be4
 80080c0:	08008bf5 	.word	0x08008bf5

080080c4 <__mcmp>:
 80080c4:	690a      	ldr	r2, [r1, #16]
 80080c6:	4603      	mov	r3, r0
 80080c8:	6900      	ldr	r0, [r0, #16]
 80080ca:	1a80      	subs	r0, r0, r2
 80080cc:	b530      	push	{r4, r5, lr}
 80080ce:	d10e      	bne.n	80080ee <__mcmp+0x2a>
 80080d0:	3314      	adds	r3, #20
 80080d2:	3114      	adds	r1, #20
 80080d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080e4:	4295      	cmp	r5, r2
 80080e6:	d003      	beq.n	80080f0 <__mcmp+0x2c>
 80080e8:	d205      	bcs.n	80080f6 <__mcmp+0x32>
 80080ea:	f04f 30ff 	mov.w	r0, #4294967295
 80080ee:	bd30      	pop	{r4, r5, pc}
 80080f0:	42a3      	cmp	r3, r4
 80080f2:	d3f3      	bcc.n	80080dc <__mcmp+0x18>
 80080f4:	e7fb      	b.n	80080ee <__mcmp+0x2a>
 80080f6:	2001      	movs	r0, #1
 80080f8:	e7f9      	b.n	80080ee <__mcmp+0x2a>
	...

080080fc <__mdiff>:
 80080fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	4689      	mov	r9, r1
 8008102:	4606      	mov	r6, r0
 8008104:	4611      	mov	r1, r2
 8008106:	4648      	mov	r0, r9
 8008108:	4614      	mov	r4, r2
 800810a:	f7ff ffdb 	bl	80080c4 <__mcmp>
 800810e:	1e05      	subs	r5, r0, #0
 8008110:	d112      	bne.n	8008138 <__mdiff+0x3c>
 8008112:	4629      	mov	r1, r5
 8008114:	4630      	mov	r0, r6
 8008116:	f7ff fd5b 	bl	8007bd0 <_Balloc>
 800811a:	4602      	mov	r2, r0
 800811c:	b928      	cbnz	r0, 800812a <__mdiff+0x2e>
 800811e:	4b3f      	ldr	r3, [pc, #252]	@ (800821c <__mdiff+0x120>)
 8008120:	f240 2137 	movw	r1, #567	@ 0x237
 8008124:	483e      	ldr	r0, [pc, #248]	@ (8008220 <__mdiff+0x124>)
 8008126:	f000 f99f 	bl	8008468 <__assert_func>
 800812a:	2301      	movs	r3, #1
 800812c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008130:	4610      	mov	r0, r2
 8008132:	b003      	add	sp, #12
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	bfbc      	itt	lt
 800813a:	464b      	movlt	r3, r9
 800813c:	46a1      	movlt	r9, r4
 800813e:	4630      	mov	r0, r6
 8008140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008144:	bfba      	itte	lt
 8008146:	461c      	movlt	r4, r3
 8008148:	2501      	movlt	r5, #1
 800814a:	2500      	movge	r5, #0
 800814c:	f7ff fd40 	bl	8007bd0 <_Balloc>
 8008150:	4602      	mov	r2, r0
 8008152:	b918      	cbnz	r0, 800815c <__mdiff+0x60>
 8008154:	4b31      	ldr	r3, [pc, #196]	@ (800821c <__mdiff+0x120>)
 8008156:	f240 2145 	movw	r1, #581	@ 0x245
 800815a:	e7e3      	b.n	8008124 <__mdiff+0x28>
 800815c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008160:	6926      	ldr	r6, [r4, #16]
 8008162:	60c5      	str	r5, [r0, #12]
 8008164:	f109 0310 	add.w	r3, r9, #16
 8008168:	f109 0514 	add.w	r5, r9, #20
 800816c:	f104 0e14 	add.w	lr, r4, #20
 8008170:	f100 0b14 	add.w	fp, r0, #20
 8008174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	46d9      	mov	r9, fp
 8008180:	f04f 0c00 	mov.w	ip, #0
 8008184:	9b01      	ldr	r3, [sp, #4]
 8008186:	f85e 0b04 	ldr.w	r0, [lr], #4
 800818a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	fa1f f38a 	uxth.w	r3, sl
 8008194:	4619      	mov	r1, r3
 8008196:	b283      	uxth	r3, r0
 8008198:	1acb      	subs	r3, r1, r3
 800819a:	0c00      	lsrs	r0, r0, #16
 800819c:	4463      	add	r3, ip
 800819e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081ac:	4576      	cmp	r6, lr
 80081ae:	f849 3b04 	str.w	r3, [r9], #4
 80081b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081b6:	d8e5      	bhi.n	8008184 <__mdiff+0x88>
 80081b8:	1b33      	subs	r3, r6, r4
 80081ba:	3b15      	subs	r3, #21
 80081bc:	f023 0303 	bic.w	r3, r3, #3
 80081c0:	3415      	adds	r4, #21
 80081c2:	3304      	adds	r3, #4
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	bf38      	it	cc
 80081c8:	2304      	movcc	r3, #4
 80081ca:	441d      	add	r5, r3
 80081cc:	445b      	add	r3, fp
 80081ce:	461e      	mov	r6, r3
 80081d0:	462c      	mov	r4, r5
 80081d2:	4544      	cmp	r4, r8
 80081d4:	d30e      	bcc.n	80081f4 <__mdiff+0xf8>
 80081d6:	f108 0103 	add.w	r1, r8, #3
 80081da:	1b49      	subs	r1, r1, r5
 80081dc:	f021 0103 	bic.w	r1, r1, #3
 80081e0:	3d03      	subs	r5, #3
 80081e2:	45a8      	cmp	r8, r5
 80081e4:	bf38      	it	cc
 80081e6:	2100      	movcc	r1, #0
 80081e8:	440b      	add	r3, r1
 80081ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081ee:	b191      	cbz	r1, 8008216 <__mdiff+0x11a>
 80081f0:	6117      	str	r7, [r2, #16]
 80081f2:	e79d      	b.n	8008130 <__mdiff+0x34>
 80081f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80081f8:	46e6      	mov	lr, ip
 80081fa:	0c08      	lsrs	r0, r1, #16
 80081fc:	fa1c fc81 	uxtah	ip, ip, r1
 8008200:	4471      	add	r1, lr
 8008202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008206:	b289      	uxth	r1, r1
 8008208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800820c:	f846 1b04 	str.w	r1, [r6], #4
 8008210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008214:	e7dd      	b.n	80081d2 <__mdiff+0xd6>
 8008216:	3f01      	subs	r7, #1
 8008218:	e7e7      	b.n	80081ea <__mdiff+0xee>
 800821a:	bf00      	nop
 800821c:	08008be4 	.word	0x08008be4
 8008220:	08008bf5 	.word	0x08008bf5

08008224 <__d2b>:
 8008224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008228:	460f      	mov	r7, r1
 800822a:	2101      	movs	r1, #1
 800822c:	ec59 8b10 	vmov	r8, r9, d0
 8008230:	4616      	mov	r6, r2
 8008232:	f7ff fccd 	bl	8007bd0 <_Balloc>
 8008236:	4604      	mov	r4, r0
 8008238:	b930      	cbnz	r0, 8008248 <__d2b+0x24>
 800823a:	4602      	mov	r2, r0
 800823c:	4b23      	ldr	r3, [pc, #140]	@ (80082cc <__d2b+0xa8>)
 800823e:	4824      	ldr	r0, [pc, #144]	@ (80082d0 <__d2b+0xac>)
 8008240:	f240 310f 	movw	r1, #783	@ 0x30f
 8008244:	f000 f910 	bl	8008468 <__assert_func>
 8008248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800824c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008250:	b10d      	cbz	r5, 8008256 <__d2b+0x32>
 8008252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	f1b8 0300 	subs.w	r3, r8, #0
 800825c:	d023      	beq.n	80082a6 <__d2b+0x82>
 800825e:	4668      	mov	r0, sp
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	f7ff fd7c 	bl	8007d5e <__lo0bits>
 8008266:	e9dd 1200 	ldrd	r1, r2, [sp]
 800826a:	b1d0      	cbz	r0, 80082a2 <__d2b+0x7e>
 800826c:	f1c0 0320 	rsb	r3, r0, #32
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	430b      	orrs	r3, r1
 8008276:	40c2      	lsrs	r2, r0
 8008278:	6163      	str	r3, [r4, #20]
 800827a:	9201      	str	r2, [sp, #4]
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	61a3      	str	r3, [r4, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	bf0c      	ite	eq
 8008284:	2201      	moveq	r2, #1
 8008286:	2202      	movne	r2, #2
 8008288:	6122      	str	r2, [r4, #16]
 800828a:	b1a5      	cbz	r5, 80082b6 <__d2b+0x92>
 800828c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008290:	4405      	add	r5, r0
 8008292:	603d      	str	r5, [r7, #0]
 8008294:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008298:	6030      	str	r0, [r6, #0]
 800829a:	4620      	mov	r0, r4
 800829c:	b003      	add	sp, #12
 800829e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082a2:	6161      	str	r1, [r4, #20]
 80082a4:	e7ea      	b.n	800827c <__d2b+0x58>
 80082a6:	a801      	add	r0, sp, #4
 80082a8:	f7ff fd59 	bl	8007d5e <__lo0bits>
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	3020      	adds	r0, #32
 80082b2:	2201      	movs	r2, #1
 80082b4:	e7e8      	b.n	8008288 <__d2b+0x64>
 80082b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082be:	6038      	str	r0, [r7, #0]
 80082c0:	6918      	ldr	r0, [r3, #16]
 80082c2:	f7ff fd2d 	bl	8007d20 <__hi0bits>
 80082c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082ca:	e7e5      	b.n	8008298 <__d2b+0x74>
 80082cc:	08008be4 	.word	0x08008be4
 80082d0:	08008bf5 	.word	0x08008bf5

080082d4 <__sflush_r>:
 80082d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082dc:	0716      	lsls	r6, r2, #28
 80082de:	4605      	mov	r5, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	d454      	bmi.n	800838e <__sflush_r+0xba>
 80082e4:	684b      	ldr	r3, [r1, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dc02      	bgt.n	80082f0 <__sflush_r+0x1c>
 80082ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd48      	ble.n	8008382 <__sflush_r+0xae>
 80082f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082f2:	2e00      	cmp	r6, #0
 80082f4:	d045      	beq.n	8008382 <__sflush_r+0xae>
 80082f6:	2300      	movs	r3, #0
 80082f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082fc:	682f      	ldr	r7, [r5, #0]
 80082fe:	6a21      	ldr	r1, [r4, #32]
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	d030      	beq.n	8008366 <__sflush_r+0x92>
 8008304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	0759      	lsls	r1, r3, #29
 800830a:	d505      	bpl.n	8008318 <__sflush_r+0x44>
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008312:	b10b      	cbz	r3, 8008318 <__sflush_r+0x44>
 8008314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	2300      	movs	r3, #0
 800831a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800831c:	6a21      	ldr	r1, [r4, #32]
 800831e:	4628      	mov	r0, r5
 8008320:	47b0      	blx	r6
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	d106      	bne.n	8008336 <__sflush_r+0x62>
 8008328:	6829      	ldr	r1, [r5, #0]
 800832a:	291d      	cmp	r1, #29
 800832c:	d82b      	bhi.n	8008386 <__sflush_r+0xb2>
 800832e:	4a2a      	ldr	r2, [pc, #168]	@ (80083d8 <__sflush_r+0x104>)
 8008330:	410a      	asrs	r2, r1
 8008332:	07d6      	lsls	r6, r2, #31
 8008334:	d427      	bmi.n	8008386 <__sflush_r+0xb2>
 8008336:	2200      	movs	r2, #0
 8008338:	6062      	str	r2, [r4, #4]
 800833a:	04d9      	lsls	r1, r3, #19
 800833c:	6922      	ldr	r2, [r4, #16]
 800833e:	6022      	str	r2, [r4, #0]
 8008340:	d504      	bpl.n	800834c <__sflush_r+0x78>
 8008342:	1c42      	adds	r2, r0, #1
 8008344:	d101      	bne.n	800834a <__sflush_r+0x76>
 8008346:	682b      	ldr	r3, [r5, #0]
 8008348:	b903      	cbnz	r3, 800834c <__sflush_r+0x78>
 800834a:	6560      	str	r0, [r4, #84]	@ 0x54
 800834c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800834e:	602f      	str	r7, [r5, #0]
 8008350:	b1b9      	cbz	r1, 8008382 <__sflush_r+0xae>
 8008352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008356:	4299      	cmp	r1, r3
 8008358:	d002      	beq.n	8008360 <__sflush_r+0x8c>
 800835a:	4628      	mov	r0, r5
 800835c:	f7ff fb38 	bl	80079d0 <_free_r>
 8008360:	2300      	movs	r3, #0
 8008362:	6363      	str	r3, [r4, #52]	@ 0x34
 8008364:	e00d      	b.n	8008382 <__sflush_r+0xae>
 8008366:	2301      	movs	r3, #1
 8008368:	4628      	mov	r0, r5
 800836a:	47b0      	blx	r6
 800836c:	4602      	mov	r2, r0
 800836e:	1c50      	adds	r0, r2, #1
 8008370:	d1c9      	bne.n	8008306 <__sflush_r+0x32>
 8008372:	682b      	ldr	r3, [r5, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0c6      	beq.n	8008306 <__sflush_r+0x32>
 8008378:	2b1d      	cmp	r3, #29
 800837a:	d001      	beq.n	8008380 <__sflush_r+0xac>
 800837c:	2b16      	cmp	r3, #22
 800837e:	d11e      	bne.n	80083be <__sflush_r+0xea>
 8008380:	602f      	str	r7, [r5, #0]
 8008382:	2000      	movs	r0, #0
 8008384:	e022      	b.n	80083cc <__sflush_r+0xf8>
 8008386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800838a:	b21b      	sxth	r3, r3
 800838c:	e01b      	b.n	80083c6 <__sflush_r+0xf2>
 800838e:	690f      	ldr	r7, [r1, #16]
 8008390:	2f00      	cmp	r7, #0
 8008392:	d0f6      	beq.n	8008382 <__sflush_r+0xae>
 8008394:	0793      	lsls	r3, r2, #30
 8008396:	680e      	ldr	r6, [r1, #0]
 8008398:	bf08      	it	eq
 800839a:	694b      	ldreq	r3, [r1, #20]
 800839c:	600f      	str	r7, [r1, #0]
 800839e:	bf18      	it	ne
 80083a0:	2300      	movne	r3, #0
 80083a2:	eba6 0807 	sub.w	r8, r6, r7
 80083a6:	608b      	str	r3, [r1, #8]
 80083a8:	f1b8 0f00 	cmp.w	r8, #0
 80083ac:	dde9      	ble.n	8008382 <__sflush_r+0xae>
 80083ae:	6a21      	ldr	r1, [r4, #32]
 80083b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083b2:	4643      	mov	r3, r8
 80083b4:	463a      	mov	r2, r7
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b0      	blx	r6
 80083ba:	2800      	cmp	r0, #0
 80083bc:	dc08      	bgt.n	80083d0 <__sflush_r+0xfc>
 80083be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d0:	4407      	add	r7, r0
 80083d2:	eba8 0800 	sub.w	r8, r8, r0
 80083d6:	e7e7      	b.n	80083a8 <__sflush_r+0xd4>
 80083d8:	dfbffffe 	.word	0xdfbffffe

080083dc <_fflush_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	690b      	ldr	r3, [r1, #16]
 80083e0:	4605      	mov	r5, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	b913      	cbnz	r3, 80083ec <_fflush_r+0x10>
 80083e6:	2500      	movs	r5, #0
 80083e8:	4628      	mov	r0, r5
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	b118      	cbz	r0, 80083f6 <_fflush_r+0x1a>
 80083ee:	6a03      	ldr	r3, [r0, #32]
 80083f0:	b90b      	cbnz	r3, 80083f6 <_fflush_r+0x1a>
 80083f2:	f7fe fba7 	bl	8006b44 <__sinit>
 80083f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f3      	beq.n	80083e6 <_fflush_r+0xa>
 80083fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008400:	07d0      	lsls	r0, r2, #31
 8008402:	d404      	bmi.n	800840e <_fflush_r+0x32>
 8008404:	0599      	lsls	r1, r3, #22
 8008406:	d402      	bmi.n	800840e <_fflush_r+0x32>
 8008408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800840a:	f7fe fc92 	bl	8006d32 <__retarget_lock_acquire_recursive>
 800840e:	4628      	mov	r0, r5
 8008410:	4621      	mov	r1, r4
 8008412:	f7ff ff5f 	bl	80082d4 <__sflush_r>
 8008416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008418:	07da      	lsls	r2, r3, #31
 800841a:	4605      	mov	r5, r0
 800841c:	d4e4      	bmi.n	80083e8 <_fflush_r+0xc>
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	059b      	lsls	r3, r3, #22
 8008422:	d4e1      	bmi.n	80083e8 <_fflush_r+0xc>
 8008424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008426:	f7fe fc85 	bl	8006d34 <__retarget_lock_release_recursive>
 800842a:	e7dd      	b.n	80083e8 <_fflush_r+0xc>

0800842c <_sbrk_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d06      	ldr	r5, [pc, #24]	@ (8008448 <_sbrk_r+0x1c>)
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	f7f9 fb48 	bl	8001acc <_sbrk>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_sbrk_r+0x1a>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_sbrk_r+0x1a>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	200004a0 	.word	0x200004a0

0800844c <memcpy>:
 800844c:	440a      	add	r2, r1
 800844e:	4291      	cmp	r1, r2
 8008450:	f100 33ff 	add.w	r3, r0, #4294967295
 8008454:	d100      	bne.n	8008458 <memcpy+0xc>
 8008456:	4770      	bx	lr
 8008458:	b510      	push	{r4, lr}
 800845a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800845e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008462:	4291      	cmp	r1, r2
 8008464:	d1f9      	bne.n	800845a <memcpy+0xe>
 8008466:	bd10      	pop	{r4, pc}

08008468 <__assert_func>:
 8008468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800846a:	4614      	mov	r4, r2
 800846c:	461a      	mov	r2, r3
 800846e:	4b09      	ldr	r3, [pc, #36]	@ (8008494 <__assert_func+0x2c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4605      	mov	r5, r0
 8008474:	68d8      	ldr	r0, [r3, #12]
 8008476:	b954      	cbnz	r4, 800848e <__assert_func+0x26>
 8008478:	4b07      	ldr	r3, [pc, #28]	@ (8008498 <__assert_func+0x30>)
 800847a:	461c      	mov	r4, r3
 800847c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008480:	9100      	str	r1, [sp, #0]
 8008482:	462b      	mov	r3, r5
 8008484:	4905      	ldr	r1, [pc, #20]	@ (800849c <__assert_func+0x34>)
 8008486:	f000 f841 	bl	800850c <fiprintf>
 800848a:	f000 f851 	bl	8008530 <abort>
 800848e:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <__assert_func+0x38>)
 8008490:	e7f4      	b.n	800847c <__assert_func+0x14>
 8008492:	bf00      	nop
 8008494:	20000024 	.word	0x20000024
 8008498:	08008d95 	.word	0x08008d95
 800849c:	08008d67 	.word	0x08008d67
 80084a0:	08008d5a 	.word	0x08008d5a

080084a4 <_calloc_r>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	fba1 5402 	umull	r5, r4, r1, r2
 80084aa:	b93c      	cbnz	r4, 80084bc <_calloc_r+0x18>
 80084ac:	4629      	mov	r1, r5
 80084ae:	f7ff fb03 	bl	8007ab8 <_malloc_r>
 80084b2:	4606      	mov	r6, r0
 80084b4:	b928      	cbnz	r0, 80084c2 <_calloc_r+0x1e>
 80084b6:	2600      	movs	r6, #0
 80084b8:	4630      	mov	r0, r6
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	220c      	movs	r2, #12
 80084be:	6002      	str	r2, [r0, #0]
 80084c0:	e7f9      	b.n	80084b6 <_calloc_r+0x12>
 80084c2:	462a      	mov	r2, r5
 80084c4:	4621      	mov	r1, r4
 80084c6:	f7fe fbb6 	bl	8006c36 <memset>
 80084ca:	e7f5      	b.n	80084b8 <_calloc_r+0x14>

080084cc <__ascii_mbtowc>:
 80084cc:	b082      	sub	sp, #8
 80084ce:	b901      	cbnz	r1, 80084d2 <__ascii_mbtowc+0x6>
 80084d0:	a901      	add	r1, sp, #4
 80084d2:	b142      	cbz	r2, 80084e6 <__ascii_mbtowc+0x1a>
 80084d4:	b14b      	cbz	r3, 80084ea <__ascii_mbtowc+0x1e>
 80084d6:	7813      	ldrb	r3, [r2, #0]
 80084d8:	600b      	str	r3, [r1, #0]
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	1e10      	subs	r0, r2, #0
 80084de:	bf18      	it	ne
 80084e0:	2001      	movne	r0, #1
 80084e2:	b002      	add	sp, #8
 80084e4:	4770      	bx	lr
 80084e6:	4610      	mov	r0, r2
 80084e8:	e7fb      	b.n	80084e2 <__ascii_mbtowc+0x16>
 80084ea:	f06f 0001 	mvn.w	r0, #1
 80084ee:	e7f8      	b.n	80084e2 <__ascii_mbtowc+0x16>

080084f0 <__ascii_wctomb>:
 80084f0:	4603      	mov	r3, r0
 80084f2:	4608      	mov	r0, r1
 80084f4:	b141      	cbz	r1, 8008508 <__ascii_wctomb+0x18>
 80084f6:	2aff      	cmp	r2, #255	@ 0xff
 80084f8:	d904      	bls.n	8008504 <__ascii_wctomb+0x14>
 80084fa:	228a      	movs	r2, #138	@ 0x8a
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008502:	4770      	bx	lr
 8008504:	700a      	strb	r2, [r1, #0]
 8008506:	2001      	movs	r0, #1
 8008508:	4770      	bx	lr
	...

0800850c <fiprintf>:
 800850c:	b40e      	push	{r1, r2, r3}
 800850e:	b503      	push	{r0, r1, lr}
 8008510:	4601      	mov	r1, r0
 8008512:	ab03      	add	r3, sp, #12
 8008514:	4805      	ldr	r0, [pc, #20]	@ (800852c <fiprintf+0x20>)
 8008516:	f853 2b04 	ldr.w	r2, [r3], #4
 800851a:	6800      	ldr	r0, [r0, #0]
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	f000 f837 	bl	8008590 <_vfiprintf_r>
 8008522:	b002      	add	sp, #8
 8008524:	f85d eb04 	ldr.w	lr, [sp], #4
 8008528:	b003      	add	sp, #12
 800852a:	4770      	bx	lr
 800852c:	20000024 	.word	0x20000024

08008530 <abort>:
 8008530:	b508      	push	{r3, lr}
 8008532:	2006      	movs	r0, #6
 8008534:	f000 fa00 	bl	8008938 <raise>
 8008538:	2001      	movs	r0, #1
 800853a:	f7f9 fa4f 	bl	80019dc <_exit>

0800853e <__sfputc_r>:
 800853e:	6893      	ldr	r3, [r2, #8]
 8008540:	3b01      	subs	r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	b410      	push	{r4}
 8008546:	6093      	str	r3, [r2, #8]
 8008548:	da08      	bge.n	800855c <__sfputc_r+0x1e>
 800854a:	6994      	ldr	r4, [r2, #24]
 800854c:	42a3      	cmp	r3, r4
 800854e:	db01      	blt.n	8008554 <__sfputc_r+0x16>
 8008550:	290a      	cmp	r1, #10
 8008552:	d103      	bne.n	800855c <__sfputc_r+0x1e>
 8008554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008558:	f000 b932 	b.w	80087c0 <__swbuf_r>
 800855c:	6813      	ldr	r3, [r2, #0]
 800855e:	1c58      	adds	r0, r3, #1
 8008560:	6010      	str	r0, [r2, #0]
 8008562:	7019      	strb	r1, [r3, #0]
 8008564:	4608      	mov	r0, r1
 8008566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800856a:	4770      	bx	lr

0800856c <__sfputs_r>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	4606      	mov	r6, r0
 8008570:	460f      	mov	r7, r1
 8008572:	4614      	mov	r4, r2
 8008574:	18d5      	adds	r5, r2, r3
 8008576:	42ac      	cmp	r4, r5
 8008578:	d101      	bne.n	800857e <__sfputs_r+0x12>
 800857a:	2000      	movs	r0, #0
 800857c:	e007      	b.n	800858e <__sfputs_r+0x22>
 800857e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008582:	463a      	mov	r2, r7
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff ffda 	bl	800853e <__sfputc_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d1f3      	bne.n	8008576 <__sfputs_r+0xa>
 800858e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008590 <_vfiprintf_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	460d      	mov	r5, r1
 8008596:	b09d      	sub	sp, #116	@ 0x74
 8008598:	4614      	mov	r4, r2
 800859a:	4698      	mov	r8, r3
 800859c:	4606      	mov	r6, r0
 800859e:	b118      	cbz	r0, 80085a8 <_vfiprintf_r+0x18>
 80085a0:	6a03      	ldr	r3, [r0, #32]
 80085a2:	b90b      	cbnz	r3, 80085a8 <_vfiprintf_r+0x18>
 80085a4:	f7fe face 	bl	8006b44 <__sinit>
 80085a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085aa:	07d9      	lsls	r1, r3, #31
 80085ac:	d405      	bmi.n	80085ba <_vfiprintf_r+0x2a>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	059a      	lsls	r2, r3, #22
 80085b2:	d402      	bmi.n	80085ba <_vfiprintf_r+0x2a>
 80085b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085b6:	f7fe fbbc 	bl	8006d32 <__retarget_lock_acquire_recursive>
 80085ba:	89ab      	ldrh	r3, [r5, #12]
 80085bc:	071b      	lsls	r3, r3, #28
 80085be:	d501      	bpl.n	80085c4 <_vfiprintf_r+0x34>
 80085c0:	692b      	ldr	r3, [r5, #16]
 80085c2:	b99b      	cbnz	r3, 80085ec <_vfiprintf_r+0x5c>
 80085c4:	4629      	mov	r1, r5
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 f938 	bl	800883c <__swsetup_r>
 80085cc:	b170      	cbz	r0, 80085ec <_vfiprintf_r+0x5c>
 80085ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085d0:	07dc      	lsls	r4, r3, #31
 80085d2:	d504      	bpl.n	80085de <_vfiprintf_r+0x4e>
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	b01d      	add	sp, #116	@ 0x74
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	89ab      	ldrh	r3, [r5, #12]
 80085e0:	0598      	lsls	r0, r3, #22
 80085e2:	d4f7      	bmi.n	80085d4 <_vfiprintf_r+0x44>
 80085e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085e6:	f7fe fba5 	bl	8006d34 <__retarget_lock_release_recursive>
 80085ea:	e7f3      	b.n	80085d4 <_vfiprintf_r+0x44>
 80085ec:	2300      	movs	r3, #0
 80085ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f0:	2320      	movs	r3, #32
 80085f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085fa:	2330      	movs	r3, #48	@ 0x30
 80085fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087ac <_vfiprintf_r+0x21c>
 8008600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008604:	f04f 0901 	mov.w	r9, #1
 8008608:	4623      	mov	r3, r4
 800860a:	469a      	mov	sl, r3
 800860c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008610:	b10a      	cbz	r2, 8008616 <_vfiprintf_r+0x86>
 8008612:	2a25      	cmp	r2, #37	@ 0x25
 8008614:	d1f9      	bne.n	800860a <_vfiprintf_r+0x7a>
 8008616:	ebba 0b04 	subs.w	fp, sl, r4
 800861a:	d00b      	beq.n	8008634 <_vfiprintf_r+0xa4>
 800861c:	465b      	mov	r3, fp
 800861e:	4622      	mov	r2, r4
 8008620:	4629      	mov	r1, r5
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff ffa2 	bl	800856c <__sfputs_r>
 8008628:	3001      	adds	r0, #1
 800862a:	f000 80a7 	beq.w	800877c <_vfiprintf_r+0x1ec>
 800862e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008630:	445a      	add	r2, fp
 8008632:	9209      	str	r2, [sp, #36]	@ 0x24
 8008634:	f89a 3000 	ldrb.w	r3, [sl]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 809f 	beq.w	800877c <_vfiprintf_r+0x1ec>
 800863e:	2300      	movs	r3, #0
 8008640:	f04f 32ff 	mov.w	r2, #4294967295
 8008644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008648:	f10a 0a01 	add.w	sl, sl, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	9307      	str	r3, [sp, #28]
 8008650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008654:	931a      	str	r3, [sp, #104]	@ 0x68
 8008656:	4654      	mov	r4, sl
 8008658:	2205      	movs	r2, #5
 800865a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865e:	4853      	ldr	r0, [pc, #332]	@ (80087ac <_vfiprintf_r+0x21c>)
 8008660:	f7f7 fdb6 	bl	80001d0 <memchr>
 8008664:	9a04      	ldr	r2, [sp, #16]
 8008666:	b9d8      	cbnz	r0, 80086a0 <_vfiprintf_r+0x110>
 8008668:	06d1      	lsls	r1, r2, #27
 800866a:	bf44      	itt	mi
 800866c:	2320      	movmi	r3, #32
 800866e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008672:	0713      	lsls	r3, r2, #28
 8008674:	bf44      	itt	mi
 8008676:	232b      	movmi	r3, #43	@ 0x2b
 8008678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800867c:	f89a 3000 	ldrb.w	r3, [sl]
 8008680:	2b2a      	cmp	r3, #42	@ 0x2a
 8008682:	d015      	beq.n	80086b0 <_vfiprintf_r+0x120>
 8008684:	9a07      	ldr	r2, [sp, #28]
 8008686:	4654      	mov	r4, sl
 8008688:	2000      	movs	r0, #0
 800868a:	f04f 0c0a 	mov.w	ip, #10
 800868e:	4621      	mov	r1, r4
 8008690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008694:	3b30      	subs	r3, #48	@ 0x30
 8008696:	2b09      	cmp	r3, #9
 8008698:	d94b      	bls.n	8008732 <_vfiprintf_r+0x1a2>
 800869a:	b1b0      	cbz	r0, 80086ca <_vfiprintf_r+0x13a>
 800869c:	9207      	str	r2, [sp, #28]
 800869e:	e014      	b.n	80086ca <_vfiprintf_r+0x13a>
 80086a0:	eba0 0308 	sub.w	r3, r0, r8
 80086a4:	fa09 f303 	lsl.w	r3, r9, r3
 80086a8:	4313      	orrs	r3, r2
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	46a2      	mov	sl, r4
 80086ae:	e7d2      	b.n	8008656 <_vfiprintf_r+0xc6>
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	1d19      	adds	r1, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	9103      	str	r1, [sp, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	bfbb      	ittet	lt
 80086bc:	425b      	neglt	r3, r3
 80086be:	f042 0202 	orrlt.w	r2, r2, #2
 80086c2:	9307      	strge	r3, [sp, #28]
 80086c4:	9307      	strlt	r3, [sp, #28]
 80086c6:	bfb8      	it	lt
 80086c8:	9204      	strlt	r2, [sp, #16]
 80086ca:	7823      	ldrb	r3, [r4, #0]
 80086cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80086ce:	d10a      	bne.n	80086e6 <_vfiprintf_r+0x156>
 80086d0:	7863      	ldrb	r3, [r4, #1]
 80086d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086d4:	d132      	bne.n	800873c <_vfiprintf_r+0x1ac>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	1d1a      	adds	r2, r3, #4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	9203      	str	r2, [sp, #12]
 80086de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086e2:	3402      	adds	r4, #2
 80086e4:	9305      	str	r3, [sp, #20]
 80086e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087bc <_vfiprintf_r+0x22c>
 80086ea:	7821      	ldrb	r1, [r4, #0]
 80086ec:	2203      	movs	r2, #3
 80086ee:	4650      	mov	r0, sl
 80086f0:	f7f7 fd6e 	bl	80001d0 <memchr>
 80086f4:	b138      	cbz	r0, 8008706 <_vfiprintf_r+0x176>
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	eba0 000a 	sub.w	r0, r0, sl
 80086fc:	2240      	movs	r2, #64	@ 0x40
 80086fe:	4082      	lsls	r2, r0
 8008700:	4313      	orrs	r3, r2
 8008702:	3401      	adds	r4, #1
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870a:	4829      	ldr	r0, [pc, #164]	@ (80087b0 <_vfiprintf_r+0x220>)
 800870c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008710:	2206      	movs	r2, #6
 8008712:	f7f7 fd5d 	bl	80001d0 <memchr>
 8008716:	2800      	cmp	r0, #0
 8008718:	d03f      	beq.n	800879a <_vfiprintf_r+0x20a>
 800871a:	4b26      	ldr	r3, [pc, #152]	@ (80087b4 <_vfiprintf_r+0x224>)
 800871c:	bb1b      	cbnz	r3, 8008766 <_vfiprintf_r+0x1d6>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	3307      	adds	r3, #7
 8008722:	f023 0307 	bic.w	r3, r3, #7
 8008726:	3308      	adds	r3, #8
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872c:	443b      	add	r3, r7
 800872e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008730:	e76a      	b.n	8008608 <_vfiprintf_r+0x78>
 8008732:	fb0c 3202 	mla	r2, ip, r2, r3
 8008736:	460c      	mov	r4, r1
 8008738:	2001      	movs	r0, #1
 800873a:	e7a8      	b.n	800868e <_vfiprintf_r+0xfe>
 800873c:	2300      	movs	r3, #0
 800873e:	3401      	adds	r4, #1
 8008740:	9305      	str	r3, [sp, #20]
 8008742:	4619      	mov	r1, r3
 8008744:	f04f 0c0a 	mov.w	ip, #10
 8008748:	4620      	mov	r0, r4
 800874a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800874e:	3a30      	subs	r2, #48	@ 0x30
 8008750:	2a09      	cmp	r2, #9
 8008752:	d903      	bls.n	800875c <_vfiprintf_r+0x1cc>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0c6      	beq.n	80086e6 <_vfiprintf_r+0x156>
 8008758:	9105      	str	r1, [sp, #20]
 800875a:	e7c4      	b.n	80086e6 <_vfiprintf_r+0x156>
 800875c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008760:	4604      	mov	r4, r0
 8008762:	2301      	movs	r3, #1
 8008764:	e7f0      	b.n	8008748 <_vfiprintf_r+0x1b8>
 8008766:	ab03      	add	r3, sp, #12
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	462a      	mov	r2, r5
 800876c:	4b12      	ldr	r3, [pc, #72]	@ (80087b8 <_vfiprintf_r+0x228>)
 800876e:	a904      	add	r1, sp, #16
 8008770:	4630      	mov	r0, r6
 8008772:	f7fd fda3 	bl	80062bc <_printf_float>
 8008776:	4607      	mov	r7, r0
 8008778:	1c78      	adds	r0, r7, #1
 800877a:	d1d6      	bne.n	800872a <_vfiprintf_r+0x19a>
 800877c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	d405      	bmi.n	800878e <_vfiprintf_r+0x1fe>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d402      	bmi.n	800878e <_vfiprintf_r+0x1fe>
 8008788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800878a:	f7fe fad3 	bl	8006d34 <__retarget_lock_release_recursive>
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	065b      	lsls	r3, r3, #25
 8008792:	f53f af1f 	bmi.w	80085d4 <_vfiprintf_r+0x44>
 8008796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008798:	e71e      	b.n	80085d8 <_vfiprintf_r+0x48>
 800879a:	ab03      	add	r3, sp, #12
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	462a      	mov	r2, r5
 80087a0:	4b05      	ldr	r3, [pc, #20]	@ (80087b8 <_vfiprintf_r+0x228>)
 80087a2:	a904      	add	r1, sp, #16
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7fe f821 	bl	80067ec <_printf_i>
 80087aa:	e7e4      	b.n	8008776 <_vfiprintf_r+0x1e6>
 80087ac:	08008e97 	.word	0x08008e97
 80087b0:	08008ea1 	.word	0x08008ea1
 80087b4:	080062bd 	.word	0x080062bd
 80087b8:	0800856d 	.word	0x0800856d
 80087bc:	08008e9d 	.word	0x08008e9d

080087c0 <__swbuf_r>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	460e      	mov	r6, r1
 80087c4:	4614      	mov	r4, r2
 80087c6:	4605      	mov	r5, r0
 80087c8:	b118      	cbz	r0, 80087d2 <__swbuf_r+0x12>
 80087ca:	6a03      	ldr	r3, [r0, #32]
 80087cc:	b90b      	cbnz	r3, 80087d2 <__swbuf_r+0x12>
 80087ce:	f7fe f9b9 	bl	8006b44 <__sinit>
 80087d2:	69a3      	ldr	r3, [r4, #24]
 80087d4:	60a3      	str	r3, [r4, #8]
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	071a      	lsls	r2, r3, #28
 80087da:	d501      	bpl.n	80087e0 <__swbuf_r+0x20>
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	b943      	cbnz	r3, 80087f2 <__swbuf_r+0x32>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f82a 	bl	800883c <__swsetup_r>
 80087e8:	b118      	cbz	r0, 80087f2 <__swbuf_r+0x32>
 80087ea:	f04f 37ff 	mov.w	r7, #4294967295
 80087ee:	4638      	mov	r0, r7
 80087f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	1a98      	subs	r0, r3, r2
 80087f8:	6963      	ldr	r3, [r4, #20]
 80087fa:	b2f6      	uxtb	r6, r6
 80087fc:	4283      	cmp	r3, r0
 80087fe:	4637      	mov	r7, r6
 8008800:	dc05      	bgt.n	800880e <__swbuf_r+0x4e>
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f7ff fde9 	bl	80083dc <_fflush_r>
 800880a:	2800      	cmp	r0, #0
 800880c:	d1ed      	bne.n	80087ea <__swbuf_r+0x2a>
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	3b01      	subs	r3, #1
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	701e      	strb	r6, [r3, #0]
 800881c:	6962      	ldr	r2, [r4, #20]
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	429a      	cmp	r2, r3
 8008822:	d004      	beq.n	800882e <__swbuf_r+0x6e>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	07db      	lsls	r3, r3, #31
 8008828:	d5e1      	bpl.n	80087ee <__swbuf_r+0x2e>
 800882a:	2e0a      	cmp	r6, #10
 800882c:	d1df      	bne.n	80087ee <__swbuf_r+0x2e>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f7ff fdd3 	bl	80083dc <_fflush_r>
 8008836:	2800      	cmp	r0, #0
 8008838:	d0d9      	beq.n	80087ee <__swbuf_r+0x2e>
 800883a:	e7d6      	b.n	80087ea <__swbuf_r+0x2a>

0800883c <__swsetup_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4b29      	ldr	r3, [pc, #164]	@ (80088e4 <__swsetup_r+0xa8>)
 8008840:	4605      	mov	r5, r0
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	460c      	mov	r4, r1
 8008846:	b118      	cbz	r0, 8008850 <__swsetup_r+0x14>
 8008848:	6a03      	ldr	r3, [r0, #32]
 800884a:	b90b      	cbnz	r3, 8008850 <__swsetup_r+0x14>
 800884c:	f7fe f97a 	bl	8006b44 <__sinit>
 8008850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008854:	0719      	lsls	r1, r3, #28
 8008856:	d422      	bmi.n	800889e <__swsetup_r+0x62>
 8008858:	06da      	lsls	r2, r3, #27
 800885a:	d407      	bmi.n	800886c <__swsetup_r+0x30>
 800885c:	2209      	movs	r2, #9
 800885e:	602a      	str	r2, [r5, #0]
 8008860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	f04f 30ff 	mov.w	r0, #4294967295
 800886a:	e033      	b.n	80088d4 <__swsetup_r+0x98>
 800886c:	0758      	lsls	r0, r3, #29
 800886e:	d512      	bpl.n	8008896 <__swsetup_r+0x5a>
 8008870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008872:	b141      	cbz	r1, 8008886 <__swsetup_r+0x4a>
 8008874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008878:	4299      	cmp	r1, r3
 800887a:	d002      	beq.n	8008882 <__swsetup_r+0x46>
 800887c:	4628      	mov	r0, r5
 800887e:	f7ff f8a7 	bl	80079d0 <_free_r>
 8008882:	2300      	movs	r3, #0
 8008884:	6363      	str	r3, [r4, #52]	@ 0x34
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	2300      	movs	r3, #0
 8008890:	6063      	str	r3, [r4, #4]
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	f043 0308 	orr.w	r3, r3, #8
 800889c:	81a3      	strh	r3, [r4, #12]
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	b94b      	cbnz	r3, 80088b6 <__swsetup_r+0x7a>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ac:	d003      	beq.n	80088b6 <__swsetup_r+0x7a>
 80088ae:	4621      	mov	r1, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 f883 	bl	80089bc <__smakebuf_r>
 80088b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ba:	f013 0201 	ands.w	r2, r3, #1
 80088be:	d00a      	beq.n	80088d6 <__swsetup_r+0x9a>
 80088c0:	2200      	movs	r2, #0
 80088c2:	60a2      	str	r2, [r4, #8]
 80088c4:	6962      	ldr	r2, [r4, #20]
 80088c6:	4252      	negs	r2, r2
 80088c8:	61a2      	str	r2, [r4, #24]
 80088ca:	6922      	ldr	r2, [r4, #16]
 80088cc:	b942      	cbnz	r2, 80088e0 <__swsetup_r+0xa4>
 80088ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088d2:	d1c5      	bne.n	8008860 <__swsetup_r+0x24>
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	0799      	lsls	r1, r3, #30
 80088d8:	bf58      	it	pl
 80088da:	6962      	ldrpl	r2, [r4, #20]
 80088dc:	60a2      	str	r2, [r4, #8]
 80088de:	e7f4      	b.n	80088ca <__swsetup_r+0x8e>
 80088e0:	2000      	movs	r0, #0
 80088e2:	e7f7      	b.n	80088d4 <__swsetup_r+0x98>
 80088e4:	20000024 	.word	0x20000024

080088e8 <_raise_r>:
 80088e8:	291f      	cmp	r1, #31
 80088ea:	b538      	push	{r3, r4, r5, lr}
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	d904      	bls.n	80088fc <_raise_r+0x14>
 80088f2:	2316      	movs	r3, #22
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	f04f 30ff 	mov.w	r0, #4294967295
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088fe:	b112      	cbz	r2, 8008906 <_raise_r+0x1e>
 8008900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008904:	b94b      	cbnz	r3, 800891a <_raise_r+0x32>
 8008906:	4628      	mov	r0, r5
 8008908:	f000 f830 	bl	800896c <_getpid_r>
 800890c:	4622      	mov	r2, r4
 800890e:	4601      	mov	r1, r0
 8008910:	4628      	mov	r0, r5
 8008912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008916:	f000 b817 	b.w	8008948 <_kill_r>
 800891a:	2b01      	cmp	r3, #1
 800891c:	d00a      	beq.n	8008934 <_raise_r+0x4c>
 800891e:	1c59      	adds	r1, r3, #1
 8008920:	d103      	bne.n	800892a <_raise_r+0x42>
 8008922:	2316      	movs	r3, #22
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	2001      	movs	r0, #1
 8008928:	e7e7      	b.n	80088fa <_raise_r+0x12>
 800892a:	2100      	movs	r1, #0
 800892c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008930:	4620      	mov	r0, r4
 8008932:	4798      	blx	r3
 8008934:	2000      	movs	r0, #0
 8008936:	e7e0      	b.n	80088fa <_raise_r+0x12>

08008938 <raise>:
 8008938:	4b02      	ldr	r3, [pc, #8]	@ (8008944 <raise+0xc>)
 800893a:	4601      	mov	r1, r0
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f7ff bfd3 	b.w	80088e8 <_raise_r>
 8008942:	bf00      	nop
 8008944:	20000024 	.word	0x20000024

08008948 <_kill_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d07      	ldr	r5, [pc, #28]	@ (8008968 <_kill_r+0x20>)
 800894c:	2300      	movs	r3, #0
 800894e:	4604      	mov	r4, r0
 8008950:	4608      	mov	r0, r1
 8008952:	4611      	mov	r1, r2
 8008954:	602b      	str	r3, [r5, #0]
 8008956:	f7f9 f831 	bl	80019bc <_kill>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	d102      	bne.n	8008964 <_kill_r+0x1c>
 800895e:	682b      	ldr	r3, [r5, #0]
 8008960:	b103      	cbz	r3, 8008964 <_kill_r+0x1c>
 8008962:	6023      	str	r3, [r4, #0]
 8008964:	bd38      	pop	{r3, r4, r5, pc}
 8008966:	bf00      	nop
 8008968:	200004a0 	.word	0x200004a0

0800896c <_getpid_r>:
 800896c:	f7f9 b81e 	b.w	80019ac <_getpid>

08008970 <__swhatbuf_r>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	460c      	mov	r4, r1
 8008974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008978:	2900      	cmp	r1, #0
 800897a:	b096      	sub	sp, #88	@ 0x58
 800897c:	4615      	mov	r5, r2
 800897e:	461e      	mov	r6, r3
 8008980:	da0d      	bge.n	800899e <__swhatbuf_r+0x2e>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008988:	f04f 0100 	mov.w	r1, #0
 800898c:	bf14      	ite	ne
 800898e:	2340      	movne	r3, #64	@ 0x40
 8008990:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008994:	2000      	movs	r0, #0
 8008996:	6031      	str	r1, [r6, #0]
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	b016      	add	sp, #88	@ 0x58
 800899c:	bd70      	pop	{r4, r5, r6, pc}
 800899e:	466a      	mov	r2, sp
 80089a0:	f000 f848 	bl	8008a34 <_fstat_r>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	dbec      	blt.n	8008982 <__swhatbuf_r+0x12>
 80089a8:	9901      	ldr	r1, [sp, #4]
 80089aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089b2:	4259      	negs	r1, r3
 80089b4:	4159      	adcs	r1, r3
 80089b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ba:	e7eb      	b.n	8008994 <__swhatbuf_r+0x24>

080089bc <__smakebuf_r>:
 80089bc:	898b      	ldrh	r3, [r1, #12]
 80089be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089c0:	079d      	lsls	r5, r3, #30
 80089c2:	4606      	mov	r6, r0
 80089c4:	460c      	mov	r4, r1
 80089c6:	d507      	bpl.n	80089d8 <__smakebuf_r+0x1c>
 80089c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	6123      	str	r3, [r4, #16]
 80089d0:	2301      	movs	r3, #1
 80089d2:	6163      	str	r3, [r4, #20]
 80089d4:	b003      	add	sp, #12
 80089d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d8:	ab01      	add	r3, sp, #4
 80089da:	466a      	mov	r2, sp
 80089dc:	f7ff ffc8 	bl	8008970 <__swhatbuf_r>
 80089e0:	9f00      	ldr	r7, [sp, #0]
 80089e2:	4605      	mov	r5, r0
 80089e4:	4639      	mov	r1, r7
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7ff f866 	bl	8007ab8 <_malloc_r>
 80089ec:	b948      	cbnz	r0, 8008a02 <__smakebuf_r+0x46>
 80089ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f2:	059a      	lsls	r2, r3, #22
 80089f4:	d4ee      	bmi.n	80089d4 <__smakebuf_r+0x18>
 80089f6:	f023 0303 	bic.w	r3, r3, #3
 80089fa:	f043 0302 	orr.w	r3, r3, #2
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	e7e2      	b.n	80089c8 <__smakebuf_r+0xc>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	6020      	str	r0, [r4, #0]
 8008a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	9b01      	ldr	r3, [sp, #4]
 8008a0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a12:	b15b      	cbz	r3, 8008a2c <__smakebuf_r+0x70>
 8008a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 f81d 	bl	8008a58 <_isatty_r>
 8008a1e:	b128      	cbz	r0, 8008a2c <__smakebuf_r+0x70>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	431d      	orrs	r5, r3
 8008a30:	81a5      	strh	r5, [r4, #12]
 8008a32:	e7cf      	b.n	80089d4 <__smakebuf_r+0x18>

08008a34 <_fstat_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	@ (8008a54 <_fstat_r+0x20>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f7f9 f81b 	bl	8001a7c <_fstat>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d102      	bne.n	8008a50 <_fstat_r+0x1c>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b103      	cbz	r3, 8008a50 <_fstat_r+0x1c>
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	200004a0 	.word	0x200004a0

08008a58 <_isatty_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	@ (8008a74 <_isatty_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f9 f81a 	bl	8001a9c <_isatty>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_isatty_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_isatty_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	200004a0 	.word	0x200004a0

08008a78 <_init>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr

08008a84 <_fini>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr
