
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008510  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080086a0  080086a0  000096a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a48  08008a48  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a48  08008a48  00009a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a50  08008a50  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a50  08008a50  00009a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a54  08008a54  00009a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008a58  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1dc  2**0
                  CONTENTS
 10 .bss          0000032c  200001dc  200001dc  0000a1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000508  20000508  0000a1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011218  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002762  00000000  00000000  0001b424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  0001db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c39  00000000  00000000  0001eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f704  00000000  00000000  0001f781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001352d  00000000  00000000  0003ee85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb725  00000000  00000000  000523b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010dad7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051cc  00000000  00000000  0010db1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00112ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008688 	.word	0x08008688

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008688 	.word	0x08008688

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f000 fdeb 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f82d 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f9e1 	bl	8000f7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bba:	f000 f9af 	bl	8000f1c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000bbe:	f000 f97d 	bl	8000ebc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000bc2:	f000 f8a7 	bl	8000d14 <MX_TIM3_Init>
  MX_DAC_Init();
 8000bc6:	f000 f87b 	bl	8000cc0 <MX_DAC_Init>
  MX_TIM4_Init();
 8000bca:	f000 f929 	bl	8000e20 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

    HAL_UART_Receive_IT(&huart1, uart1_buffer, 1); // Prepare UART1 reception
 8000bce:	2201      	movs	r2, #1
 8000bd0:	490a      	ldr	r1, [pc, #40]	@ (8000bfc <main+0x54>)
 8000bd2:	480b      	ldr	r0, [pc, #44]	@ (8000c00 <main+0x58>)
 8000bd4:	f003 feff 	bl	80049d6 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, uart2_buffer, 1); // Prepare UART2 reception
 8000bd8:	2201      	movs	r2, #1
 8000bda:	490a      	ldr	r1, [pc, #40]	@ (8000c04 <main+0x5c>)
 8000bdc:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <main+0x60>)
 8000bde:	f003 fefa 	bl	80049d6 <HAL_UART_Receive_IT>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Prepare PWM for turret servo motor
 8000be2:	2100      	movs	r1, #0
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <main+0x64>)
 8000be6:	f002 fe9b 	bl	8003920 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Prepare PWM for LED servo motor
 8000bea:	2104      	movs	r1, #4
 8000bec:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <main+0x64>)
 8000bee:	f002 fe97 	bl	8003920 <HAL_TIM_PWM_Start>

    int loop_counter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1) {
 8000bf6:	bf00      	nop
 8000bf8:	e7fd      	b.n	8000bf6 <main+0x4e>
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	200002a4 	.word	0x200002a4
 8000c04:	20000004 	.word	0x20000004
 8000c08:	2000032c 	.word	0x2000032c
 8000c0c:	2000020c 	.word	0x2000020c

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b09e      	sub	sp, #120	@ 0x78
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c1a:	2228      	movs	r2, #40	@ 0x28
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f005 fe11 	bl	8006846 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	223c      	movs	r2, #60	@ 0x3c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f005 fe03 	bl	8006846 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c40:	2302      	movs	r3, #2
 8000c42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c50:	2300      	movs	r3, #0
 8000c52:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c54:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8000c58:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 f982 	bl	8001f68 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c6a:	f000 fac1 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2302      	movs	r3, #2
 8000c74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c84:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 f9aa 	bl	8002fe4 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c96:	f000 faab 	bl	80011f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fbd1 	bl	8003450 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000cb4:	f000 fa9c 	bl	80011f0 <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3778      	adds	r7, #120	@ 0x78
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_DAC_Init+0x4c>)
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d10 <MX_DAC_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000cd6:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <MX_DAC_Init+0x4c>)
 8000cd8:	f000 fecd 	bl	8001a76 <HAL_DAC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000ce2:	f000 fa85 	bl	80011f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000ce6:	232c      	movs	r3, #44	@ 0x2c
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_DAC_Init+0x4c>)
 8000cf6:	f000 fee0 	bl	8001aba <HAL_DAC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000d00:	f000 fa76 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001f8 	.word	0x200001f8
 8000d10:	40007400 	.word	0x40007400

08000d14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	@ 0x38
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	615a      	str	r2, [r3, #20]
 8000d44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d46:	4b34      	ldr	r3, [pc, #208]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d48:	4a34      	ldr	r2, [pc, #208]	@ (8000e1c <MX_TIM3_Init+0x108>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000d4c:	4b32      	ldr	r3, [pc, #200]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d4e:	222f      	movs	r2, #47	@ 0x2f
 8000d50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b31      	ldr	r3, [pc, #196]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000d58:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d5a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b2c      	ldr	r3, [pc, #176]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d6c:	482a      	ldr	r0, [pc, #168]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d6e:	f002 fd1f 	bl	80037b0 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d78:	f000 fa3a 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4823      	ldr	r0, [pc, #140]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d8a:	f002 ffdd 	bl	8003d48 <HAL_TIM_ConfigClockSource>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d94:	f000 fa2c 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d98:	481f      	ldr	r0, [pc, #124]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000d9a:	f002 fd60 	bl	800385e <HAL_TIM_PWM_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000da4:	f000 fa24 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4818      	ldr	r0, [pc, #96]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000db8:	f003 fcb6 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dc2:	f000 fa15 	bl	80011f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc6:	2360      	movs	r3, #96	@ 0x60
 8000dc8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2400;
 8000dca:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8000dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480e      	ldr	r0, [pc, #56]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000de0:	f002 fe9e 	bl	8003b20 <HAL_TIM_PWM_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000dea:	f000 fa01 	bl	80011f0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2208      	movs	r2, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000dfa:	f002 fe91 	bl	8003b20 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8000e04:	f000 f9f4 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <MX_TIM3_Init+0x104>)
 8000e0a:	f000 fa8d 	bl	8001328 <HAL_TIM_MspPostInit>

}
 8000e0e:	bf00      	nop
 8000e10:	3738      	adds	r7, #56	@ 0x38
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000020c 	.word	0x2000020c
 8000e1c:	40000400 	.word	0x40000400

08000e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e40:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb8 <MX_TIM4_Init+0x98>)
 8000e42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e46:	222f      	movs	r2, #47	@ 0x2f
 8000e48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e64:	4813      	ldr	r0, [pc, #76]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e66:	f002 fca3 	bl	80037b0 <HAL_TIM_Base_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000e70:	f000 f9be 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e82:	f002 ff61 	bl	8003d48 <HAL_TIM_ConfigClockSource>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f000 f9b0 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_TIM4_Init+0x94>)
 8000e9e:	f003 fc43 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ea8:	f000 f9a2 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000258 	.word	0x20000258
 8000eb8:	40000800 	.word	0x40000800

08000ebc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ec2:	4a15      	ldr	r2, [pc, #84]	@ (8000f18 <MX_USART1_UART_Init+0x5c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ec8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_USART1_UART_Init+0x58>)
 8000f00:	f003 fc92 	bl	8004828 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f000 f971 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200002a4 	.word	0x200002a4
 8000f18:	40013800 	.word	0x40013800

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f22:	4a15      	ldr	r2, [pc, #84]	@ (8000f78 <MX_USART2_UART_Init+0x5c>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f28:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_USART2_UART_Init+0x58>)
 8000f60:	f003 fc62 	bl	8004828 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f000 f941 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000032c 	.word	0x2000032c
 8000f78:	40004400 	.word	0x40004400

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	@ 0x30
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4b76      	ldr	r3, [pc, #472]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a75      	ldr	r2, [pc, #468]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b73      	ldr	r3, [pc, #460]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b70      	ldr	r3, [pc, #448]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a6f      	ldr	r2, [pc, #444]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	4a69      	ldr	r2, [pc, #420]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fcc:	6153      	str	r3, [r2, #20]
 8000fce:	4b67      	ldr	r3, [pc, #412]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b64      	ldr	r3, [pc, #400]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a63      	ldr	r2, [pc, #396]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	6153      	str	r3, [r2, #20]
 8000fe6:	4b61      	ldr	r3, [pc, #388]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a5d      	ldr	r2, [pc, #372]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ffc:	6153      	str	r3, [r2, #20]
 8000ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b58      	ldr	r3, [pc, #352]	@ (800116c <MX_GPIO_Init+0x1f0>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a57      	ldr	r2, [pc, #348]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8001010:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b55      	ldr	r3, [pc, #340]	@ (800116c <MX_GPIO_Init+0x1f0>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001022:	2200      	movs	r2, #0
 8001024:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001028:	4851      	ldr	r0, [pc, #324]	@ (8001170 <MX_GPIO_Init+0x1f4>)
 800102a:	f000 ff85 	bl	8001f38 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_PIN_US_OUT_GPIO_Port, GPIO_PIN_US_OUT_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2102      	movs	r1, #2
 8001032:	4850      	ldr	r0, [pc, #320]	@ (8001174 <MX_GPIO_Init+0x1f8>)
 8001034:	f000 ff80 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2108      	movs	r1, #8
 800103c:	484e      	ldr	r0, [pc, #312]	@ (8001178 <MX_GPIO_Init+0x1fc>)
 800103e:	f000 ff7b 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001042:	2337      	movs	r3, #55	@ 0x37
 8001044:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001046:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4846      	ldr	r0, [pc, #280]	@ (8001170 <MX_GPIO_Init+0x1f4>)
 8001058:	f000 fdf4 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800105c:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001060:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	483e      	ldr	r0, [pc, #248]	@ (8001170 <MX_GPIO_Init+0x1f4>)
 8001076:	f000 fde5 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800107a:	2306      	movs	r3, #6
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001082:	2302      	movs	r3, #2
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	483b      	ldr	r0, [pc, #236]	@ (800117c <MX_GPIO_Init+0x200>)
 800108e:	f000 fdd9 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001092:	2301      	movs	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a8:	f000 fdcc 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010ac:	23e0      	movs	r3, #224	@ 0xe0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010bc:	2305      	movs	r3, #5
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ca:	f000 fdbb 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_US_OUT_Pin;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d6:	2302      	movs	r3, #2
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010da:	2301      	movs	r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_PIN_US_OUT_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4823      	ldr	r0, [pc, #140]	@ (8001174 <MX_GPIO_Init+0x1f8>)
 80010e6:	f000 fdad 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_US_IN_Pin;
 80010ea:	2304      	movs	r3, #4
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f2:	2302      	movs	r3, #2
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_PIN_US_IN_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	481d      	ldr	r0, [pc, #116]	@ (8001174 <MX_GPIO_Init+0x1f8>)
 80010fe:	f000 fda1 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001102:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001114:	230e      	movs	r3, #14
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001122:	f000 fd8f 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001126:	2308      	movs	r3, #8
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	480e      	ldr	r0, [pc, #56]	@ (8001178 <MX_GPIO_Init+0x1fc>)
 800113e:	f000 fd81 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001142:	23c0      	movs	r3, #192	@ 0xc0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001146:	2312      	movs	r3, #18
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001152:	2304      	movs	r3, #4
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_GPIO_Init+0x1f8>)
 800115e:	f000 fd71 	bl	8001c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001162:	bf00      	nop
 8001164:	3730      	adds	r7, #48	@ 0x30
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	48001000 	.word	0x48001000
 8001174:	48000400 	.word	0x48000400
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48000800 	.word	0x48000800

08001180 <HAL_UART_RxCpltCallback>:
    float distance_cm = pulse_duration / 58.0f;
    return distance_cm;
}

/* Callback function for UART reception */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    UNUSED(huart);

    if (huart->Instance == USART2) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <HAL_UART_RxCpltCallback+0x58>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10b      	bne.n	80011aa <HAL_UART_RxCpltCallback+0x2a>
        HAL_UART_Transmit(&huart1, uart2_buffer, 1, 50);
 8001192:	2332      	movs	r3, #50	@ 0x32
 8001194:	2201      	movs	r2, #1
 8001196:	4911      	ldr	r1, [pc, #68]	@ (80011dc <HAL_UART_RxCpltCallback+0x5c>)
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <HAL_UART_RxCpltCallback+0x60>)
 800119a:	f003 fb93 	bl	80048c4 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart2, uart2_buffer, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	490e      	ldr	r1, [pc, #56]	@ (80011dc <HAL_UART_RxCpltCallback+0x5c>)
 80011a2:	4810      	ldr	r0, [pc, #64]	@ (80011e4 <HAL_UART_RxCpltCallback+0x64>)
 80011a4:	f003 fc17 	bl	80049d6 <HAL_UART_Receive_IT>
        HAL_UART_Transmit(&huart2, uart1_buffer, 1, 50);
        HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
    } else {
        Error_Handler();
    }
}
 80011a8:	e012      	b.n	80011d0 <HAL_UART_RxCpltCallback+0x50>
    } else if (huart->Instance == USART1) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_UART_RxCpltCallback+0x68>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d10b      	bne.n	80011cc <HAL_UART_RxCpltCallback+0x4c>
        HAL_UART_Transmit(&huart2, uart1_buffer, 1, 50);
 80011b4:	2332      	movs	r3, #50	@ 0x32
 80011b6:	2201      	movs	r2, #1
 80011b8:	490c      	ldr	r1, [pc, #48]	@ (80011ec <HAL_UART_RxCpltCallback+0x6c>)
 80011ba:	480a      	ldr	r0, [pc, #40]	@ (80011e4 <HAL_UART_RxCpltCallback+0x64>)
 80011bc:	f003 fb82 	bl	80048c4 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart1, uart1_buffer, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	490a      	ldr	r1, [pc, #40]	@ (80011ec <HAL_UART_RxCpltCallback+0x6c>)
 80011c4:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <HAL_UART_RxCpltCallback+0x60>)
 80011c6:	f003 fc06 	bl	80049d6 <HAL_UART_Receive_IT>
}
 80011ca:	e001      	b.n	80011d0 <HAL_UART_RxCpltCallback+0x50>
        Error_Handler();
 80011cc:	f000 f810 	bl	80011f0 <Error_Handler>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40004400 	.word	0x40004400
 80011dc:	20000004 	.word	0x20000004
 80011e0:	200002a4 	.word	0x200002a4
 80011e4:	2000032c 	.word	0x2000032c
 80011e8:	40013800 	.word	0x40013800
 80011ec:	20000000 	.word	0x20000000

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <Error_Handler+0x8>

080011fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <HAL_MspInit+0x44>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a0e      	ldr	r2, [pc, #56]	@ (8001240 <HAL_MspInit+0x44>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <HAL_MspInit+0x44>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_MspInit+0x44>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <HAL_MspInit+0x44>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001232:	2007      	movs	r0, #7
 8001234:	f000 fbde 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a15      	ldr	r2, [pc, #84]	@ (80012b8 <HAL_DAC_MspInit+0x74>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d124      	bne.n	80012b0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_DAC_MspInit+0x78>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <HAL_DAC_MspInit+0x78>)
 800126c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_DAC_MspInit+0x78>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_DAC_MspInit+0x78>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <HAL_DAC_MspInit+0x78>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_DAC_MspInit+0x78>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001296:	2310      	movs	r3, #16
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ac:	f000 fcca 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40007400 	.word	0x40007400
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <HAL_TIM_Base_MspInit+0x5c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10c      	bne.n	80012ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d2:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <HAL_TIM_Base_MspInit+0x60>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <HAL_TIM_Base_MspInit+0x60>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <HAL_TIM_Base_MspInit+0x60>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012ea:	e010      	b.n	800130e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <HAL_TIM_Base_MspInit+0x64>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10b      	bne.n	800130e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_TIM_Base_MspInit+0x60>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a09      	ldr	r2, [pc, #36]	@ (8001320 <HAL_TIM_Base_MspInit+0x60>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <HAL_TIM_Base_MspInit+0x60>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40000400 	.word	0x40000400
 8001320:	40021000 	.word	0x40021000
 8001324:	40000800 	.word	0x40000800

08001328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <HAL_TIM_MspPostInit+0x9c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d137      	bne.n	80013ba <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <HAL_TIM_MspPostInit+0xa0>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <HAL_TIM_MspPostInit+0xa0>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <HAL_TIM_MspPostInit+0xa0>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_TIM_MspPostInit+0xa0>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a18      	ldr	r2, [pc, #96]	@ (80013c8 <HAL_TIM_MspPostInit+0xa0>)
 8001368:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <HAL_TIM_MspPostInit+0xa0>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800138a:	2302      	movs	r3, #2
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <HAL_TIM_MspPostInit+0xa4>)
 8001396:	f000 fc55 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <HAL_TIM_MspPostInit+0xa8>)
 80013b6:	f000 fc45 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a3e      	ldr	r2, [pc, #248]	@ (80014ec <HAL_UART_MspInit+0x118>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d140      	bne.n	8001478 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f6:	4b3e      	ldr	r3, [pc, #248]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a3d      	ldr	r2, [pc, #244]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b3b      	ldr	r3, [pc, #236]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4a37      	ldr	r2, [pc, #220]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 8001414:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001418:	6153      	str	r3, [r2, #20]
 800141a:	4b35      	ldr	r3, [pc, #212]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001426:	2310      	movs	r3, #16
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142a:	2312      	movs	r3, #18
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001436:	2307      	movs	r3, #7
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	482c      	ldr	r0, [pc, #176]	@ (80014f4 <HAL_UART_MspInit+0x120>)
 8001442:	f000 fbff 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001446:	2320      	movs	r3, #32
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001456:	2307      	movs	r3, #7
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4824      	ldr	r0, [pc, #144]	@ (80014f4 <HAL_UART_MspInit+0x120>)
 8001462:	f000 fbef 	bl	8001c44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2025      	movs	r0, #37	@ 0x25
 800146c:	f000 facd 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001470:	2025      	movs	r0, #37	@ 0x25
 8001472:	f000 fae6 	bl	8001a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001476:	e035      	b.n	80014e4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a1e      	ldr	r2, [pc, #120]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d130      	bne.n	80014e4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a1a      	ldr	r2, [pc, #104]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 8001488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_UART_MspInit+0x11c>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b2:	230c      	movs	r3, #12
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d0:	f000 fbb8 	bl	8001c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2026      	movs	r0, #38	@ 0x26
 80014da:	f000 fa96 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014de:	2026      	movs	r0, #38	@ 0x26
 80014e0:	f000 faaf 	bl	8001a42 <HAL_NVIC_EnableIRQ>
}
 80014e4:	bf00      	nop
 80014e6:	3730      	adds	r7, #48	@ 0x30
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48000800 	.word	0x48000800
 80014f8:	40004400 	.word	0x40004400

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <NMI_Handler+0x4>

08001504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <MemManage_Handler+0x4>

08001514 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <UsageFault_Handler+0x4>

08001524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001552:	f000 f95f 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <USART1_IRQHandler+0x10>)
 8001562:	f003 fa7d 	bl	8004a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002a4 	.word	0x200002a4

08001570 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <USART2_IRQHandler+0x10>)
 8001576:	f003 fa73 	bl	8004a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000032c 	.word	0x2000032c

08001584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_kill>:

int _kill(int pid, int sig)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800159e:	f005 f9a5 	bl	80068ec <__errno>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2216      	movs	r2, #22
 80015a6:	601a      	str	r2, [r3, #0]
  return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_exit>:

void _exit (int status)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffe7 	bl	8001594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <_exit+0x12>

080015ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00a      	b.n	80015f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015dc:	f3af 8000 	nop.w
 80015e0:	4601      	mov	r1, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	b2ca      	uxtb	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbf0      	blt.n	80015dc <_read+0x12>
  }

  return len;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e009      	b.n	800162a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	60ba      	str	r2, [r7, #8]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	dbf1      	blt.n	8001616 <_write+0x12>
  }
  return len;
 8001632:	687b      	ldr	r3, [r7, #4]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_close>:

int _close(int file)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001664:	605a      	str	r2, [r3, #4]
  return 0;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_isatty>:

int _isatty(int file)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800167c:	2301      	movs	r3, #1
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <_sbrk+0x5c>)
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <_sbrk+0x60>)
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <_sbrk+0x64>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <_sbrk+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d207      	bcs.n	80016e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d4:	f005 f90a 	bl	80068ec <__errno>
 80016d8:	4603      	mov	r3, r0
 80016da:	220c      	movs	r2, #12
 80016dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	e009      	b.n	80016f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <_sbrk+0x64>)
 80016f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000a000 	.word	0x2000a000
 8001704:	00000400 	.word	0x00000400
 8001708:	200003b4 	.word	0x200003b4
 800170c:	20000508 	.word	0x20000508

08001710 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <SystemInit+0x20>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <SystemInit+0x20>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800176c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001738:	f7ff ffea 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <LoopForever+0x6>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	@ (8001774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <LoopForever+0xe>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	@ (8001780 <LoopForever+0x16>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f005 f8c9 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001766:	f7ff fa1f 	bl	8000ba8 <main>

0800176a <LoopForever>:

LoopForever:
    b LoopForever
 800176a:	e7fe      	b.n	800176a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800176c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001778:	08008a58 	.word	0x08008a58
  ldr r2, =_sbss
 800177c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001780:	20000508 	.word	0x20000508

08001784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC1_2_IRQHandler>
	...

08001788 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <HAL_Init+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <HAL_Init+0x28>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f92b 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fd2a 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40022000 	.word	0x40022000

080017b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f943 	bl	8001a5e <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f90b 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	@ (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000008 	.word	0x20000008
 800180c:	20000010 	.word	0x20000010
 8001810:	2000000c 	.word	0x2000000c

08001814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000010 	.word	0x20000010
 8001838:	200003b8 	.word	0x200003b8

0800183c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200003b8 	.word	0x200003b8

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	@ (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e014      	b.n	8001ab2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fbd3 	bl	8001244 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b087      	sub	sp, #28
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	795b      	ldrb	r3, [r3, #5]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_DAC_ConfigChannel+0x20>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e036      	b.n	8001b48 <HAL_DAC_ConfigChannel+0x8e>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001aee:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4013      	ands	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	22c0      	movs	r2, #192	@ 0xc0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43da      	mvns	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	400a      	ands	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d008      	beq.n	8001b78 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e020      	b.n	8001bba <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 020e 	bic.w	r2, r2, #14
 8001b86:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d005      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2204      	movs	r2, #4
 8001be0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e027      	b.n	8001c38 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 020e 	bic.w	r2, r2, #14
 8001bf6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f202 	lsl.w	r2, r1, r2
 8001c16:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
    } 
  }
  return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	e154      	b.n	8001efe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8146 	beq.w	8001ef8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d005      	beq.n	8001c84 <HAL_GPIO_Init+0x40>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d130      	bne.n	8001ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 0201 	and.w	r2, r3, #1
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d017      	beq.n	8001d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d123      	bne.n	8001d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	6939      	ldr	r1, [r7, #16]
 8001d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0203 	and.w	r2, r3, #3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80a0 	beq.w	8001ef8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db8:	4b58      	ldr	r3, [pc, #352]	@ (8001f1c <HAL_GPIO_Init+0x2d8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a57      	ldr	r2, [pc, #348]	@ (8001f1c <HAL_GPIO_Init+0x2d8>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b55      	ldr	r3, [pc, #340]	@ (8001f1c <HAL_GPIO_Init+0x2d8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dd0:	4a53      	ldr	r2, [pc, #332]	@ (8001f20 <HAL_GPIO_Init+0x2dc>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dfa:	d019      	beq.n	8001e30 <HAL_GPIO_Init+0x1ec>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a49      	ldr	r2, [pc, #292]	@ (8001f24 <HAL_GPIO_Init+0x2e0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_GPIO_Init+0x1e8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a48      	ldr	r2, [pc, #288]	@ (8001f28 <HAL_GPIO_Init+0x2e4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00d      	beq.n	8001e28 <HAL_GPIO_Init+0x1e4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a47      	ldr	r2, [pc, #284]	@ (8001f2c <HAL_GPIO_Init+0x2e8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d007      	beq.n	8001e24 <HAL_GPIO_Init+0x1e0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a46      	ldr	r2, [pc, #280]	@ (8001f30 <HAL_GPIO_Init+0x2ec>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_GPIO_Init+0x1dc>
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	e008      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e20:	2305      	movs	r3, #5
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e004      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e30:	2300      	movs	r3, #0
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e42:	4937      	ldr	r1, [pc, #220]	@ (8001f20 <HAL_GPIO_Init+0x2dc>)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e50:	4b38      	ldr	r3, [pc, #224]	@ (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e74:	4a2f      	ldr	r2, [pc, #188]	@ (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e9e:	4a25      	ldr	r2, [pc, #148]	@ (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea4:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ef2:	4a10      	ldr	r2, [pc, #64]	@ (8001f34 <HAL_GPIO_Init+0x2f0>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f47f aea3 	bne.w	8001c54 <HAL_GPIO_Init+0x10>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000
 8001f24:	48000400 	.word	0x48000400
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	48000c00 	.word	0x48000c00
 8001f30:	48001000 	.word	0x48001000
 8001f34:	40010400 	.word	0x40010400

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f001 b823 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 817d 	beq.w	800229e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fa4:	4bbc      	ldr	r3, [pc, #752]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d00c      	beq.n	8001fca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb0:	4bb9      	ldr	r3, [pc, #740]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d15c      	bne.n	8002076 <HAL_RCC_OscConfig+0x10e>
 8001fbc:	4bb6      	ldr	r3, [pc, #728]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc8:	d155      	bne.n	8002076 <HAL_RCC_OscConfig+0x10e>
 8001fca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fce:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_OscConfig+0x94>
 8001ff6:	4ba8      	ldr	r3, [pc, #672]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	e015      	b.n	8002028 <HAL_RCC_OscConfig+0xc0>
 8001ffc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002000:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002010:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002014:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002018:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002024:	4b9c      	ldr	r3, [pc, #624]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800202c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002030:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002034:	fa92 f2a2 	rbit	r2, r2
 8002038:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800203c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002040:	fab2 f282 	clz	r2, r2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f042 0220 	orr.w	r2, r2, #32
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f002 021f 	and.w	r2, r2, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f202 	lsl.w	r2, r1, r2
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 811f 	beq.w	800229c <HAL_RCC_OscConfig+0x334>
 800205e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002062:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 8116 	bne.w	800229c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	f000 bfaf 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x12e>
 8002088:	4b83      	ldr	r3, [pc, #524]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a82      	ldr	r2, [pc, #520]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e036      	b.n	8002104 <HAL_RCC_OscConfig+0x19c>
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x158>
 80020a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b79      	ldr	r3, [pc, #484]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a78      	ldr	r2, [pc, #480]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e021      	b.n	8002104 <HAL_RCC_OscConfig+0x19c>
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x184>
 80020d2:	4b71      	ldr	r3, [pc, #452]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a70      	ldr	r2, [pc, #448]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b6e      	ldr	r3, [pc, #440]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6d      	ldr	r2, [pc, #436]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0x19c>
 80020ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a69      	ldr	r2, [pc, #420]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a66      	ldr	r2, [pc, #408]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002102:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002104:	4b64      	ldr	r3, [pc, #400]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	f023 020f 	bic.w	r2, r3, #15
 800210c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002110:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	495f      	ldr	r1, [pc, #380]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 800211a:	4313      	orrs	r3, r2
 800211c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d059      	beq.n	80021e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff fb85 	bl	800183c <HAL_GetTick>
 8002132:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fb80 	bl	800183c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	@ 0x64
 8002146:	d902      	bls.n	800214e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	f000 bf43 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>
 800214e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002152:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002162:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_RCC_OscConfig+0x218>
 800217a:	4b47      	ldr	r3, [pc, #284]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e015      	b.n	80021ac <HAL_RCC_OscConfig+0x244>
 8002180:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002184:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002198:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800219c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80021a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021b0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80021b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80021b8:	fa92 f2a2 	rbit	r2, r2
 80021bc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80021c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	f042 0220 	orr.w	r2, r2, #32
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f002 021f 	and.w	r2, r2, #31
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ab      	beq.n	8002138 <HAL_RCC_OscConfig+0x1d0>
 80021e0:	e05d      	b.n	800229e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff fb2b 	bl	800183c <HAL_GetTick>
 80021e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fb26 	bl	800183c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	@ 0x64
 80021fa:	d902      	bls.n	8002202 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	f000 bee9 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>
 8002202:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002206:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002216:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_RCC_OscConfig+0x2cc>
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e015      	b.n	8002260 <HAL_RCC_OscConfig+0x2f8>
 8002234:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002238:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002248:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800224c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002250:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002264:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002268:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800226c:	fa92 f2a2 	rbit	r2, r2
 8002270:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002274:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f002 021f 	and.w	r2, r2, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ab      	bne.n	80021ec <HAL_RCC_OscConfig+0x284>
 8002294:	e003      	b.n	800229e <HAL_RCC_OscConfig+0x336>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 817d 	beq.w	80025ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022b4:	4ba6      	ldr	r3, [pc, #664]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022c0:	4ba3      	ldr	r3, [pc, #652]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d172      	bne.n	80023b2 <HAL_RCC_OscConfig+0x44a>
 80022cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d16c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x44a>
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80022ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_RCC_OscConfig+0x3a0>
 8002302:	4b93      	ldr	r3, [pc, #588]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e013      	b.n	8002330 <HAL_RCC_OscConfig+0x3c8>
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002320:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800232c:	4b88      	ldr	r3, [pc, #544]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	2202      	movs	r2, #2
 8002332:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002336:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002342:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCC_OscConfig+0x410>
 8002362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002366:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d002      	beq.n	8002378 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	f000 be2e 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b75      	ldr	r3, [pc, #468]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	21f8      	movs	r1, #248	@ 0xf8
 800238e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002396:	fa91 f1a1 	rbit	r1, r1
 800239a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800239e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80023a2:	fab1 f181 	clz	r1, r1
 80023a6:	b2c9      	uxtb	r1, r1
 80023a8:	408b      	lsls	r3, r1
 80023aa:	4969      	ldr	r1, [pc, #420]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b0:	e0fd      	b.n	80025ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8088 	beq.w	80024d4 <HAL_RCC_OscConfig+0x56c>
 80023c4:	2301      	movs	r3, #1
 80023c6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80023d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	461a      	mov	r2, r3
 80023ec:	2301      	movs	r3, #1
 80023ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fa24 	bl	800183c <HAL_GetTick>
 80023f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fa:	f7ff fa1f 	bl	800183c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d902      	bls.n	8002410 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	f000 bde2 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>
 8002410:	2302      	movs	r3, #2
 8002412:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002422:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <HAL_RCC_OscConfig+0x4d8>
 800243a:	4b45      	ldr	r3, [pc, #276]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	e013      	b.n	8002468 <HAL_RCC_OscConfig+0x500>
 8002440:	2302      	movs	r3, #2
 8002442:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002452:	2302      	movs	r3, #2
 8002454:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002458:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002464:	4b3a      	ldr	r3, [pc, #232]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	2202      	movs	r2, #2
 800246a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800246e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002472:	fa92 f2a2 	rbit	r2, r2
 8002476:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800247a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800247e:	fab2 f282 	clz	r2, r2
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f042 0220 	orr.w	r2, r2, #32
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f002 021f 	and.w	r2, r2, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f202 	lsl.w	r2, r1, r2
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0af      	beq.n	80023fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	21f8      	movs	r1, #248	@ 0xf8
 80024b0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80024b8:	fa91 f1a1 	rbit	r1, r1
 80024bc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80024c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80024c4:	fab1 f181 	clz	r1, r1
 80024c8:	b2c9      	uxtb	r1, r1
 80024ca:	408b      	lsls	r3, r1
 80024cc:	4920      	ldr	r1, [pc, #128]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
 80024d2:	e06c      	b.n	80025ae <HAL_RCC_OscConfig+0x646>
 80024d4:	2301      	movs	r3, #1
 80024d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80024e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	461a      	mov	r2, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f99c 	bl	800183c <HAL_GetTick>
 8002504:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250a:	f7ff f997 	bl	800183c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d902      	bls.n	8002520 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	f000 bd5a 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>
 8002520:	2302      	movs	r3, #2
 8002522:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002532:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d104      	bne.n	8002554 <HAL_RCC_OscConfig+0x5ec>
 800254a:	4b01      	ldr	r3, [pc, #4]	@ (8002550 <HAL_RCC_OscConfig+0x5e8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	e015      	b.n	800257c <HAL_RCC_OscConfig+0x614>
 8002550:	40021000 	.word	0x40021000
 8002554:	2302      	movs	r3, #2
 8002556:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002566:	2302      	movs	r3, #2
 8002568:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800256c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002578:	4bc8      	ldr	r3, [pc, #800]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	2202      	movs	r2, #2
 800257e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002582:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002586:	fa92 f2a2 	rbit	r2, r2
 800258a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800258e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002592:	fab2 f282 	clz	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f042 0220 	orr.w	r2, r2, #32
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f002 021f 	and.w	r2, r2, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f202 	lsl.w	r2, r1, r2
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1ad      	bne.n	800250a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8110 	beq.w	80027e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d079      	beq.n	80026c8 <HAL_RCC_OscConfig+0x760>
 80025d4:	2301      	movs	r3, #1
 80025d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80025e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	4bab      	ldr	r3, [pc, #684]	@ (80028a0 <HAL_RCC_OscConfig+0x938>)
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	461a      	mov	r2, r3
 80025fa:	2301      	movs	r3, #1
 80025fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7ff f91d 	bl	800183c <HAL_GetTick>
 8002602:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff f918 	bl	800183c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d902      	bls.n	800261e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	f000 bcdb 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>
 800261e:	2302      	movs	r3, #2
 8002620:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002638:	2202      	movs	r2, #2
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800265c:	2202      	movs	r2, #2
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f2a3 	rbit	r2, r3
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002676:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002678:	4b88      	ldr	r3, [pc, #544]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 800267a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002684:	2102      	movs	r1, #2
 8002686:	6019      	str	r1, [r3, #0]
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f1a3 	rbit	r1, r3
 8002696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800269e:	6019      	str	r1, [r3, #0]
  return result;
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0a0      	beq.n	8002608 <HAL_RCC_OscConfig+0x6a0>
 80026c6:	e08d      	b.n	80027e4 <HAL_RCC_OscConfig+0x87c>
 80026c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026ea:	601a      	str	r2, [r3, #0]
  return result;
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80026f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b68      	ldr	r3, [pc, #416]	@ (80028a0 <HAL_RCC_OscConfig+0x938>)
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	461a      	mov	r2, r3
 8002706:	2300      	movs	r3, #0
 8002708:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7ff f897 	bl	800183c <HAL_GetTick>
 800270e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002712:	e00a      	b.n	800272a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002714:	f7ff f892 	bl	800183c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d902      	bls.n	800272a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	f000 bc55 	b.w	8002fd4 <HAL_RCC_OscConfig+0x106c>
 800272a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002732:	2202      	movs	r2, #2
 8002734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	fa93 f2a3 	rbit	r2, r3
 8002744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002748:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002752:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002756:	2202      	movs	r2, #2
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800277a:	2202      	movs	r2, #2
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002794:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 8002798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027a2:	2102      	movs	r1, #2
 80027a4:	6019      	str	r1, [r3, #0]
 80027a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f1a3 	rbit	r1, r3
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027bc:	6019      	str	r1, [r3, #0]
  return result;
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d197      	bne.n	8002714 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 81a1 	beq.w	8002b3c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002800:	4b26      	ldr	r3, [pc, #152]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b23      	ldr	r3, [pc, #140]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4a22      	ldr	r2, [pc, #136]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002816:	61d3      	str	r3, [r2, #28]
 8002818:	4b20      	ldr	r3, [pc, #128]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002832:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <HAL_RCC_OscConfig+0x93c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11a      	bne.n	800287c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <HAL_RCC_OscConfig+0x93c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a16      	ldr	r2, [pc, #88]	@ (80028a4 <HAL_RCC_OscConfig+0x93c>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7fe fff3 	bl	800183c <HAL_GetTick>
 8002856:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	e009      	b.n	8002870 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285c:	f7fe ffee 	bl	800183c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	@ 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e3b1      	b.n	8002fd4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <HAL_RCC_OscConfig+0x93c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ef      	beq.n	800285c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10d      	bne.n	80028a8 <HAL_RCC_OscConfig+0x940>
 800288c:	4b03      	ldr	r3, [pc, #12]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4a02      	ldr	r2, [pc, #8]	@ (800289c <HAL_RCC_OscConfig+0x934>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6213      	str	r3, [r2, #32]
 8002898:	e03c      	b.n	8002914 <HAL_RCC_OscConfig+0x9ac>
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	10908120 	.word	0x10908120
 80028a4:	40007000 	.word	0x40007000
 80028a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x96a>
 80028b8:	4bc1      	ldr	r3, [pc, #772]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4ac0      	ldr	r2, [pc, #768]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6213      	str	r3, [r2, #32]
 80028c4:	4bbe      	ldr	r3, [pc, #760]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4abd      	ldr	r2, [pc, #756]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e020      	b.n	8002914 <HAL_RCC_OscConfig+0x9ac>
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x994>
 80028e2:	4bb7      	ldr	r3, [pc, #732]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4ab6      	ldr	r2, [pc, #728]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6213      	str	r3, [r2, #32]
 80028ee:	4bb4      	ldr	r3, [pc, #720]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4ab3      	ldr	r2, [pc, #716]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6213      	str	r3, [r2, #32]
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x9ac>
 80028fc:	4bb0      	ldr	r3, [pc, #704]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4aaf      	ldr	r2, [pc, #700]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	4bad      	ldr	r3, [pc, #692]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4aac      	ldr	r2, [pc, #688]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8081 	beq.w	8002a28 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe ff89 	bl	800183c <HAL_GetTick>
 800292a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002930:	f7fe ff84 	bl	800183c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e345      	b.n	8002fd4 <HAL_RCC_OscConfig+0x106c>
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002950:	2202      	movs	r2, #2
 8002952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002974:	2202      	movs	r2, #2
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800298e:	601a      	str	r2, [r3, #0]
  return result;
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002998:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0xa4c>
 80029ae:	4b84      	ldr	r3, [pc, #528]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	e013      	b.n	80029dc <HAL_RCC_OscConfig+0xa74>
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029bc:	2202      	movs	r2, #2
 80029be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	4b79      	ldr	r3, [pc, #484]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029e0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80029e4:	2102      	movs	r1, #2
 80029e6:	6011      	str	r1, [r2, #0]
 80029e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	fa92 f1a2 	rbit	r1, r2
 80029f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029fa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80029fe:	6011      	str	r1, [r2, #0]
  return result;
 8002a00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a04:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d084      	beq.n	8002930 <HAL_RCC_OscConfig+0x9c8>
 8002a26:	e07f      	b.n	8002b28 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7fe ff08 	bl	800183c <HAL_GetTick>
 8002a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	e00b      	b.n	8002a4a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe ff03 	bl	800183c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e2c4      	b.n	8002fd4 <HAL_RCC_OscConfig+0x106c>
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a52:	2202      	movs	r2, #2
 8002a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a68:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a76:	2202      	movs	r2, #2
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002a90:	601a      	str	r2, [r3, #0]
  return result;
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002a9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_OscConfig+0xb4e>
 8002ab0:	4b43      	ldr	r3, [pc, #268]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	e013      	b.n	8002ade <HAL_RCC_OscConfig+0xb76>
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002abe:	2202      	movs	r2, #2
 8002ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	4b39      	ldr	r3, [pc, #228]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	6011      	str	r1, [r2, #0]
 8002aea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	fa92 f1a2 	rbit	r1, r2
 8002af8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002afc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b00:	6011      	str	r1, [r2, #0]
  return result;
 8002b02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b06:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	fab2 f282 	clz	r2, r2
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d184      	bne.n	8002a32 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b28:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8242 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <HAL_RCC_OscConfig+0xc58>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	f000 8213 	beq.w	8002f82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	f040 8162 	bne.w	8002e32 <HAL_RCC_OscConfig+0xeca>
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002b76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	fa93 f2a3 	rbit	r2, r3
 8002b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b92:	601a      	str	r2, [r3, #0]
  return result;
 8002b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b98:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002b9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ba8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fe42 	bl	800183c <HAL_GetTick>
 8002bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbc:	e00c      	b.n	8002bd8 <HAL_RCC_OscConfig+0xc70>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe fe3a 	bl	800183c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1fd      	b.n	8002fd4 <HAL_RCC_OscConfig+0x106c>
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002be0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	fa93 f2a3 	rbit	r2, r3
 8002bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002bfc:	601a      	str	r2, [r3, #0]
  return result;
 8002bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c02:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d102      	bne.n	8002c22 <HAL_RCC_OscConfig+0xcba>
 8002c1c:	4bb0      	ldr	r3, [pc, #704]	@ (8002ee0 <HAL_RCC_OscConfig+0xf78>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	e027      	b.n	8002c72 <HAL_RCC_OscConfig+0xd0a>
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	fa93 f2a3 	rbit	r2, r3
 8002c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c68:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8002ee0 <HAL_RCC_OscConfig+0xf78>)
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c76:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002c7a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c7e:	6011      	str	r1, [r2, #0]
 8002c80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c84:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	fa92 f1a2 	rbit	r1, r2
 8002c8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c92:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002c96:	6011      	str	r1, [r2, #0]
  return result;
 8002c98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c9c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d182      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbe:	4b88      	ldr	r3, [pc, #544]	@ (8002ee0 <HAL_RCC_OscConfig+0xf78>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	497f      	ldr	r1, [pc, #508]	@ (8002ee0 <HAL_RCC_OscConfig+0xf78>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
 8002ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cea:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002cee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	fa93 f2a3 	rbit	r2, r3
 8002d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d06:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d0a:	601a      	str	r2, [r3, #0]
  return result;
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d14:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	2301      	movs	r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fd86 	bl	800183c <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d34:	e009      	b.n	8002d4a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe fd81 	bl	800183c <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e144      	b.n	8002fd4 <HAL_RCC_OscConfig+0x106c>
 8002d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d6e:	601a      	str	r2, [r3, #0]
  return result;
 8002d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d74:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002d78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HAL_RCC_OscConfig+0xe2c>
 8002d8e:	4b54      	ldr	r3, [pc, #336]	@ (8002ee0 <HAL_RCC_OscConfig+0xf78>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	e027      	b.n	8002de4 <HAL_RCC_OscConfig+0xe7c>
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbe:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002dc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dcc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	fa93 f2a3 	rbit	r2, r3
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee0 <HAL_RCC_OscConfig+0xf78>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002dec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002df0:	6011      	str	r1, [r2, #0]
 8002df2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	fa92 f1a2 	rbit	r1, r2
 8002e00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e04:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e08:	6011      	str	r1, [r2, #0]
  return result;
 8002e0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	fab2 f282 	clz	r2, r2
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	f002 021f 	and.w	r2, r2, #31
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d082      	beq.n	8002d36 <HAL_RCC_OscConfig+0xdce>
 8002e30:	e0cf      	b.n	8002fd2 <HAL_RCC_OscConfig+0x106a>
 8002e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e36:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e44:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e52:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e56:	601a      	str	r2, [r3, #0]
  return result;
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	461a      	mov	r2, r3
 8002e74:	2300      	movs	r3, #0
 8002e76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fce0 	bl	800183c <HAL_GetTick>
 8002e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	e009      	b.n	8002e96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fcdb 	bl	800183c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e09e      	b.n	8002fd4 <HAL_RCC_OscConfig+0x106c>
 8002e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002e9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fa93 f2a3 	rbit	r2, r3
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002eba:	601a      	str	r2, [r3, #0]
  return result;
 8002ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ec4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d104      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xf7c>
 8002eda:	4b01      	ldr	r3, [pc, #4]	@ (8002ee0 <HAL_RCC_OscConfig+0xf78>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	e029      	b.n	8002f34 <HAL_RCC_OscConfig+0xfcc>
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002eec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f2a3 	rbit	r2, r3
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe0 <HAL_RCC_OscConfig+0x1078>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f38:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f3c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f46:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fa92 f1a2 	rbit	r1, r2
 8002f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f54:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f58:	6011      	str	r1, [r2, #0]
  return result;
 8002f5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f5e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	fab2 f282 	clz	r2, r2
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	f042 0220 	orr.w	r2, r2, #32
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	f002 021f 	and.w	r2, r2, #31
 8002f74:	2101      	movs	r1, #1
 8002f76:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d180      	bne.n	8002e82 <HAL_RCC_OscConfig+0xf1a>
 8002f80:	e027      	b.n	8002fd2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e01e      	b.n	8002fd4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f96:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <HAL_RCC_OscConfig+0x1078>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fa2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002faa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d10b      	bne.n	8002fce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000

08002fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b09e      	sub	sp, #120	@ 0x78
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e162      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b90      	ldr	r3, [pc, #576]	@ (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d910      	bls.n	800302c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b8d      	ldr	r3, [pc, #564]	@ (8003240 <HAL_RCC_ClockConfig+0x25c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	498b      	ldr	r1, [pc, #556]	@ (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b89      	ldr	r3, [pc, #548]	@ (8003240 <HAL_RCC_ClockConfig+0x25c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e14a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4b82      	ldr	r3, [pc, #520]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	497f      	ldr	r1, [pc, #508]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80dc 	beq.w	8003210 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d13c      	bne.n	80030da <HAL_RCC_ClockConfig+0xf6>
 8003060:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003064:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800306e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d102      	bne.n	800308a <HAL_RCC_ClockConfig+0xa6>
 8003084:	4b6f      	ldr	r3, [pc, #444]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	e00f      	b.n	80030aa <HAL_RCC_ClockConfig+0xc6>
 800308a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800308e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	667b      	str	r3, [r7, #100]	@ 0x64
 8003098:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800309c:	663b      	str	r3, [r7, #96]	@ 0x60
 800309e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030a6:	4b67      	ldr	r3, [pc, #412]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030ae:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030b2:	fa92 f2a2 	rbit	r2, r2
 80030b6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80030b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030ba:	fab2 f282 	clz	r2, r2
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	f002 021f 	and.w	r2, r2, #31
 80030ca:	2101      	movs	r1, #1
 80030cc:	fa01 f202 	lsl.w	r2, r1, r2
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d17b      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0f3      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d13c      	bne.n	800315c <HAL_RCC_ClockConfig+0x178>
 80030e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030e6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80030f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d102      	bne.n	800310c <HAL_RCC_ClockConfig+0x128>
 8003106:	4b4f      	ldr	r3, [pc, #316]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	e00f      	b.n	800312c <HAL_RCC_ClockConfig+0x148>
 800310c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003110:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	647b      	str	r3, [r7, #68]	@ 0x44
 800311a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800311e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003128:	4b46      	ldr	r3, [pc, #280]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003130:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003134:	fa92 f2a2 	rbit	r2, r2
 8003138:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800313a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800313c:	fab2 f282 	clz	r2, r2
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	f042 0220 	orr.w	r2, r2, #32
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	f002 021f 	and.w	r2, r2, #31
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f202 	lsl.w	r2, r1, r2
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d13a      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0b2      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
 800315c:	2302      	movs	r3, #2
 800315e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_ClockConfig+0x1a0>
 800317e:	4b31      	ldr	r3, [pc, #196]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	e00d      	b.n	80031a0 <HAL_RCC_ClockConfig+0x1bc>
 8003184:	2302      	movs	r3, #2
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003190:	2302      	movs	r3, #2
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	4b29      	ldr	r3, [pc, #164]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	2202      	movs	r2, #2
 80031a2:	61ba      	str	r2, [r7, #24]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	fa92 f2a2 	rbit	r2, r2
 80031aa:	617a      	str	r2, [r7, #20]
  return result;
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	fab2 f282 	clz	r2, r2
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f042 0220 	orr.w	r2, r2, #32
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	f002 021f 	and.w	r2, r2, #31
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f202 	lsl.w	r2, r1, r2
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e079      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	491a      	ldr	r1, [pc, #104]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fb2c 	bl	800183c <HAL_GetTick>
 80031e4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe fb28 	bl	800183c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e061      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <HAL_RCC_ClockConfig+0x260>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d214      	bcs.n	8003248 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0207 	bic.w	r2, r3, #7
 8003226:	4906      	ldr	r1, [pc, #24]	@ (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <HAL_RCC_ClockConfig+0x25c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e040      	b.n	80032c2 <HAL_RCC_ClockConfig+0x2de>
 8003240:	40022000 	.word	0x40022000
 8003244:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003254:	4b1d      	ldr	r3, [pc, #116]	@ (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	491a      	ldr	r1, [pc, #104]	@ (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003272:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4912      	ldr	r1, [pc, #72]	@ (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003286:	f000 f829 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800328a:	4601      	mov	r1, r0
 800328c:	4b0f      	ldr	r3, [pc, #60]	@ (80032cc <HAL_RCC_ClockConfig+0x2e8>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003294:	22f0      	movs	r2, #240	@ 0xf0
 8003296:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	fa92 f2a2 	rbit	r2, r2
 800329e:	60fa      	str	r2, [r7, #12]
  return result;
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	fab2 f282 	clz	r2, r2
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	40d3      	lsrs	r3, r2
 80032aa:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_RCC_ClockConfig+0x2ec>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	fa21 f303 	lsr.w	r3, r1, r3
 80032b2:	4a08      	ldr	r2, [pc, #32]	@ (80032d4 <HAL_RCC_ClockConfig+0x2f0>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032b6:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <HAL_RCC_ClockConfig+0x2f4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fa7a 	bl	80017b4 <HAL_InitTick>
  
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3778      	adds	r7, #120	@ 0x78
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	080086a0 	.word	0x080086a0
 80032d4:	20000008 	.word	0x20000008
 80032d8:	2000000c 	.word	0x2000000c

080032dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	b08b      	sub	sp, #44	@ 0x2c
 80032e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032f6:	4b29      	ldr	r3, [pc, #164]	@ (800339c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b04      	cmp	r3, #4
 8003304:	d002      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x30>
 8003306:	2b08      	cmp	r3, #8
 8003308:	d003      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x36>
 800330a:	e03c      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800330c:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800330e:	623b      	str	r3, [r7, #32]
      break;
 8003310:	e03c      	b.n	800338c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003318:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 800331c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	fa92 f2a2 	rbit	r2, r2
 8003324:	607a      	str	r2, [r7, #4]
  return result;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	fab2 f282 	clz	r2, r2
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	40d3      	lsrs	r3, r2
 8003330:	4a1c      	ldr	r2, [pc, #112]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003336:	4b19      	ldr	r3, [pc, #100]	@ (800339c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	220f      	movs	r2, #15
 8003340:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	fa92 f2a2 	rbit	r2, r2
 8003348:	60fa      	str	r2, [r7, #12]
  return result;
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	40d3      	lsrs	r3, r2
 8003354:	4a14      	ldr	r2, [pc, #80]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003364:	4a0e      	ldr	r2, [pc, #56]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	fbb2 f2f3 	udiv	r2, r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24
 8003374:	e004      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	4a0c      	ldr	r2, [pc, #48]	@ (80033ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	623b      	str	r3, [r7, #32]
      break;
 8003384:	e002      	b.n	800338c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003386:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003388:	623b      	str	r3, [r7, #32]
      break;
 800338a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338c:	6a3b      	ldr	r3, [r7, #32]
}
 800338e:	4618      	mov	r0, r3
 8003390:	372c      	adds	r7, #44	@ 0x2c
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	007a1200 	.word	0x007a1200
 80033a4:	080086b8 	.word	0x080086b8
 80033a8:	080086c8 	.word	0x080086c8
 80033ac:	003d0900 	.word	0x003d0900

080033b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000008 	.word	0x20000008

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033ce:	f7ff ffef 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033d2:	4601      	mov	r1, r0
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033dc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80033e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	fa92 f2a2 	rbit	r2, r2
 80033e8:	603a      	str	r2, [r7, #0]
  return result;
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	40d3      	lsrs	r3, r2
 80033f4:	4a04      	ldr	r2, [pc, #16]	@ (8003408 <HAL_RCC_GetPCLK1Freq+0x40>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	080086b0 	.word	0x080086b0

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003412:	f7ff ffcd 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 8003416:	4601      	mov	r1, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003420:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003424:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	603a      	str	r2, [r7, #0]
  return result;
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	40d3      	lsrs	r3, r2
 8003438:	4a04      	ldr	r2, [pc, #16]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x40>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	080086b0 	.word	0x080086b0

08003450 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b092      	sub	sp, #72	@ 0x48
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80d4 	beq.w	800361c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003474:	4b4e      	ldr	r3, [pc, #312]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10e      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b4b      	ldr	r3, [pc, #300]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4a4a      	ldr	r2, [pc, #296]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800348a:	61d3      	str	r3, [r2, #28]
 800348c:	4b48      	ldr	r3, [pc, #288]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b45      	ldr	r3, [pc, #276]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034aa:	4b42      	ldr	r3, [pc, #264]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a41      	ldr	r2, [pc, #260]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe f9c1 	bl	800183c <HAL_GetTick>
 80034ba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fe f9bd 	bl	800183c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	@ 0x64
 80034ca:	d901      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e169      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	4b38      	ldr	r3, [pc, #224]	@ (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034dc:	4b34      	ldr	r3, [pc, #208]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8084 	beq.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d07c      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034fc:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800350a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	461a      	mov	r2, r3
 8003526:	2301      	movs	r3, #1
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800352e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	461a      	mov	r2, r3
 800354a:	2300      	movs	r3, #0
 800354c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800354e:	4a18      	ldr	r2, [pc, #96]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003552:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d04b      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355e:	f7fe f96d 	bl	800183c <HAL_GetTick>
 8003562:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fe f969 	bl	800183c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e113      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800357c:	2302      	movs	r3, #2
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
 8003588:	2302      	movs	r3, #2
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	61fb      	str	r3, [r7, #28]
  return result;
 8003594:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d108      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035aa:	4b01      	ldr	r3, [pc, #4]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	e00d      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40007000 	.word	0x40007000
 80035b8:	10908100 	.word	0x10908100
 80035bc:	2302      	movs	r3, #2
 80035be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	4b78      	ldr	r3, [pc, #480]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	2202      	movs	r2, #2
 80035ce:	613a      	str	r2, [r7, #16]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	fa92 f2a2 	rbit	r2, r2
 80035d6:	60fa      	str	r2, [r7, #12]
  return result;
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	fab2 f282 	clz	r2, r2
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0b7      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035f6:	4b6d      	ldr	r3, [pc, #436]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	496a      	ldr	r1, [pc, #424]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003604:	4313      	orrs	r3, r2
 8003606:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003608:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003610:	4b66      	ldr	r3, [pc, #408]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	4a65      	ldr	r2, [pc, #404]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800361a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003628:	4b60      	ldr	r3, [pc, #384]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362c:	f023 0203 	bic.w	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	495d      	ldr	r1, [pc, #372]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003646:	4b59      	ldr	r3, [pc, #356]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4956      	ldr	r1, [pc, #344]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003664:	4b51      	ldr	r3, [pc, #324]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	494e      	ldr	r1, [pc, #312]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003672:	4313      	orrs	r3, r2
 8003674:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	f023 0210 	bic.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	4947      	ldr	r1, [pc, #284]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003690:	4313      	orrs	r3, r2
 8003692:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036a0:	4b42      	ldr	r3, [pc, #264]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	493f      	ldr	r1, [pc, #252]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036be:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	f023 0220 	bic.w	r2, r3, #32
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4938      	ldr	r1, [pc, #224]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036dc:	4b33      	ldr	r3, [pc, #204]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4930      	ldr	r1, [pc, #192]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036fa:	4b2c      	ldr	r3, [pc, #176]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	4929      	ldr	r1, [pc, #164]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003718:	4b24      	ldr	r3, [pc, #144]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	4921      	ldr	r1, [pc, #132]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003736:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	491a      	ldr	r1, [pc, #104]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003744:	4313      	orrs	r3, r2
 8003746:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003754:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	4912      	ldr	r1, [pc, #72]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003762:	4313      	orrs	r3, r2
 8003764:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003772:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	490b      	ldr	r1, [pc, #44]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379c:	4903      	ldr	r1, [pc, #12]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3748      	adds	r7, #72	@ 0x48
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000

080037b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e049      	b.n	8003856 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fd72 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 fb74 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e049      	b.n	8003904 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f841 	bl	800390c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f000 fb1d 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_TIM_PWM_Start+0x24>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e03c      	b.n	80039be <HAL_TIM_PWM_Start+0x9e>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d109      	bne.n	800395e <HAL_TIM_PWM_Start+0x3e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e02f      	b.n	80039be <HAL_TIM_PWM_Start+0x9e>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d109      	bne.n	8003978 <HAL_TIM_PWM_Start+0x58>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e022      	b.n	80039be <HAL_TIM_PWM_Start+0x9e>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d109      	bne.n	8003992 <HAL_TIM_PWM_Start+0x72>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	e015      	b.n	80039be <HAL_TIM_PWM_Start+0x9e>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d109      	bne.n	80039ac <HAL_TIM_PWM_Start+0x8c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e008      	b.n	80039be <HAL_TIM_PWM_Start+0x9e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	bf14      	ite	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	2300      	moveq	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e097      	b.n	8003af6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_TIM_PWM_Start+0xb6>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d4:	e023      	b.n	8003a1e <HAL_TIM_PWM_Start+0xfe>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d104      	bne.n	80039e6 <HAL_TIM_PWM_Start+0xc6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039e4:	e01b      	b.n	8003a1e <HAL_TIM_PWM_Start+0xfe>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d104      	bne.n	80039f6 <HAL_TIM_PWM_Start+0xd6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039f4:	e013      	b.n	8003a1e <HAL_TIM_PWM_Start+0xfe>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b0c      	cmp	r3, #12
 80039fa:	d104      	bne.n	8003a06 <HAL_TIM_PWM_Start+0xe6>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a04:	e00b      	b.n	8003a1e <HAL_TIM_PWM_Start+0xfe>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d104      	bne.n	8003a16 <HAL_TIM_PWM_Start+0xf6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a14:	e003      	b.n	8003a1e <HAL_TIM_PWM_Start+0xfe>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2201      	movs	r2, #1
 8003a24:	6839      	ldr	r1, [r7, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fe58 	bl	80046dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a33      	ldr	r2, [pc, #204]	@ (8003b00 <HAL_TIM_PWM_Start+0x1e0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x13e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a32      	ldr	r2, [pc, #200]	@ (8003b04 <HAL_TIM_PWM_Start+0x1e4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x13e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a30      	ldr	r2, [pc, #192]	@ (8003b08 <HAL_TIM_PWM_Start+0x1e8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x13e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b0c <HAL_TIM_PWM_Start+0x1ec>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x13e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2d      	ldr	r2, [pc, #180]	@ (8003b10 <HAL_TIM_PWM_Start+0x1f0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x142>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_TIM_PWM_Start+0x144>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	@ (8003b00 <HAL_TIM_PWM_Start+0x1e0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x194>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8a:	d013      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x194>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a20      	ldr	r2, [pc, #128]	@ (8003b14 <HAL_TIM_PWM_Start+0x1f4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x194>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <HAL_TIM_PWM_Start+0x1f8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x194>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a17      	ldr	r2, [pc, #92]	@ (8003b04 <HAL_TIM_PWM_Start+0x1e4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x194>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <HAL_TIM_PWM_Start+0x1e8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d115      	bne.n	8003ae0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	4b18      	ldr	r3, [pc, #96]	@ (8003b1c <HAL_TIM_PWM_Start+0x1fc>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d015      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x1d2>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003acc:	d011      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	e008      	b.n	8003af2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e000      	b.n	8003af4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40013400 	.word	0x40013400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	00010007 	.word	0x00010007

08003b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e0ff      	b.n	8003d3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b14      	cmp	r3, #20
 8003b4a:	f200 80f0 	bhi.w	8003d2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003ba9 	.word	0x08003ba9
 8003b58:	08003d2f 	.word	0x08003d2f
 8003b5c:	08003d2f 	.word	0x08003d2f
 8003b60:	08003d2f 	.word	0x08003d2f
 8003b64:	08003be9 	.word	0x08003be9
 8003b68:	08003d2f 	.word	0x08003d2f
 8003b6c:	08003d2f 	.word	0x08003d2f
 8003b70:	08003d2f 	.word	0x08003d2f
 8003b74:	08003c2b 	.word	0x08003c2b
 8003b78:	08003d2f 	.word	0x08003d2f
 8003b7c:	08003d2f 	.word	0x08003d2f
 8003b80:	08003d2f 	.word	0x08003d2f
 8003b84:	08003c6b 	.word	0x08003c6b
 8003b88:	08003d2f 	.word	0x08003d2f
 8003b8c:	08003d2f 	.word	0x08003d2f
 8003b90:	08003d2f 	.word	0x08003d2f
 8003b94:	08003cad 	.word	0x08003cad
 8003b98:	08003d2f 	.word	0x08003d2f
 8003b9c:	08003d2f 	.word	0x08003d2f
 8003ba0:	08003d2f 	.word	0x08003d2f
 8003ba4:	08003ced 	.word	0x08003ced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fa24 	bl	8003ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0208 	orr.w	r2, r2, #8
 8003bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0204 	bic.w	r2, r2, #4
 8003bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6999      	ldr	r1, [r3, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	619a      	str	r2, [r3, #24]
      break;
 8003be6:	e0a5      	b.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fa94 	bl	800411c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6999      	ldr	r1, [r3, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	021a      	lsls	r2, r3, #8
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	619a      	str	r2, [r3, #24]
      break;
 8003c28:	e084      	b.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fafd 	bl	8004230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0208 	orr.w	r2, r2, #8
 8003c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0204 	bic.w	r2, r2, #4
 8003c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69d9      	ldr	r1, [r3, #28]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	61da      	str	r2, [r3, #28]
      break;
 8003c68:	e064      	b.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fb65 	bl	8004340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	021a      	lsls	r2, r3, #8
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	61da      	str	r2, [r3, #28]
      break;
 8003caa:	e043      	b.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fbae 	bl	8004414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0208 	orr.w	r2, r2, #8
 8003cc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0204 	bic.w	r2, r2, #4
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003cea:	e023      	b.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fbf2 	bl	80044dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	021a      	lsls	r2, r3, #8
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d2c:	e002      	b.n	8003d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	75fb      	strb	r3, [r7, #23]
      break;
 8003d32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop

08003d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIM_ConfigClockSource+0x1c>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0b6      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x18a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd8>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_TIM_ConfigClockSource+0x176>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
 8003db8:	2b70      	cmp	r3, #112	@ 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xaa>
 8003dbc:	2b70      	cmp	r3, #112	@ 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
 8003dc0:	2b60      	cmp	r3, #96	@ 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x11e>
 8003dc4:	2b60      	cmp	r3, #96	@ 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
 8003dc8:	2b50      	cmp	r3, #80	@ 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xfe>
 8003dcc:	2b50      	cmp	r3, #80	@ 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
 8003dd0:	2b40      	cmp	r3, #64	@ 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x13e>
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
 8003dd8:	2b30      	cmp	r3, #48	@ 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8003ddc:	2b30      	cmp	r3, #48	@ 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e02:	f000 fc4b 	bl	800469c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e30:	f000 fc34 	bl	800469c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 fba8 	bl	80045a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	@ 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc01 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 fbc7 	bl	8004606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	@ 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fbf1 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 fb88 	bl	80045a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	@ 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fbe1 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 fbd8 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe0 <TIM_Base_SetConfig+0x104>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <TIM_Base_SetConfig+0x38>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efa:	d00b      	beq.n	8003f14 <TIM_Base_SetConfig+0x38>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a39      	ldr	r2, [pc, #228]	@ (8003fe4 <TIM_Base_SetConfig+0x108>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_Base_SetConfig+0x38>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a38      	ldr	r2, [pc, #224]	@ (8003fe8 <TIM_Base_SetConfig+0x10c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0x38>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a37      	ldr	r2, [pc, #220]	@ (8003fec <TIM_Base_SetConfig+0x110>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d108      	bne.n	8003f26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe0 <TIM_Base_SetConfig+0x104>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01b      	beq.n	8003f66 <TIM_Base_SetConfig+0x8a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f34:	d017      	beq.n	8003f66 <TIM_Base_SetConfig+0x8a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <TIM_Base_SetConfig+0x108>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <TIM_Base_SetConfig+0x8a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a29      	ldr	r2, [pc, #164]	@ (8003fe8 <TIM_Base_SetConfig+0x10c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00f      	beq.n	8003f66 <TIM_Base_SetConfig+0x8a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a28      	ldr	r2, [pc, #160]	@ (8003fec <TIM_Base_SetConfig+0x110>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_Base_SetConfig+0x8a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a27      	ldr	r2, [pc, #156]	@ (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_Base_SetConfig+0x8a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a26      	ldr	r2, [pc, #152]	@ (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0x8a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a25      	ldr	r2, [pc, #148]	@ (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a10      	ldr	r2, [pc, #64]	@ (8003fe0 <TIM_Base_SetConfig+0x104>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_Base_SetConfig+0xe8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <TIM_Base_SetConfig+0x110>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0xe8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a10      	ldr	r2, [pc, #64]	@ (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0xe8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0xe8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d103      	bne.n	8003fcc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	615a      	str	r2, [r3, #20]
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800
 8003fec:	40013400 	.word	0x40013400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800

08003ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f023 0201 	bic.w	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f023 0302 	bic.w	r3, r3, #2
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a2c      	ldr	r2, [pc, #176]	@ (8004108 <TIM_OC1_SetConfig+0x10c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00f      	beq.n	800407c <TIM_OC1_SetConfig+0x80>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a2b      	ldr	r2, [pc, #172]	@ (800410c <TIM_OC1_SetConfig+0x110>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00b      	beq.n	800407c <TIM_OC1_SetConfig+0x80>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a2a      	ldr	r2, [pc, #168]	@ (8004110 <TIM_OC1_SetConfig+0x114>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <TIM_OC1_SetConfig+0x80>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a29      	ldr	r2, [pc, #164]	@ (8004114 <TIM_OC1_SetConfig+0x118>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_OC1_SetConfig+0x80>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a28      	ldr	r2, [pc, #160]	@ (8004118 <TIM_OC1_SetConfig+0x11c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10c      	bne.n	8004096 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0308 	bic.w	r3, r3, #8
 8004082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <TIM_OC1_SetConfig+0x10c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_OC1_SetConfig+0xc2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a1a      	ldr	r2, [pc, #104]	@ (800410c <TIM_OC1_SetConfig+0x110>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_OC1_SetConfig+0xc2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a19      	ldr	r2, [pc, #100]	@ (8004110 <TIM_OC1_SetConfig+0x114>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_OC1_SetConfig+0xc2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <TIM_OC1_SetConfig+0x118>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC1_SetConfig+0xc2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <TIM_OC1_SetConfig+0x11c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d111      	bne.n	80040e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	621a      	str	r2, [r3, #32]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40013400 	.word	0x40013400
 8004110:	40014000 	.word	0x40014000
 8004114:	40014400 	.word	0x40014400
 8004118:	40014800 	.word	0x40014800

0800411c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0210 	bic.w	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800414a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0320 	bic.w	r3, r3, #32
 800416a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a28      	ldr	r2, [pc, #160]	@ (800421c <TIM_OC2_SetConfig+0x100>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_OC2_SetConfig+0x6c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a27      	ldr	r2, [pc, #156]	@ (8004220 <TIM_OC2_SetConfig+0x104>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d10d      	bne.n	80041a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800418e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a1d      	ldr	r2, [pc, #116]	@ (800421c <TIM_OC2_SetConfig+0x100>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00f      	beq.n	80041cc <TIM_OC2_SetConfig+0xb0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004220 <TIM_OC2_SetConfig+0x104>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00b      	beq.n	80041cc <TIM_OC2_SetConfig+0xb0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004224 <TIM_OC2_SetConfig+0x108>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d007      	beq.n	80041cc <TIM_OC2_SetConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a1a      	ldr	r2, [pc, #104]	@ (8004228 <TIM_OC2_SetConfig+0x10c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_OC2_SetConfig+0xb0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a19      	ldr	r2, [pc, #100]	@ (800422c <TIM_OC2_SetConfig+0x110>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40013400 	.word	0x40013400
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800

08004230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800425e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0303 	bic.w	r3, r3, #3
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800427c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a27      	ldr	r2, [pc, #156]	@ (800432c <TIM_OC3_SetConfig+0xfc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_OC3_SetConfig+0x6a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a26      	ldr	r2, [pc, #152]	@ (8004330 <TIM_OC3_SetConfig+0x100>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10d      	bne.n	80042b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1c      	ldr	r2, [pc, #112]	@ (800432c <TIM_OC3_SetConfig+0xfc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00f      	beq.n	80042de <TIM_OC3_SetConfig+0xae>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004330 <TIM_OC3_SetConfig+0x100>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00b      	beq.n	80042de <TIM_OC3_SetConfig+0xae>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004334 <TIM_OC3_SetConfig+0x104>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <TIM_OC3_SetConfig+0xae>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a19      	ldr	r2, [pc, #100]	@ (8004338 <TIM_OC3_SetConfig+0x108>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_OC3_SetConfig+0xae>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a18      	ldr	r2, [pc, #96]	@ (800433c <TIM_OC3_SetConfig+0x10c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d113      	bne.n	8004306 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800

08004340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800437a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800438e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	031b      	lsls	r3, r3, #12
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <TIM_OC4_SetConfig+0xc0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00f      	beq.n	80043c4 <TIM_OC4_SetConfig+0x84>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <TIM_OC4_SetConfig+0xc4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <TIM_OC4_SetConfig+0x84>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a16      	ldr	r2, [pc, #88]	@ (8004408 <TIM_OC4_SetConfig+0xc8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d007      	beq.n	80043c4 <TIM_OC4_SetConfig+0x84>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a15      	ldr	r2, [pc, #84]	@ (800440c <TIM_OC4_SetConfig+0xcc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_OC4_SetConfig+0x84>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a14      	ldr	r2, [pc, #80]	@ (8004410 <TIM_OC4_SetConfig+0xd0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d109      	bne.n	80043d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40013400 	.word	0x40013400
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800

08004414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004458:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <TIM_OC5_SetConfig+0xb4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00f      	beq.n	800448e <TIM_OC5_SetConfig+0x7a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <TIM_OC5_SetConfig+0xb8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00b      	beq.n	800448e <TIM_OC5_SetConfig+0x7a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a15      	ldr	r2, [pc, #84]	@ (80044d0 <TIM_OC5_SetConfig+0xbc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <TIM_OC5_SetConfig+0x7a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a14      	ldr	r2, [pc, #80]	@ (80044d4 <TIM_OC5_SetConfig+0xc0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_OC5_SetConfig+0x7a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a13      	ldr	r2, [pc, #76]	@ (80044d8 <TIM_OC5_SetConfig+0xc4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d109      	bne.n	80044a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004494:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800

080044dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	051b      	lsls	r3, r3, #20
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <TIM_OC6_SetConfig+0xb8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00f      	beq.n	8004558 <TIM_OC6_SetConfig+0x7c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a17      	ldr	r2, [pc, #92]	@ (8004598 <TIM_OC6_SetConfig+0xbc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_OC6_SetConfig+0x7c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a16      	ldr	r2, [pc, #88]	@ (800459c <TIM_OC6_SetConfig+0xc0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_OC6_SetConfig+0x7c>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a15      	ldr	r2, [pc, #84]	@ (80045a0 <TIM_OC6_SetConfig+0xc4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_OC6_SetConfig+0x7c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a14      	ldr	r2, [pc, #80]	@ (80045a4 <TIM_OC6_SetConfig+0xc8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d109      	bne.n	800456c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800455e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	029b      	lsls	r3, r3, #10
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40013400 	.word	0x40013400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800

080045a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0201 	bic.w	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 030a 	bic.w	r3, r3, #10
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0210 	bic.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	031b      	lsls	r3, r3, #12
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	f043 0307 	orr.w	r3, r3, #7
 8004688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	021a      	lsls	r2, r3, #8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	431a      	orrs	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	609a      	str	r2, [r3, #8]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2201      	movs	r2, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	401a      	ands	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800473c:	2302      	movs	r3, #2
 800473e:	e063      	b.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2b      	ldr	r2, [pc, #172]	@ (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2a      	ldr	r2, [pc, #168]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d108      	bne.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800477a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b2:	d013      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a18      	ldr	r2, [pc, #96]	@ (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a17      	ldr	r2, [pc, #92]	@ (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a12      	ldr	r2, [pc, #72]	@ (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a13      	ldr	r2, [pc, #76]	@ (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d10c      	bne.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40013400 	.word	0x40013400
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40014000 	.word	0x40014000

08004828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e040      	b.n	80048bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fdc2 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	@ 0x24
 8004854:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fc00 	bl	800506c <UART_SetConfig>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e022      	b.n	80048bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fdc8 	bl	8005414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fe4f 	bl	8005558 <UART_CheckIdleState>
 80048ba:	4603      	mov	r3, r0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	@ 0x28
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d177      	bne.n	80049cc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_UART_Transmit+0x24>
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e070      	b.n	80049ce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2221      	movs	r2, #33	@ 0x21
 80048f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048fa:	f7fc ff9f 	bl	800183c <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	88fa      	ldrh	r2, [r7, #6]
 8004904:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004918:	d108      	bne.n	800492c <HAL_UART_Transmit+0x68>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e003      	b.n	8004934 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004934:	e02f      	b.n	8004996 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2200      	movs	r2, #0
 800493e:	2180      	movs	r1, #128	@ 0x80
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 feb1 	bl	80056a8 <UART_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e03b      	b.n	80049ce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004968:	b292      	uxth	r2, r2
 800496a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	3302      	adds	r3, #2
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e007      	b.n	8004984 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1c9      	bne.n	8004936 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2140      	movs	r1, #64	@ 0x40
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fe7b 	bl	80056a8 <UART_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e005      	b.n	80049ce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b08a      	sub	sp, #40	@ 0x28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d132      	bne.n	8004a54 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_UART_Receive_IT+0x24>
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e02b      	b.n	8004a56 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d018      	beq.n	8004a44 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e6      	bne.n	8004a12 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	461a      	mov	r2, r3
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fe94 	bl	8005778 <UART_Start_Receive_IT>
 8004a50:	4603      	mov	r3, r0
 8004a52:	e000      	b.n	8004a56 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3728      	adds	r7, #40	@ 0x28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b0ba      	sub	sp, #232	@ 0xe8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004a8a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004a8e:	4013      	ands	r3, r2
 8004a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d115      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00f      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 82ab 	beq.w	8005014 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
      }
      return;
 8004ac6:	e2a5      	b.n	8005014 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8117 	beq.w	8004d00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ade:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ae2:	4b85      	ldr	r3, [pc, #532]	@ (8004cf8 <HAL_UART_IRQHandler+0x298>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 810a 	beq.w	8004d00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d011      	beq.n	8004b1c <HAL_UART_IRQHandler+0xbc>
 8004af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b12:	f043 0201 	orr.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d011      	beq.n	8004b4c <HAL_UART_IRQHandler+0xec>
 8004b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b42:	f043 0204 	orr.w	r2, r3, #4
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d011      	beq.n	8004b7c <HAL_UART_IRQHandler+0x11c>
 8004b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b72:	f043 0202 	orr.w	r2, r3, #2
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d017      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bae:	f043 0208 	orr.w	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d012      	beq.n	8004bea <HAL_UART_IRQHandler+0x18a>
 8004bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00c      	beq.n	8004bea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be0:	f043 0220 	orr.w	r2, r3, #32
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8211 	beq.w	8005018 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00d      	beq.n	8004c1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c32:	2b40      	cmp	r3, #64	@ 0x40
 8004c34:	d005      	beq.n	8004c42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04f      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fe4c 	bl	80058e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b40      	cmp	r3, #64	@ 0x40
 8004c54:	d141      	bne.n	8004cda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1d9      	bne.n	8004c56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d013      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cae:	4a13      	ldr	r2, [pc, #76]	@ (8004cfc <HAL_UART_IRQHandler+0x29c>)
 8004cb0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fc ff85 	bl	8001bc6 <HAL_DMA_Abort_IT>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d017      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	e00f      	b.n	8004cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f9b4 	bl	8005040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	e00b      	b.n	8004cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9b0 	bl	8005040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	e007      	b.n	8004cf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9ac 	bl	8005040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004cf0:	e192      	b.n	8005018 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf2:	bf00      	nop
    return;
 8004cf4:	e190      	b.n	8005018 <HAL_UART_IRQHandler+0x5b8>
 8004cf6:	bf00      	nop
 8004cf8:	04000120 	.word	0x04000120
 8004cfc:	080059a9 	.word	0x080059a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	f040 814b 	bne.w	8004fa0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8144 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 813d 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2210      	movs	r2, #16
 8004d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b40      	cmp	r3, #64	@ 0x40
 8004d3a:	f040 80b5 	bne.w	8004ea8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8164 	beq.w	800501c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	f080 815c 	bcs.w	800501c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	f000 8086 	beq.w	8004e86 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004da4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004da8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004db0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1da      	bne.n	8004d7a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004de8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004df0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e1      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3308      	adds	r3, #8
 8004e20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e24:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e3      	bne.n	8004e00 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e56:	f023 0310 	bic.w	r3, r3, #16
 8004e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e6a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e4      	bne.n	8004e46 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc fe67 	bl	8001b54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8d7 	bl	8005054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ea6:	e0b9      	b.n	800501c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80ab 	beq.w	8005020 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80a6 	beq.w	8005020 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e4      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e3      	bne.n	8004f0a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0310 	bic.w	r3, r3, #16
 8004f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	69b9      	ldr	r1, [r7, #24]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	617b      	str	r3, [r7, #20]
   return(result);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e4      	bne.n	8004f56 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f85b 	bl	8005054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f9e:	e03f      	b.n	8005020 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <HAL_UART_IRQHandler+0x56a>
 8004fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fed8 	bl	8005d78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fc8:	e02d      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01c      	beq.n	8005024 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
    }
    return;
 8004ff2:	e017      	b.n	8005024 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d012      	beq.n	8005026 <HAL_UART_IRQHandler+0x5c6>
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fce1 	bl	80059d4 <UART_EndTransmit_IT>
    return;
 8005012:	e008      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005014:	bf00      	nop
 8005016:	e006      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005018:	bf00      	nop
 800501a:	e004      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
      return;
 800501c:	bf00      	nop
 800501e:	e002      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005024:	bf00      	nop
  }

}
 8005026:	37e8      	adds	r7, #232	@ 0xe8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800509a:	f023 030c 	bic.w	r3, r3, #12
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	430b      	orrs	r3, r1
 80050a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	430a      	orrs	r2, r1
 80050e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4aa7      	ldr	r2, [pc, #668]	@ (8005384 <UART_SetConfig+0x318>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d120      	bne.n	800512e <UART_SetConfig+0xc2>
 80050ec:	4ba6      	ldr	r3, [pc, #664]	@ (8005388 <UART_SetConfig+0x31c>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d817      	bhi.n	8005128 <UART_SetConfig+0xbc>
 80050f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005100 <UART_SetConfig+0x94>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	08005111 	.word	0x08005111
 8005104:	0800511d 	.word	0x0800511d
 8005108:	08005123 	.word	0x08005123
 800510c:	08005117 	.word	0x08005117
 8005110:	2301      	movs	r3, #1
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e0b5      	b.n	8005282 <UART_SetConfig+0x216>
 8005116:	2302      	movs	r3, #2
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e0b2      	b.n	8005282 <UART_SetConfig+0x216>
 800511c:	2304      	movs	r3, #4
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e0af      	b.n	8005282 <UART_SetConfig+0x216>
 8005122:	2308      	movs	r3, #8
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e0ac      	b.n	8005282 <UART_SetConfig+0x216>
 8005128:	2310      	movs	r3, #16
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e0a9      	b.n	8005282 <UART_SetConfig+0x216>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a96      	ldr	r2, [pc, #600]	@ (800538c <UART_SetConfig+0x320>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d124      	bne.n	8005182 <UART_SetConfig+0x116>
 8005138:	4b93      	ldr	r3, [pc, #588]	@ (8005388 <UART_SetConfig+0x31c>)
 800513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005140:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005144:	d011      	beq.n	800516a <UART_SetConfig+0xfe>
 8005146:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800514a:	d817      	bhi.n	800517c <UART_SetConfig+0x110>
 800514c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005150:	d011      	beq.n	8005176 <UART_SetConfig+0x10a>
 8005152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005156:	d811      	bhi.n	800517c <UART_SetConfig+0x110>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <UART_SetConfig+0xf8>
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005160:	d006      	beq.n	8005170 <UART_SetConfig+0x104>
 8005162:	e00b      	b.n	800517c <UART_SetConfig+0x110>
 8005164:	2300      	movs	r3, #0
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e08b      	b.n	8005282 <UART_SetConfig+0x216>
 800516a:	2302      	movs	r3, #2
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e088      	b.n	8005282 <UART_SetConfig+0x216>
 8005170:	2304      	movs	r3, #4
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e085      	b.n	8005282 <UART_SetConfig+0x216>
 8005176:	2308      	movs	r3, #8
 8005178:	77fb      	strb	r3, [r7, #31]
 800517a:	e082      	b.n	8005282 <UART_SetConfig+0x216>
 800517c:	2310      	movs	r3, #16
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e07f      	b.n	8005282 <UART_SetConfig+0x216>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a82      	ldr	r2, [pc, #520]	@ (8005390 <UART_SetConfig+0x324>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d124      	bne.n	80051d6 <UART_SetConfig+0x16a>
 800518c:	4b7e      	ldr	r3, [pc, #504]	@ (8005388 <UART_SetConfig+0x31c>)
 800518e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005190:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005194:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005198:	d011      	beq.n	80051be <UART_SetConfig+0x152>
 800519a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800519e:	d817      	bhi.n	80051d0 <UART_SetConfig+0x164>
 80051a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051a4:	d011      	beq.n	80051ca <UART_SetConfig+0x15e>
 80051a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051aa:	d811      	bhi.n	80051d0 <UART_SetConfig+0x164>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <UART_SetConfig+0x14c>
 80051b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051b4:	d006      	beq.n	80051c4 <UART_SetConfig+0x158>
 80051b6:	e00b      	b.n	80051d0 <UART_SetConfig+0x164>
 80051b8:	2300      	movs	r3, #0
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e061      	b.n	8005282 <UART_SetConfig+0x216>
 80051be:	2302      	movs	r3, #2
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e05e      	b.n	8005282 <UART_SetConfig+0x216>
 80051c4:	2304      	movs	r3, #4
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e05b      	b.n	8005282 <UART_SetConfig+0x216>
 80051ca:	2308      	movs	r3, #8
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e058      	b.n	8005282 <UART_SetConfig+0x216>
 80051d0:	2310      	movs	r3, #16
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e055      	b.n	8005282 <UART_SetConfig+0x216>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a6e      	ldr	r2, [pc, #440]	@ (8005394 <UART_SetConfig+0x328>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d124      	bne.n	800522a <UART_SetConfig+0x1be>
 80051e0:	4b69      	ldr	r3, [pc, #420]	@ (8005388 <UART_SetConfig+0x31c>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80051e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051ec:	d011      	beq.n	8005212 <UART_SetConfig+0x1a6>
 80051ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051f2:	d817      	bhi.n	8005224 <UART_SetConfig+0x1b8>
 80051f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051f8:	d011      	beq.n	800521e <UART_SetConfig+0x1b2>
 80051fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051fe:	d811      	bhi.n	8005224 <UART_SetConfig+0x1b8>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <UART_SetConfig+0x1a0>
 8005204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005208:	d006      	beq.n	8005218 <UART_SetConfig+0x1ac>
 800520a:	e00b      	b.n	8005224 <UART_SetConfig+0x1b8>
 800520c:	2300      	movs	r3, #0
 800520e:	77fb      	strb	r3, [r7, #31]
 8005210:	e037      	b.n	8005282 <UART_SetConfig+0x216>
 8005212:	2302      	movs	r3, #2
 8005214:	77fb      	strb	r3, [r7, #31]
 8005216:	e034      	b.n	8005282 <UART_SetConfig+0x216>
 8005218:	2304      	movs	r3, #4
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e031      	b.n	8005282 <UART_SetConfig+0x216>
 800521e:	2308      	movs	r3, #8
 8005220:	77fb      	strb	r3, [r7, #31]
 8005222:	e02e      	b.n	8005282 <UART_SetConfig+0x216>
 8005224:	2310      	movs	r3, #16
 8005226:	77fb      	strb	r3, [r7, #31]
 8005228:	e02b      	b.n	8005282 <UART_SetConfig+0x216>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5a      	ldr	r2, [pc, #360]	@ (8005398 <UART_SetConfig+0x32c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d124      	bne.n	800527e <UART_SetConfig+0x212>
 8005234:	4b54      	ldr	r3, [pc, #336]	@ (8005388 <UART_SetConfig+0x31c>)
 8005236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005238:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800523c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005240:	d011      	beq.n	8005266 <UART_SetConfig+0x1fa>
 8005242:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005246:	d817      	bhi.n	8005278 <UART_SetConfig+0x20c>
 8005248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800524c:	d011      	beq.n	8005272 <UART_SetConfig+0x206>
 800524e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005252:	d811      	bhi.n	8005278 <UART_SetConfig+0x20c>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <UART_SetConfig+0x1f4>
 8005258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800525c:	d006      	beq.n	800526c <UART_SetConfig+0x200>
 800525e:	e00b      	b.n	8005278 <UART_SetConfig+0x20c>
 8005260:	2300      	movs	r3, #0
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e00d      	b.n	8005282 <UART_SetConfig+0x216>
 8005266:	2302      	movs	r3, #2
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e00a      	b.n	8005282 <UART_SetConfig+0x216>
 800526c:	2304      	movs	r3, #4
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e007      	b.n	8005282 <UART_SetConfig+0x216>
 8005272:	2308      	movs	r3, #8
 8005274:	77fb      	strb	r3, [r7, #31]
 8005276:	e004      	b.n	8005282 <UART_SetConfig+0x216>
 8005278:	2310      	movs	r3, #16
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e001      	b.n	8005282 <UART_SetConfig+0x216>
 800527e:	2310      	movs	r3, #16
 8005280:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800528a:	d15b      	bne.n	8005344 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800528c:	7ffb      	ldrb	r3, [r7, #31]
 800528e:	2b08      	cmp	r3, #8
 8005290:	d827      	bhi.n	80052e2 <UART_SetConfig+0x276>
 8005292:	a201      	add	r2, pc, #4	@ (adr r2, 8005298 <UART_SetConfig+0x22c>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	080052e3 	.word	0x080052e3
 80052a8:	080052d3 	.word	0x080052d3
 80052ac:	080052e3 	.word	0x080052e3
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	080052e3 	.word	0x080052e3
 80052b8:	080052db 	.word	0x080052db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052bc:	f7fe f884 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 80052c0:	61b8      	str	r0, [r7, #24]
        break;
 80052c2:	e013      	b.n	80052ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c4:	f7fe f8a2 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 80052c8:	61b8      	str	r0, [r7, #24]
        break;
 80052ca:	e00f      	b.n	80052ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052cc:	4b33      	ldr	r3, [pc, #204]	@ (800539c <UART_SetConfig+0x330>)
 80052ce:	61bb      	str	r3, [r7, #24]
        break;
 80052d0:	e00c      	b.n	80052ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d2:	f7fe f803 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 80052d6:	61b8      	str	r0, [r7, #24]
        break;
 80052d8:	e008      	b.n	80052ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052de:	61bb      	str	r3, [r7, #24]
        break;
 80052e0:	e004      	b.n	80052ec <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	77bb      	strb	r3, [r7, #30]
        break;
 80052ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8082 	beq.w	80053f8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	005a      	lsls	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	441a      	add	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b0f      	cmp	r3, #15
 800530e:	d916      	bls.n	800533e <UART_SetConfig+0x2d2>
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005316:	d212      	bcs.n	800533e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f023 030f 	bic.w	r3, r3, #15
 8005320:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	b29b      	uxth	r3, r3
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	b29a      	uxth	r2, r3
 800532e:	89fb      	ldrh	r3, [r7, #14]
 8005330:	4313      	orrs	r3, r2
 8005332:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	89fa      	ldrh	r2, [r7, #14]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	e05c      	b.n	80053f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	77bb      	strb	r3, [r7, #30]
 8005342:	e059      	b.n	80053f8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005344:	7ffb      	ldrb	r3, [r7, #31]
 8005346:	2b08      	cmp	r3, #8
 8005348:	d835      	bhi.n	80053b6 <UART_SetConfig+0x34a>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0x2e4>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005375 	.word	0x08005375
 8005354:	0800537d 	.word	0x0800537d
 8005358:	080053a1 	.word	0x080053a1
 800535c:	080053b7 	.word	0x080053b7
 8005360:	080053a7 	.word	0x080053a7
 8005364:	080053b7 	.word	0x080053b7
 8005368:	080053b7 	.word	0x080053b7
 800536c:	080053b7 	.word	0x080053b7
 8005370:	080053af 	.word	0x080053af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fe f828 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 8005378:	61b8      	str	r0, [r7, #24]
        break;
 800537a:	e021      	b.n	80053c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800537c:	f7fe f846 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8005380:	61b8      	str	r0, [r7, #24]
        break;
 8005382:	e01d      	b.n	80053c0 <UART_SetConfig+0x354>
 8005384:	40013800 	.word	0x40013800
 8005388:	40021000 	.word	0x40021000
 800538c:	40004400 	.word	0x40004400
 8005390:	40004800 	.word	0x40004800
 8005394:	40004c00 	.word	0x40004c00
 8005398:	40005000 	.word	0x40005000
 800539c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005410 <UART_SetConfig+0x3a4>)
 80053a2:	61bb      	str	r3, [r7, #24]
        break;
 80053a4:	e00c      	b.n	80053c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a6:	f7fd ff99 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 80053aa:	61b8      	str	r0, [r7, #24]
        break;
 80053ac:	e008      	b.n	80053c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b2:	61bb      	str	r3, [r7, #24]
        break;
 80053b4:	e004      	b.n	80053c0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	77bb      	strb	r3, [r7, #30]
        break;
 80053be:	bf00      	nop
    }

    if (pclk != 0U)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	085a      	lsrs	r2, r3, #1
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	441a      	add	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b0f      	cmp	r3, #15
 80053de:	d909      	bls.n	80053f4 <UART_SetConfig+0x388>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e6:	d205      	bcs.n	80053f4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	e001      	b.n	80053f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005404:	7fbb      	ldrb	r3, [r7, #30]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	007a1200 	.word	0x007a1200

08005414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01a      	beq.n	800552a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005512:	d10a      	bne.n	800552a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b098      	sub	sp, #96	@ 0x60
 800555c:	af02      	add	r7, sp, #8
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005568:	f7fc f968 	bl	800183c <HAL_GetTick>
 800556c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d12e      	bne.n	80055da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800557c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005584:	2200      	movs	r2, #0
 8005586:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f88c 	bl	80056a8 <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d021      	beq.n	80055da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e6      	bne.n	8005596 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e062      	b.n	80056a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d149      	bne.n	800567c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f856 	bl	80056a8 <UART_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d03c      	beq.n	800567c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	623b      	str	r3, [r7, #32]
   return(result);
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005620:	633b      	str	r3, [r7, #48]	@ 0x30
 8005622:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e6      	bne.n	8005602 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3308      	adds	r3, #8
 800563a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	60fb      	str	r3, [r7, #12]
   return(result);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3308      	adds	r3, #8
 8005652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005654:	61fa      	str	r2, [r7, #28]
 8005656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	69b9      	ldr	r1, [r7, #24]
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	617b      	str	r3, [r7, #20]
   return(result);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e5      	bne.n	8005634 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e011      	b.n	80056a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3758      	adds	r7, #88	@ 0x58
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b8:	e049      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d045      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c2:	f7fc f8bb 	bl	800183c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e048      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d031      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d110      	bne.n	800571a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2208      	movs	r2, #8
 80056fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f8ed 	bl	80058e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2208      	movs	r2, #8
 800570a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e029      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005728:	d111      	bne.n	800574e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f8d3 	bl	80058e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e00f      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	429a      	cmp	r2, r3
 800576a:	d0a6      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005778:	b480      	push	{r7}
 800577a:	b097      	sub	sp, #92	@ 0x5c
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057aa:	d10e      	bne.n	80057ca <UART_Start_Receive_IT+0x52>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <UART_Start_Receive_IT+0x48>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80057ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057be:	e01a      	b.n	80057f6 <UART_Start_Receive_IT+0x7e>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	22ff      	movs	r2, #255	@ 0xff
 80057c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057c8:	e015      	b.n	80057f6 <UART_Start_Receive_IT+0x7e>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <UART_Start_Receive_IT+0x76>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <UART_Start_Receive_IT+0x6c>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	22ff      	movs	r2, #255	@ 0xff
 80057de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057e2:	e008      	b.n	80057f6 <UART_Start_Receive_IT+0x7e>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	227f      	movs	r2, #127	@ 0x7f
 80057e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057ec:	e003      	b.n	80057f6 <UART_Start_Receive_IT+0x7e>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2222      	movs	r2, #34	@ 0x22
 8005802:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	657b      	str	r3, [r7, #84]	@ 0x54
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3308      	adds	r3, #8
 8005824:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005826:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005828:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800582c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005842:	d107      	bne.n	8005854 <UART_Start_Receive_IT+0xdc>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a22      	ldr	r2, [pc, #136]	@ (80058d8 <UART_Start_Receive_IT+0x160>)
 8005850:	669a      	str	r2, [r3, #104]	@ 0x68
 8005852:	e002      	b.n	800585a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a21      	ldr	r2, [pc, #132]	@ (80058dc <UART_Start_Receive_IT+0x164>)
 8005858:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d019      	beq.n	8005896 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005880:	637b      	str	r3, [r7, #52]	@ 0x34
 8005882:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800588e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e6      	bne.n	8005862 <UART_Start_Receive_IT+0xea>
 8005894:	e018      	b.n	80058c8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	613b      	str	r3, [r7, #16]
   return(result);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f043 0320 	orr.w	r3, r3, #32
 80058aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	69f9      	ldr	r1, [r7, #28]
 80058ba:	6a3a      	ldr	r2, [r7, #32]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e6      	bne.n	8005896 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	375c      	adds	r7, #92	@ 0x5c
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	08005bd1 	.word	0x08005bd1
 80058dc:	08005a29 	.word	0x08005a29

080058e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b095      	sub	sp, #84	@ 0x54
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005906:	643b      	str	r3, [r7, #64]	@ 0x40
 8005908:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800590c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e6      	bne.n	80058e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3308      	adds	r3, #8
 8005920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	61fb      	str	r3, [r7, #28]
   return(result);
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3308      	adds	r3, #8
 8005938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800593a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800593c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e5      	bne.n	800591a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005952:	2b01      	cmp	r3, #1
 8005954:	d118      	bne.n	8005988 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	60bb      	str	r3, [r7, #8]
   return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	647b      	str	r3, [r7, #68]	@ 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	613b      	str	r3, [r7, #16]
   return(result);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e6      	bne.n	8005956 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800599c:	bf00      	nop
 800599e:	3754      	adds	r7, #84	@ 0x54
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff fb3a 	bl	8005040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6979      	ldr	r1, [r7, #20]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	613b      	str	r3, [r7, #16]
   return(result);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e6      	bne.n	80059dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fb06 	bl	800502c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a20:	bf00      	nop
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b09c      	sub	sp, #112	@ 0x70
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a36:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a40:	2b22      	cmp	r3, #34	@ 0x22
 8005a42:	f040 80b9 	bne.w	8005bb8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005a4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a54:	b2d9      	uxtb	r1, r3
 8005a56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a60:	400a      	ands	r2, r1
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f040 809c 	bne.w	8005bc8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ab0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ab4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e6      	bne.n	8005a90 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005ae2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ae8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e5      	bne.n	8005ac2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d018      	beq.n	8005b4a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	623b      	str	r3, [r7, #32]
   return(result);
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e6      	bne.n	8005b18 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d12e      	bne.n	8005bb0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	69b9      	ldr	r1, [r7, #24]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	617b      	str	r3, [r7, #20]
   return(result);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e6      	bne.n	8005b58 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d103      	bne.n	8005ba0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fa53 	bl	8005054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bae:	e00b      	b.n	8005bc8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fb fae5 	bl	8001180 <HAL_UART_RxCpltCallback>
}
 8005bb6:	e007      	b.n	8005bc8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0208 	orr.w	r2, r2, #8
 8005bc6:	619a      	str	r2, [r3, #24]
}
 8005bc8:	bf00      	nop
 8005bca:	3770      	adds	r7, #112	@ 0x70
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b09c      	sub	sp, #112	@ 0x70
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bde:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005be8:	2b22      	cmp	r3, #34	@ 0x22
 8005bea:	f040 80b9 	bne.w	8005d60 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005bf4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bfe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005c02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c06:	4013      	ands	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c12:	1c9a      	adds	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 809c 	bne.w	8005d70 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c58:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e6      	bne.n	8005c38 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e5      	bne.n	8005c6a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d018      	beq.n	8005cf2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e6      	bne.n	8005cc0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d12e      	bne.n	8005d58 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f023 0310 	bic.w	r3, r3, #16
 8005d14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6979      	ldr	r1, [r7, #20]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e6      	bne.n	8005d00 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d103      	bne.n	8005d48 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2210      	movs	r2, #16
 8005d46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff f97f 	bl	8005054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d56:	e00b      	b.n	8005d70 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fb fa11 	bl	8001180 <HAL_UART_RxCpltCallback>
}
 8005d5e:	e007      	b.n	8005d70 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0208 	orr.w	r2, r2, #8
 8005d6e:	619a      	str	r2, [r3, #24]
}
 8005d70:	bf00      	nop
 8005d72:	3770      	adds	r7, #112	@ 0x70
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <__cvt>:
 8005d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d90:	ec57 6b10 	vmov	r6, r7, d0
 8005d94:	2f00      	cmp	r7, #0
 8005d96:	460c      	mov	r4, r1
 8005d98:	4619      	mov	r1, r3
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	bfbb      	ittet	lt
 8005d9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005da2:	461f      	movlt	r7, r3
 8005da4:	2300      	movge	r3, #0
 8005da6:	232d      	movlt	r3, #45	@ 0x2d
 8005da8:	700b      	strb	r3, [r1, #0]
 8005daa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005db0:	4691      	mov	r9, r2
 8005db2:	f023 0820 	bic.w	r8, r3, #32
 8005db6:	bfbc      	itt	lt
 8005db8:	4632      	movlt	r2, r6
 8005dba:	4616      	movlt	r6, r2
 8005dbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dc0:	d005      	beq.n	8005dce <__cvt+0x42>
 8005dc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005dc6:	d100      	bne.n	8005dca <__cvt+0x3e>
 8005dc8:	3401      	adds	r4, #1
 8005dca:	2102      	movs	r1, #2
 8005dcc:	e000      	b.n	8005dd0 <__cvt+0x44>
 8005dce:	2103      	movs	r1, #3
 8005dd0:	ab03      	add	r3, sp, #12
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	ab02      	add	r3, sp, #8
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	ec47 6b10 	vmov	d0, r6, r7
 8005ddc:	4653      	mov	r3, sl
 8005dde:	4622      	mov	r2, r4
 8005de0:	f000 fe3a 	bl	8006a58 <_dtoa_r>
 8005de4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005de8:	4605      	mov	r5, r0
 8005dea:	d119      	bne.n	8005e20 <__cvt+0x94>
 8005dec:	f019 0f01 	tst.w	r9, #1
 8005df0:	d00e      	beq.n	8005e10 <__cvt+0x84>
 8005df2:	eb00 0904 	add.w	r9, r0, r4
 8005df6:	2200      	movs	r2, #0
 8005df8:	2300      	movs	r3, #0
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	4639      	mov	r1, r7
 8005dfe:	f7fa fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e02:	b108      	cbz	r0, 8005e08 <__cvt+0x7c>
 8005e04:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e08:	2230      	movs	r2, #48	@ 0x30
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	454b      	cmp	r3, r9
 8005e0e:	d31e      	bcc.n	8005e4e <__cvt+0xc2>
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e14:	1b5b      	subs	r3, r3, r5
 8005e16:	4628      	mov	r0, r5
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	b004      	add	sp, #16
 8005e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e24:	eb00 0904 	add.w	r9, r0, r4
 8005e28:	d1e5      	bne.n	8005df6 <__cvt+0x6a>
 8005e2a:	7803      	ldrb	r3, [r0, #0]
 8005e2c:	2b30      	cmp	r3, #48	@ 0x30
 8005e2e:	d10a      	bne.n	8005e46 <__cvt+0xba>
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	4630      	mov	r0, r6
 8005e36:	4639      	mov	r1, r7
 8005e38:	f7fa fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e3c:	b918      	cbnz	r0, 8005e46 <__cvt+0xba>
 8005e3e:	f1c4 0401 	rsb	r4, r4, #1
 8005e42:	f8ca 4000 	str.w	r4, [sl]
 8005e46:	f8da 3000 	ldr.w	r3, [sl]
 8005e4a:	4499      	add	r9, r3
 8005e4c:	e7d3      	b.n	8005df6 <__cvt+0x6a>
 8005e4e:	1c59      	adds	r1, r3, #1
 8005e50:	9103      	str	r1, [sp, #12]
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e7d9      	b.n	8005e0a <__cvt+0x7e>

08005e56 <__exponent>:
 8005e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	bfba      	itte	lt
 8005e5c:	4249      	neglt	r1, r1
 8005e5e:	232d      	movlt	r3, #45	@ 0x2d
 8005e60:	232b      	movge	r3, #43	@ 0x2b
 8005e62:	2909      	cmp	r1, #9
 8005e64:	7002      	strb	r2, [r0, #0]
 8005e66:	7043      	strb	r3, [r0, #1]
 8005e68:	dd29      	ble.n	8005ebe <__exponent+0x68>
 8005e6a:	f10d 0307 	add.w	r3, sp, #7
 8005e6e:	461d      	mov	r5, r3
 8005e70:	270a      	movs	r7, #10
 8005e72:	461a      	mov	r2, r3
 8005e74:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e78:	fb07 1416 	mls	r4, r7, r6, r1
 8005e7c:	3430      	adds	r4, #48	@ 0x30
 8005e7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e82:	460c      	mov	r4, r1
 8005e84:	2c63      	cmp	r4, #99	@ 0x63
 8005e86:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	dcf1      	bgt.n	8005e72 <__exponent+0x1c>
 8005e8e:	3130      	adds	r1, #48	@ 0x30
 8005e90:	1e94      	subs	r4, r2, #2
 8005e92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e96:	1c41      	adds	r1, r0, #1
 8005e98:	4623      	mov	r3, r4
 8005e9a:	42ab      	cmp	r3, r5
 8005e9c:	d30a      	bcc.n	8005eb4 <__exponent+0x5e>
 8005e9e:	f10d 0309 	add.w	r3, sp, #9
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	42ac      	cmp	r4, r5
 8005ea6:	bf88      	it	hi
 8005ea8:	2300      	movhi	r3, #0
 8005eaa:	3302      	adds	r3, #2
 8005eac:	4403      	add	r3, r0
 8005eae:	1a18      	subs	r0, r3, r0
 8005eb0:	b003      	add	sp, #12
 8005eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eb4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005eb8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ebc:	e7ed      	b.n	8005e9a <__exponent+0x44>
 8005ebe:	2330      	movs	r3, #48	@ 0x30
 8005ec0:	3130      	adds	r1, #48	@ 0x30
 8005ec2:	7083      	strb	r3, [r0, #2]
 8005ec4:	70c1      	strb	r1, [r0, #3]
 8005ec6:	1d03      	adds	r3, r0, #4
 8005ec8:	e7f1      	b.n	8005eae <__exponent+0x58>
	...

08005ecc <_printf_float>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	b08d      	sub	sp, #52	@ 0x34
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ed8:	4616      	mov	r6, r2
 8005eda:	461f      	mov	r7, r3
 8005edc:	4605      	mov	r5, r0
 8005ede:	f000 fcbb 	bl	8006858 <_localeconv_r>
 8005ee2:	6803      	ldr	r3, [r0, #0]
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa f9c2 	bl	8000270 <strlen>
 8005eec:	2300      	movs	r3, #0
 8005eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef4:	9005      	str	r0, [sp, #20]
 8005ef6:	3307      	adds	r3, #7
 8005ef8:	f023 0307 	bic.w	r3, r3, #7
 8005efc:	f103 0208 	add.w	r2, r3, #8
 8005f00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f04:	f8d4 b000 	ldr.w	fp, [r4]
 8005f08:	f8c8 2000 	str.w	r2, [r8]
 8005f0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f22:	4b9c      	ldr	r3, [pc, #624]	@ (8006194 <_printf_float+0x2c8>)
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	f7fa fe00 	bl	8000b2c <__aeabi_dcmpun>
 8005f2c:	bb70      	cbnz	r0, 8005f8c <_printf_float+0xc0>
 8005f2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f32:	4b98      	ldr	r3, [pc, #608]	@ (8006194 <_printf_float+0x2c8>)
 8005f34:	f04f 32ff 	mov.w	r2, #4294967295
 8005f38:	f7fa fdda 	bl	8000af0 <__aeabi_dcmple>
 8005f3c:	bb30      	cbnz	r0, 8005f8c <_printf_float+0xc0>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	4640      	mov	r0, r8
 8005f44:	4649      	mov	r1, r9
 8005f46:	f7fa fdc9 	bl	8000adc <__aeabi_dcmplt>
 8005f4a:	b110      	cbz	r0, 8005f52 <_printf_float+0x86>
 8005f4c:	232d      	movs	r3, #45	@ 0x2d
 8005f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f52:	4a91      	ldr	r2, [pc, #580]	@ (8006198 <_printf_float+0x2cc>)
 8005f54:	4b91      	ldr	r3, [pc, #580]	@ (800619c <_printf_float+0x2d0>)
 8005f56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f5a:	bf94      	ite	ls
 8005f5c:	4690      	movls	r8, r2
 8005f5e:	4698      	movhi	r8, r3
 8005f60:	2303      	movs	r3, #3
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	f02b 0304 	bic.w	r3, fp, #4
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	f04f 0900 	mov.w	r9, #0
 8005f6e:	9700      	str	r7, [sp, #0]
 8005f70:	4633      	mov	r3, r6
 8005f72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f9d2 	bl	8006320 <_printf_common>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f040 808d 	bne.w	800609c <_printf_float+0x1d0>
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	b00d      	add	sp, #52	@ 0x34
 8005f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	464b      	mov	r3, r9
 8005f90:	4640      	mov	r0, r8
 8005f92:	4649      	mov	r1, r9
 8005f94:	f7fa fdca 	bl	8000b2c <__aeabi_dcmpun>
 8005f98:	b140      	cbz	r0, 8005fac <_printf_float+0xe0>
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bfbc      	itt	lt
 8005fa0:	232d      	movlt	r3, #45	@ 0x2d
 8005fa2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80061a0 <_printf_float+0x2d4>)
 8005fa8:	4b7e      	ldr	r3, [pc, #504]	@ (80061a4 <_printf_float+0x2d8>)
 8005faa:	e7d4      	b.n	8005f56 <_printf_float+0x8a>
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005fb2:	9206      	str	r2, [sp, #24]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	d13b      	bne.n	8006030 <_printf_float+0x164>
 8005fb8:	2306      	movs	r3, #6
 8005fba:	6063      	str	r3, [r4, #4]
 8005fbc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6022      	str	r2, [r4, #0]
 8005fc4:	9303      	str	r3, [sp, #12]
 8005fc6:	ab0a      	add	r3, sp, #40	@ 0x28
 8005fc8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005fcc:	ab09      	add	r3, sp, #36	@ 0x24
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	6861      	ldr	r1, [r4, #4]
 8005fd2:	ec49 8b10 	vmov	d0, r8, r9
 8005fd6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f7ff fed6 	bl	8005d8c <__cvt>
 8005fe0:	9b06      	ldr	r3, [sp, #24]
 8005fe2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fe4:	2b47      	cmp	r3, #71	@ 0x47
 8005fe6:	4680      	mov	r8, r0
 8005fe8:	d129      	bne.n	800603e <_printf_float+0x172>
 8005fea:	1cc8      	adds	r0, r1, #3
 8005fec:	db02      	blt.n	8005ff4 <_printf_float+0x128>
 8005fee:	6863      	ldr	r3, [r4, #4]
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	dd41      	ble.n	8006078 <_printf_float+0x1ac>
 8005ff4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ff8:	fa5f fa8a 	uxtb.w	sl, sl
 8005ffc:	3901      	subs	r1, #1
 8005ffe:	4652      	mov	r2, sl
 8006000:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006004:	9109      	str	r1, [sp, #36]	@ 0x24
 8006006:	f7ff ff26 	bl	8005e56 <__exponent>
 800600a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800600c:	1813      	adds	r3, r2, r0
 800600e:	2a01      	cmp	r2, #1
 8006010:	4681      	mov	r9, r0
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	dc02      	bgt.n	800601c <_printf_float+0x150>
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	07d2      	lsls	r2, r2, #31
 800601a:	d501      	bpl.n	8006020 <_printf_float+0x154>
 800601c:	3301      	adds	r3, #1
 800601e:	6123      	str	r3, [r4, #16]
 8006020:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0a2      	beq.n	8005f6e <_printf_float+0xa2>
 8006028:	232d      	movs	r3, #45	@ 0x2d
 800602a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800602e:	e79e      	b.n	8005f6e <_printf_float+0xa2>
 8006030:	9a06      	ldr	r2, [sp, #24]
 8006032:	2a47      	cmp	r2, #71	@ 0x47
 8006034:	d1c2      	bne.n	8005fbc <_printf_float+0xf0>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1c0      	bne.n	8005fbc <_printf_float+0xf0>
 800603a:	2301      	movs	r3, #1
 800603c:	e7bd      	b.n	8005fba <_printf_float+0xee>
 800603e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006042:	d9db      	bls.n	8005ffc <_printf_float+0x130>
 8006044:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006048:	d118      	bne.n	800607c <_printf_float+0x1b0>
 800604a:	2900      	cmp	r1, #0
 800604c:	6863      	ldr	r3, [r4, #4]
 800604e:	dd0b      	ble.n	8006068 <_printf_float+0x19c>
 8006050:	6121      	str	r1, [r4, #16]
 8006052:	b913      	cbnz	r3, 800605a <_printf_float+0x18e>
 8006054:	6822      	ldr	r2, [r4, #0]
 8006056:	07d0      	lsls	r0, r2, #31
 8006058:	d502      	bpl.n	8006060 <_printf_float+0x194>
 800605a:	3301      	adds	r3, #1
 800605c:	440b      	add	r3, r1
 800605e:	6123      	str	r3, [r4, #16]
 8006060:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006062:	f04f 0900 	mov.w	r9, #0
 8006066:	e7db      	b.n	8006020 <_printf_float+0x154>
 8006068:	b913      	cbnz	r3, 8006070 <_printf_float+0x1a4>
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	07d2      	lsls	r2, r2, #31
 800606e:	d501      	bpl.n	8006074 <_printf_float+0x1a8>
 8006070:	3302      	adds	r3, #2
 8006072:	e7f4      	b.n	800605e <_printf_float+0x192>
 8006074:	2301      	movs	r3, #1
 8006076:	e7f2      	b.n	800605e <_printf_float+0x192>
 8006078:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800607c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800607e:	4299      	cmp	r1, r3
 8006080:	db05      	blt.n	800608e <_printf_float+0x1c2>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	6121      	str	r1, [r4, #16]
 8006086:	07d8      	lsls	r0, r3, #31
 8006088:	d5ea      	bpl.n	8006060 <_printf_float+0x194>
 800608a:	1c4b      	adds	r3, r1, #1
 800608c:	e7e7      	b.n	800605e <_printf_float+0x192>
 800608e:	2900      	cmp	r1, #0
 8006090:	bfd4      	ite	le
 8006092:	f1c1 0202 	rsble	r2, r1, #2
 8006096:	2201      	movgt	r2, #1
 8006098:	4413      	add	r3, r2
 800609a:	e7e0      	b.n	800605e <_printf_float+0x192>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	055a      	lsls	r2, r3, #21
 80060a0:	d407      	bmi.n	80060b2 <_printf_float+0x1e6>
 80060a2:	6923      	ldr	r3, [r4, #16]
 80060a4:	4642      	mov	r2, r8
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	d12b      	bne.n	8006108 <_printf_float+0x23c>
 80060b0:	e767      	b.n	8005f82 <_printf_float+0xb6>
 80060b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060b6:	f240 80dd 	bls.w	8006274 <_printf_float+0x3a8>
 80060ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060be:	2200      	movs	r2, #0
 80060c0:	2300      	movs	r3, #0
 80060c2:	f7fa fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d033      	beq.n	8006132 <_printf_float+0x266>
 80060ca:	4a37      	ldr	r2, [pc, #220]	@ (80061a8 <_printf_float+0x2dc>)
 80060cc:	2301      	movs	r3, #1
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f af54 	beq.w	8005f82 <_printf_float+0xb6>
 80060da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80060de:	4543      	cmp	r3, r8
 80060e0:	db02      	blt.n	80060e8 <_printf_float+0x21c>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	07d8      	lsls	r0, r3, #31
 80060e6:	d50f      	bpl.n	8006108 <_printf_float+0x23c>
 80060e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f af45 	beq.w	8005f82 <_printf_float+0xb6>
 80060f8:	f04f 0900 	mov.w	r9, #0
 80060fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006100:	f104 0a1a 	add.w	sl, r4, #26
 8006104:	45c8      	cmp	r8, r9
 8006106:	dc09      	bgt.n	800611c <_printf_float+0x250>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	079b      	lsls	r3, r3, #30
 800610c:	f100 8103 	bmi.w	8006316 <_printf_float+0x44a>
 8006110:	68e0      	ldr	r0, [r4, #12]
 8006112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006114:	4298      	cmp	r0, r3
 8006116:	bfb8      	it	lt
 8006118:	4618      	movlt	r0, r3
 800611a:	e734      	b.n	8005f86 <_printf_float+0xba>
 800611c:	2301      	movs	r3, #1
 800611e:	4652      	mov	r2, sl
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f43f af2b 	beq.w	8005f82 <_printf_float+0xb6>
 800612c:	f109 0901 	add.w	r9, r9, #1
 8006130:	e7e8      	b.n	8006104 <_printf_float+0x238>
 8006132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006134:	2b00      	cmp	r3, #0
 8006136:	dc39      	bgt.n	80061ac <_printf_float+0x2e0>
 8006138:	4a1b      	ldr	r2, [pc, #108]	@ (80061a8 <_printf_float+0x2dc>)
 800613a:	2301      	movs	r3, #1
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f af1d 	beq.w	8005f82 <_printf_float+0xb6>
 8006148:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800614c:	ea59 0303 	orrs.w	r3, r9, r3
 8006150:	d102      	bne.n	8006158 <_printf_float+0x28c>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	07d9      	lsls	r1, r3, #31
 8006156:	d5d7      	bpl.n	8006108 <_printf_float+0x23c>
 8006158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	f43f af0d 	beq.w	8005f82 <_printf_float+0xb6>
 8006168:	f04f 0a00 	mov.w	sl, #0
 800616c:	f104 0b1a 	add.w	fp, r4, #26
 8006170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006172:	425b      	negs	r3, r3
 8006174:	4553      	cmp	r3, sl
 8006176:	dc01      	bgt.n	800617c <_printf_float+0x2b0>
 8006178:	464b      	mov	r3, r9
 800617a:	e793      	b.n	80060a4 <_printf_float+0x1d8>
 800617c:	2301      	movs	r3, #1
 800617e:	465a      	mov	r2, fp
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f aefb 	beq.w	8005f82 <_printf_float+0xb6>
 800618c:	f10a 0a01 	add.w	sl, sl, #1
 8006190:	e7ee      	b.n	8006170 <_printf_float+0x2a4>
 8006192:	bf00      	nop
 8006194:	7fefffff 	.word	0x7fefffff
 8006198:	080086d8 	.word	0x080086d8
 800619c:	080086dc 	.word	0x080086dc
 80061a0:	080086e0 	.word	0x080086e0
 80061a4:	080086e4 	.word	0x080086e4
 80061a8:	080086e8 	.word	0x080086e8
 80061ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061b2:	4553      	cmp	r3, sl
 80061b4:	bfa8      	it	ge
 80061b6:	4653      	movge	r3, sl
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	4699      	mov	r9, r3
 80061bc:	dc36      	bgt.n	800622c <_printf_float+0x360>
 80061be:	f04f 0b00 	mov.w	fp, #0
 80061c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061c6:	f104 021a 	add.w	r2, r4, #26
 80061ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061cc:	9306      	str	r3, [sp, #24]
 80061ce:	eba3 0309 	sub.w	r3, r3, r9
 80061d2:	455b      	cmp	r3, fp
 80061d4:	dc31      	bgt.n	800623a <_printf_float+0x36e>
 80061d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d8:	459a      	cmp	sl, r3
 80061da:	dc3a      	bgt.n	8006252 <_printf_float+0x386>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	07da      	lsls	r2, r3, #31
 80061e0:	d437      	bmi.n	8006252 <_printf_float+0x386>
 80061e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e4:	ebaa 0903 	sub.w	r9, sl, r3
 80061e8:	9b06      	ldr	r3, [sp, #24]
 80061ea:	ebaa 0303 	sub.w	r3, sl, r3
 80061ee:	4599      	cmp	r9, r3
 80061f0:	bfa8      	it	ge
 80061f2:	4699      	movge	r9, r3
 80061f4:	f1b9 0f00 	cmp.w	r9, #0
 80061f8:	dc33      	bgt.n	8006262 <_printf_float+0x396>
 80061fa:	f04f 0800 	mov.w	r8, #0
 80061fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006202:	f104 0b1a 	add.w	fp, r4, #26
 8006206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006208:	ebaa 0303 	sub.w	r3, sl, r3
 800620c:	eba3 0309 	sub.w	r3, r3, r9
 8006210:	4543      	cmp	r3, r8
 8006212:	f77f af79 	ble.w	8006108 <_printf_float+0x23c>
 8006216:	2301      	movs	r3, #1
 8006218:	465a      	mov	r2, fp
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	f43f aeae 	beq.w	8005f82 <_printf_float+0xb6>
 8006226:	f108 0801 	add.w	r8, r8, #1
 800622a:	e7ec      	b.n	8006206 <_printf_float+0x33a>
 800622c:	4642      	mov	r2, r8
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	d1c2      	bne.n	80061be <_printf_float+0x2f2>
 8006238:	e6a3      	b.n	8005f82 <_printf_float+0xb6>
 800623a:	2301      	movs	r3, #1
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	9206      	str	r2, [sp, #24]
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	f43f ae9c 	beq.w	8005f82 <_printf_float+0xb6>
 800624a:	9a06      	ldr	r2, [sp, #24]
 800624c:	f10b 0b01 	add.w	fp, fp, #1
 8006250:	e7bb      	b.n	80061ca <_printf_float+0x2fe>
 8006252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	d1c0      	bne.n	80061e2 <_printf_float+0x316>
 8006260:	e68f      	b.n	8005f82 <_printf_float+0xb6>
 8006262:	9a06      	ldr	r2, [sp, #24]
 8006264:	464b      	mov	r3, r9
 8006266:	4442      	add	r2, r8
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	d1c3      	bne.n	80061fa <_printf_float+0x32e>
 8006272:	e686      	b.n	8005f82 <_printf_float+0xb6>
 8006274:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006278:	f1ba 0f01 	cmp.w	sl, #1
 800627c:	dc01      	bgt.n	8006282 <_printf_float+0x3b6>
 800627e:	07db      	lsls	r3, r3, #31
 8006280:	d536      	bpl.n	80062f0 <_printf_float+0x424>
 8006282:	2301      	movs	r3, #1
 8006284:	4642      	mov	r2, r8
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	f43f ae78 	beq.w	8005f82 <_printf_float+0xb6>
 8006292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006296:	4631      	mov	r1, r6
 8006298:	4628      	mov	r0, r5
 800629a:	47b8      	blx	r7
 800629c:	3001      	adds	r0, #1
 800629e:	f43f ae70 	beq.w	8005f82 <_printf_float+0xb6>
 80062a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062a6:	2200      	movs	r2, #0
 80062a8:	2300      	movs	r3, #0
 80062aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ae:	f7fa fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80062b2:	b9c0      	cbnz	r0, 80062e6 <_printf_float+0x41a>
 80062b4:	4653      	mov	r3, sl
 80062b6:	f108 0201 	add.w	r2, r8, #1
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	d10c      	bne.n	80062de <_printf_float+0x412>
 80062c4:	e65d      	b.n	8005f82 <_printf_float+0xb6>
 80062c6:	2301      	movs	r3, #1
 80062c8:	465a      	mov	r2, fp
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae56 	beq.w	8005f82 <_printf_float+0xb6>
 80062d6:	f108 0801 	add.w	r8, r8, #1
 80062da:	45d0      	cmp	r8, sl
 80062dc:	dbf3      	blt.n	80062c6 <_printf_float+0x3fa>
 80062de:	464b      	mov	r3, r9
 80062e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80062e4:	e6df      	b.n	80060a6 <_printf_float+0x1da>
 80062e6:	f04f 0800 	mov.w	r8, #0
 80062ea:	f104 0b1a 	add.w	fp, r4, #26
 80062ee:	e7f4      	b.n	80062da <_printf_float+0x40e>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4642      	mov	r2, r8
 80062f4:	e7e1      	b.n	80062ba <_printf_float+0x3ee>
 80062f6:	2301      	movs	r3, #1
 80062f8:	464a      	mov	r2, r9
 80062fa:	4631      	mov	r1, r6
 80062fc:	4628      	mov	r0, r5
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	f43f ae3e 	beq.w	8005f82 <_printf_float+0xb6>
 8006306:	f108 0801 	add.w	r8, r8, #1
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800630e:	1a5b      	subs	r3, r3, r1
 8006310:	4543      	cmp	r3, r8
 8006312:	dcf0      	bgt.n	80062f6 <_printf_float+0x42a>
 8006314:	e6fc      	b.n	8006110 <_printf_float+0x244>
 8006316:	f04f 0800 	mov.w	r8, #0
 800631a:	f104 0919 	add.w	r9, r4, #25
 800631e:	e7f4      	b.n	800630a <_printf_float+0x43e>

08006320 <_printf_common>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	4616      	mov	r6, r2
 8006326:	4698      	mov	r8, r3
 8006328:	688a      	ldr	r2, [r1, #8]
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006330:	4293      	cmp	r3, r2
 8006332:	bfb8      	it	lt
 8006334:	4613      	movlt	r3, r2
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800633c:	4607      	mov	r7, r0
 800633e:	460c      	mov	r4, r1
 8006340:	b10a      	cbz	r2, 8006346 <_printf_common+0x26>
 8006342:	3301      	adds	r3, #1
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	0699      	lsls	r1, r3, #26
 800634a:	bf42      	ittt	mi
 800634c:	6833      	ldrmi	r3, [r6, #0]
 800634e:	3302      	addmi	r3, #2
 8006350:	6033      	strmi	r3, [r6, #0]
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	f015 0506 	ands.w	r5, r5, #6
 8006358:	d106      	bne.n	8006368 <_printf_common+0x48>
 800635a:	f104 0a19 	add.w	sl, r4, #25
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	6832      	ldr	r2, [r6, #0]
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	42ab      	cmp	r3, r5
 8006366:	dc26      	bgt.n	80063b6 <_printf_common+0x96>
 8006368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800636c:	6822      	ldr	r2, [r4, #0]
 800636e:	3b00      	subs	r3, #0
 8006370:	bf18      	it	ne
 8006372:	2301      	movne	r3, #1
 8006374:	0692      	lsls	r2, r2, #26
 8006376:	d42b      	bmi.n	80063d0 <_printf_common+0xb0>
 8006378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800637c:	4641      	mov	r1, r8
 800637e:	4638      	mov	r0, r7
 8006380:	47c8      	blx	r9
 8006382:	3001      	adds	r0, #1
 8006384:	d01e      	beq.n	80063c4 <_printf_common+0xa4>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	6922      	ldr	r2, [r4, #16]
 800638a:	f003 0306 	and.w	r3, r3, #6
 800638e:	2b04      	cmp	r3, #4
 8006390:	bf02      	ittt	eq
 8006392:	68e5      	ldreq	r5, [r4, #12]
 8006394:	6833      	ldreq	r3, [r6, #0]
 8006396:	1aed      	subeq	r5, r5, r3
 8006398:	68a3      	ldr	r3, [r4, #8]
 800639a:	bf0c      	ite	eq
 800639c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a0:	2500      	movne	r5, #0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	bfc4      	itt	gt
 80063a6:	1a9b      	subgt	r3, r3, r2
 80063a8:	18ed      	addgt	r5, r5, r3
 80063aa:	2600      	movs	r6, #0
 80063ac:	341a      	adds	r4, #26
 80063ae:	42b5      	cmp	r5, r6
 80063b0:	d11a      	bne.n	80063e8 <_printf_common+0xc8>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e008      	b.n	80063c8 <_printf_common+0xa8>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4652      	mov	r2, sl
 80063ba:	4641      	mov	r1, r8
 80063bc:	4638      	mov	r0, r7
 80063be:	47c8      	blx	r9
 80063c0:	3001      	adds	r0, #1
 80063c2:	d103      	bne.n	80063cc <_printf_common+0xac>
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	3501      	adds	r5, #1
 80063ce:	e7c6      	b.n	800635e <_printf_common+0x3e>
 80063d0:	18e1      	adds	r1, r4, r3
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	2030      	movs	r0, #48	@ 0x30
 80063d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063da:	4422      	add	r2, r4
 80063dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063e4:	3302      	adds	r3, #2
 80063e6:	e7c7      	b.n	8006378 <_printf_common+0x58>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4622      	mov	r2, r4
 80063ec:	4641      	mov	r1, r8
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c8      	blx	r9
 80063f2:	3001      	adds	r0, #1
 80063f4:	d0e6      	beq.n	80063c4 <_printf_common+0xa4>
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7d9      	b.n	80063ae <_printf_common+0x8e>
	...

080063fc <_printf_i>:
 80063fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	7e0f      	ldrb	r7, [r1, #24]
 8006402:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006404:	2f78      	cmp	r7, #120	@ 0x78
 8006406:	4691      	mov	r9, r2
 8006408:	4680      	mov	r8, r0
 800640a:	460c      	mov	r4, r1
 800640c:	469a      	mov	sl, r3
 800640e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006412:	d807      	bhi.n	8006424 <_printf_i+0x28>
 8006414:	2f62      	cmp	r7, #98	@ 0x62
 8006416:	d80a      	bhi.n	800642e <_printf_i+0x32>
 8006418:	2f00      	cmp	r7, #0
 800641a:	f000 80d2 	beq.w	80065c2 <_printf_i+0x1c6>
 800641e:	2f58      	cmp	r7, #88	@ 0x58
 8006420:	f000 80b9 	beq.w	8006596 <_printf_i+0x19a>
 8006424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800642c:	e03a      	b.n	80064a4 <_printf_i+0xa8>
 800642e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006432:	2b15      	cmp	r3, #21
 8006434:	d8f6      	bhi.n	8006424 <_printf_i+0x28>
 8006436:	a101      	add	r1, pc, #4	@ (adr r1, 800643c <_printf_i+0x40>)
 8006438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800643c:	08006495 	.word	0x08006495
 8006440:	080064a9 	.word	0x080064a9
 8006444:	08006425 	.word	0x08006425
 8006448:	08006425 	.word	0x08006425
 800644c:	08006425 	.word	0x08006425
 8006450:	08006425 	.word	0x08006425
 8006454:	080064a9 	.word	0x080064a9
 8006458:	08006425 	.word	0x08006425
 800645c:	08006425 	.word	0x08006425
 8006460:	08006425 	.word	0x08006425
 8006464:	08006425 	.word	0x08006425
 8006468:	080065a9 	.word	0x080065a9
 800646c:	080064d3 	.word	0x080064d3
 8006470:	08006563 	.word	0x08006563
 8006474:	08006425 	.word	0x08006425
 8006478:	08006425 	.word	0x08006425
 800647c:	080065cb 	.word	0x080065cb
 8006480:	08006425 	.word	0x08006425
 8006484:	080064d3 	.word	0x080064d3
 8006488:	08006425 	.word	0x08006425
 800648c:	08006425 	.word	0x08006425
 8006490:	0800656b 	.word	0x0800656b
 8006494:	6833      	ldr	r3, [r6, #0]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6032      	str	r2, [r6, #0]
 800649c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064a4:	2301      	movs	r3, #1
 80064a6:	e09d      	b.n	80065e4 <_printf_i+0x1e8>
 80064a8:	6833      	ldr	r3, [r6, #0]
 80064aa:	6820      	ldr	r0, [r4, #0]
 80064ac:	1d19      	adds	r1, r3, #4
 80064ae:	6031      	str	r1, [r6, #0]
 80064b0:	0606      	lsls	r6, r0, #24
 80064b2:	d501      	bpl.n	80064b8 <_printf_i+0xbc>
 80064b4:	681d      	ldr	r5, [r3, #0]
 80064b6:	e003      	b.n	80064c0 <_printf_i+0xc4>
 80064b8:	0645      	lsls	r5, r0, #25
 80064ba:	d5fb      	bpl.n	80064b4 <_printf_i+0xb8>
 80064bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064c0:	2d00      	cmp	r5, #0
 80064c2:	da03      	bge.n	80064cc <_printf_i+0xd0>
 80064c4:	232d      	movs	r3, #45	@ 0x2d
 80064c6:	426d      	negs	r5, r5
 80064c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064cc:	4859      	ldr	r0, [pc, #356]	@ (8006634 <_printf_i+0x238>)
 80064ce:	230a      	movs	r3, #10
 80064d0:	e011      	b.n	80064f6 <_printf_i+0xfa>
 80064d2:	6821      	ldr	r1, [r4, #0]
 80064d4:	6833      	ldr	r3, [r6, #0]
 80064d6:	0608      	lsls	r0, r1, #24
 80064d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80064dc:	d402      	bmi.n	80064e4 <_printf_i+0xe8>
 80064de:	0649      	lsls	r1, r1, #25
 80064e0:	bf48      	it	mi
 80064e2:	b2ad      	uxthmi	r5, r5
 80064e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80064e6:	4853      	ldr	r0, [pc, #332]	@ (8006634 <_printf_i+0x238>)
 80064e8:	6033      	str	r3, [r6, #0]
 80064ea:	bf14      	ite	ne
 80064ec:	230a      	movne	r3, #10
 80064ee:	2308      	moveq	r3, #8
 80064f0:	2100      	movs	r1, #0
 80064f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064f6:	6866      	ldr	r6, [r4, #4]
 80064f8:	60a6      	str	r6, [r4, #8]
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	bfa2      	ittt	ge
 80064fe:	6821      	ldrge	r1, [r4, #0]
 8006500:	f021 0104 	bicge.w	r1, r1, #4
 8006504:	6021      	strge	r1, [r4, #0]
 8006506:	b90d      	cbnz	r5, 800650c <_printf_i+0x110>
 8006508:	2e00      	cmp	r6, #0
 800650a:	d04b      	beq.n	80065a4 <_printf_i+0x1a8>
 800650c:	4616      	mov	r6, r2
 800650e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006512:	fb03 5711 	mls	r7, r3, r1, r5
 8006516:	5dc7      	ldrb	r7, [r0, r7]
 8006518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800651c:	462f      	mov	r7, r5
 800651e:	42bb      	cmp	r3, r7
 8006520:	460d      	mov	r5, r1
 8006522:	d9f4      	bls.n	800650e <_printf_i+0x112>
 8006524:	2b08      	cmp	r3, #8
 8006526:	d10b      	bne.n	8006540 <_printf_i+0x144>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	07df      	lsls	r7, r3, #31
 800652c:	d508      	bpl.n	8006540 <_printf_i+0x144>
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	6861      	ldr	r1, [r4, #4]
 8006532:	4299      	cmp	r1, r3
 8006534:	bfde      	ittt	le
 8006536:	2330      	movle	r3, #48	@ 0x30
 8006538:	f806 3c01 	strble.w	r3, [r6, #-1]
 800653c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006540:	1b92      	subs	r2, r2, r6
 8006542:	6122      	str	r2, [r4, #16]
 8006544:	f8cd a000 	str.w	sl, [sp]
 8006548:	464b      	mov	r3, r9
 800654a:	aa03      	add	r2, sp, #12
 800654c:	4621      	mov	r1, r4
 800654e:	4640      	mov	r0, r8
 8006550:	f7ff fee6 	bl	8006320 <_printf_common>
 8006554:	3001      	adds	r0, #1
 8006556:	d14a      	bne.n	80065ee <_printf_i+0x1f2>
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	b004      	add	sp, #16
 800655e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	f043 0320 	orr.w	r3, r3, #32
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	4833      	ldr	r0, [pc, #204]	@ (8006638 <_printf_i+0x23c>)
 800656c:	2778      	movs	r7, #120	@ 0x78
 800656e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	6831      	ldr	r1, [r6, #0]
 8006576:	061f      	lsls	r7, r3, #24
 8006578:	f851 5b04 	ldr.w	r5, [r1], #4
 800657c:	d402      	bmi.n	8006584 <_printf_i+0x188>
 800657e:	065f      	lsls	r7, r3, #25
 8006580:	bf48      	it	mi
 8006582:	b2ad      	uxthmi	r5, r5
 8006584:	6031      	str	r1, [r6, #0]
 8006586:	07d9      	lsls	r1, r3, #31
 8006588:	bf44      	itt	mi
 800658a:	f043 0320 	orrmi.w	r3, r3, #32
 800658e:	6023      	strmi	r3, [r4, #0]
 8006590:	b11d      	cbz	r5, 800659a <_printf_i+0x19e>
 8006592:	2310      	movs	r3, #16
 8006594:	e7ac      	b.n	80064f0 <_printf_i+0xf4>
 8006596:	4827      	ldr	r0, [pc, #156]	@ (8006634 <_printf_i+0x238>)
 8006598:	e7e9      	b.n	800656e <_printf_i+0x172>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	f023 0320 	bic.w	r3, r3, #32
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	e7f6      	b.n	8006592 <_printf_i+0x196>
 80065a4:	4616      	mov	r6, r2
 80065a6:	e7bd      	b.n	8006524 <_printf_i+0x128>
 80065a8:	6833      	ldr	r3, [r6, #0]
 80065aa:	6825      	ldr	r5, [r4, #0]
 80065ac:	6961      	ldr	r1, [r4, #20]
 80065ae:	1d18      	adds	r0, r3, #4
 80065b0:	6030      	str	r0, [r6, #0]
 80065b2:	062e      	lsls	r6, r5, #24
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	d501      	bpl.n	80065bc <_printf_i+0x1c0>
 80065b8:	6019      	str	r1, [r3, #0]
 80065ba:	e002      	b.n	80065c2 <_printf_i+0x1c6>
 80065bc:	0668      	lsls	r0, r5, #25
 80065be:	d5fb      	bpl.n	80065b8 <_printf_i+0x1bc>
 80065c0:	8019      	strh	r1, [r3, #0]
 80065c2:	2300      	movs	r3, #0
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	4616      	mov	r6, r2
 80065c8:	e7bc      	b.n	8006544 <_printf_i+0x148>
 80065ca:	6833      	ldr	r3, [r6, #0]
 80065cc:	1d1a      	adds	r2, r3, #4
 80065ce:	6032      	str	r2, [r6, #0]
 80065d0:	681e      	ldr	r6, [r3, #0]
 80065d2:	6862      	ldr	r2, [r4, #4]
 80065d4:	2100      	movs	r1, #0
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7f9 fdfa 	bl	80001d0 <memchr>
 80065dc:	b108      	cbz	r0, 80065e2 <_printf_i+0x1e6>
 80065de:	1b80      	subs	r0, r0, r6
 80065e0:	6060      	str	r0, [r4, #4]
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	2300      	movs	r3, #0
 80065e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ec:	e7aa      	b.n	8006544 <_printf_i+0x148>
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	4632      	mov	r2, r6
 80065f2:	4649      	mov	r1, r9
 80065f4:	4640      	mov	r0, r8
 80065f6:	47d0      	blx	sl
 80065f8:	3001      	adds	r0, #1
 80065fa:	d0ad      	beq.n	8006558 <_printf_i+0x15c>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	079b      	lsls	r3, r3, #30
 8006600:	d413      	bmi.n	800662a <_printf_i+0x22e>
 8006602:	68e0      	ldr	r0, [r4, #12]
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	4298      	cmp	r0, r3
 8006608:	bfb8      	it	lt
 800660a:	4618      	movlt	r0, r3
 800660c:	e7a6      	b.n	800655c <_printf_i+0x160>
 800660e:	2301      	movs	r3, #1
 8006610:	4632      	mov	r2, r6
 8006612:	4649      	mov	r1, r9
 8006614:	4640      	mov	r0, r8
 8006616:	47d0      	blx	sl
 8006618:	3001      	adds	r0, #1
 800661a:	d09d      	beq.n	8006558 <_printf_i+0x15c>
 800661c:	3501      	adds	r5, #1
 800661e:	68e3      	ldr	r3, [r4, #12]
 8006620:	9903      	ldr	r1, [sp, #12]
 8006622:	1a5b      	subs	r3, r3, r1
 8006624:	42ab      	cmp	r3, r5
 8006626:	dcf2      	bgt.n	800660e <_printf_i+0x212>
 8006628:	e7eb      	b.n	8006602 <_printf_i+0x206>
 800662a:	2500      	movs	r5, #0
 800662c:	f104 0619 	add.w	r6, r4, #25
 8006630:	e7f5      	b.n	800661e <_printf_i+0x222>
 8006632:	bf00      	nop
 8006634:	080086ea 	.word	0x080086ea
 8006638:	080086fb 	.word	0x080086fb

0800663c <std>:
 800663c:	2300      	movs	r3, #0
 800663e:	b510      	push	{r4, lr}
 8006640:	4604      	mov	r4, r0
 8006642:	e9c0 3300 	strd	r3, r3, [r0]
 8006646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800664a:	6083      	str	r3, [r0, #8]
 800664c:	8181      	strh	r1, [r0, #12]
 800664e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006650:	81c2      	strh	r2, [r0, #14]
 8006652:	6183      	str	r3, [r0, #24]
 8006654:	4619      	mov	r1, r3
 8006656:	2208      	movs	r2, #8
 8006658:	305c      	adds	r0, #92	@ 0x5c
 800665a:	f000 f8f4 	bl	8006846 <memset>
 800665e:	4b0d      	ldr	r3, [pc, #52]	@ (8006694 <std+0x58>)
 8006660:	6263      	str	r3, [r4, #36]	@ 0x24
 8006662:	4b0d      	ldr	r3, [pc, #52]	@ (8006698 <std+0x5c>)
 8006664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <std+0x60>)
 8006668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800666a:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <std+0x64>)
 800666c:	6323      	str	r3, [r4, #48]	@ 0x30
 800666e:	4b0d      	ldr	r3, [pc, #52]	@ (80066a4 <std+0x68>)
 8006670:	6224      	str	r4, [r4, #32]
 8006672:	429c      	cmp	r4, r3
 8006674:	d006      	beq.n	8006684 <std+0x48>
 8006676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800667a:	4294      	cmp	r4, r2
 800667c:	d002      	beq.n	8006684 <std+0x48>
 800667e:	33d0      	adds	r3, #208	@ 0xd0
 8006680:	429c      	cmp	r4, r3
 8006682:	d105      	bne.n	8006690 <std+0x54>
 8006684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f000 b958 	b.w	8006940 <__retarget_lock_init_recursive>
 8006690:	bd10      	pop	{r4, pc}
 8006692:	bf00      	nop
 8006694:	080067c1 	.word	0x080067c1
 8006698:	080067e3 	.word	0x080067e3
 800669c:	0800681b 	.word	0x0800681b
 80066a0:	0800683f 	.word	0x0800683f
 80066a4:	200003bc 	.word	0x200003bc

080066a8 <stdio_exit_handler>:
 80066a8:	4a02      	ldr	r2, [pc, #8]	@ (80066b4 <stdio_exit_handler+0xc>)
 80066aa:	4903      	ldr	r1, [pc, #12]	@ (80066b8 <stdio_exit_handler+0x10>)
 80066ac:	4803      	ldr	r0, [pc, #12]	@ (80066bc <stdio_exit_handler+0x14>)
 80066ae:	f000 b869 	b.w	8006784 <_fwalk_sglue>
 80066b2:	bf00      	nop
 80066b4:	20000014 	.word	0x20000014
 80066b8:	08007fed 	.word	0x08007fed
 80066bc:	20000024 	.word	0x20000024

080066c0 <cleanup_stdio>:
 80066c0:	6841      	ldr	r1, [r0, #4]
 80066c2:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <cleanup_stdio+0x34>)
 80066c4:	4299      	cmp	r1, r3
 80066c6:	b510      	push	{r4, lr}
 80066c8:	4604      	mov	r4, r0
 80066ca:	d001      	beq.n	80066d0 <cleanup_stdio+0x10>
 80066cc:	f001 fc8e 	bl	8007fec <_fflush_r>
 80066d0:	68a1      	ldr	r1, [r4, #8]
 80066d2:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <cleanup_stdio+0x38>)
 80066d4:	4299      	cmp	r1, r3
 80066d6:	d002      	beq.n	80066de <cleanup_stdio+0x1e>
 80066d8:	4620      	mov	r0, r4
 80066da:	f001 fc87 	bl	8007fec <_fflush_r>
 80066de:	68e1      	ldr	r1, [r4, #12]
 80066e0:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <cleanup_stdio+0x3c>)
 80066e2:	4299      	cmp	r1, r3
 80066e4:	d004      	beq.n	80066f0 <cleanup_stdio+0x30>
 80066e6:	4620      	mov	r0, r4
 80066e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ec:	f001 bc7e 	b.w	8007fec <_fflush_r>
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	bf00      	nop
 80066f4:	200003bc 	.word	0x200003bc
 80066f8:	20000424 	.word	0x20000424
 80066fc:	2000048c 	.word	0x2000048c

08006700 <global_stdio_init.part.0>:
 8006700:	b510      	push	{r4, lr}
 8006702:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <global_stdio_init.part.0+0x30>)
 8006704:	4c0b      	ldr	r4, [pc, #44]	@ (8006734 <global_stdio_init.part.0+0x34>)
 8006706:	4a0c      	ldr	r2, [pc, #48]	@ (8006738 <global_stdio_init.part.0+0x38>)
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	4620      	mov	r0, r4
 800670c:	2200      	movs	r2, #0
 800670e:	2104      	movs	r1, #4
 8006710:	f7ff ff94 	bl	800663c <std>
 8006714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006718:	2201      	movs	r2, #1
 800671a:	2109      	movs	r1, #9
 800671c:	f7ff ff8e 	bl	800663c <std>
 8006720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006724:	2202      	movs	r2, #2
 8006726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800672a:	2112      	movs	r1, #18
 800672c:	f7ff bf86 	b.w	800663c <std>
 8006730:	200004f4 	.word	0x200004f4
 8006734:	200003bc 	.word	0x200003bc
 8006738:	080066a9 	.word	0x080066a9

0800673c <__sfp_lock_acquire>:
 800673c:	4801      	ldr	r0, [pc, #4]	@ (8006744 <__sfp_lock_acquire+0x8>)
 800673e:	f000 b900 	b.w	8006942 <__retarget_lock_acquire_recursive>
 8006742:	bf00      	nop
 8006744:	200004fd 	.word	0x200004fd

08006748 <__sfp_lock_release>:
 8006748:	4801      	ldr	r0, [pc, #4]	@ (8006750 <__sfp_lock_release+0x8>)
 800674a:	f000 b8fb 	b.w	8006944 <__retarget_lock_release_recursive>
 800674e:	bf00      	nop
 8006750:	200004fd 	.word	0x200004fd

08006754 <__sinit>:
 8006754:	b510      	push	{r4, lr}
 8006756:	4604      	mov	r4, r0
 8006758:	f7ff fff0 	bl	800673c <__sfp_lock_acquire>
 800675c:	6a23      	ldr	r3, [r4, #32]
 800675e:	b11b      	cbz	r3, 8006768 <__sinit+0x14>
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f7ff bff0 	b.w	8006748 <__sfp_lock_release>
 8006768:	4b04      	ldr	r3, [pc, #16]	@ (800677c <__sinit+0x28>)
 800676a:	6223      	str	r3, [r4, #32]
 800676c:	4b04      	ldr	r3, [pc, #16]	@ (8006780 <__sinit+0x2c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1f5      	bne.n	8006760 <__sinit+0xc>
 8006774:	f7ff ffc4 	bl	8006700 <global_stdio_init.part.0>
 8006778:	e7f2      	b.n	8006760 <__sinit+0xc>
 800677a:	bf00      	nop
 800677c:	080066c1 	.word	0x080066c1
 8006780:	200004f4 	.word	0x200004f4

08006784 <_fwalk_sglue>:
 8006784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006788:	4607      	mov	r7, r0
 800678a:	4688      	mov	r8, r1
 800678c:	4614      	mov	r4, r2
 800678e:	2600      	movs	r6, #0
 8006790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006794:	f1b9 0901 	subs.w	r9, r9, #1
 8006798:	d505      	bpl.n	80067a6 <_fwalk_sglue+0x22>
 800679a:	6824      	ldr	r4, [r4, #0]
 800679c:	2c00      	cmp	r4, #0
 800679e:	d1f7      	bne.n	8006790 <_fwalk_sglue+0xc>
 80067a0:	4630      	mov	r0, r6
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d907      	bls.n	80067bc <_fwalk_sglue+0x38>
 80067ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067b0:	3301      	adds	r3, #1
 80067b2:	d003      	beq.n	80067bc <_fwalk_sglue+0x38>
 80067b4:	4629      	mov	r1, r5
 80067b6:	4638      	mov	r0, r7
 80067b8:	47c0      	blx	r8
 80067ba:	4306      	orrs	r6, r0
 80067bc:	3568      	adds	r5, #104	@ 0x68
 80067be:	e7e9      	b.n	8006794 <_fwalk_sglue+0x10>

080067c0 <__sread>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	460c      	mov	r4, r1
 80067c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c8:	f000 f86c 	bl	80068a4 <_read_r>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	bfab      	itete	ge
 80067d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067d2:	89a3      	ldrhlt	r3, [r4, #12]
 80067d4:	181b      	addge	r3, r3, r0
 80067d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067da:	bfac      	ite	ge
 80067dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067de:	81a3      	strhlt	r3, [r4, #12]
 80067e0:	bd10      	pop	{r4, pc}

080067e2 <__swrite>:
 80067e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e6:	461f      	mov	r7, r3
 80067e8:	898b      	ldrh	r3, [r1, #12]
 80067ea:	05db      	lsls	r3, r3, #23
 80067ec:	4605      	mov	r5, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	4616      	mov	r6, r2
 80067f2:	d505      	bpl.n	8006800 <__swrite+0x1e>
 80067f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f8:	2302      	movs	r3, #2
 80067fa:	2200      	movs	r2, #0
 80067fc:	f000 f840 	bl	8006880 <_lseek_r>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	4632      	mov	r2, r6
 800680e:	463b      	mov	r3, r7
 8006810:	4628      	mov	r0, r5
 8006812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006816:	f000 b857 	b.w	80068c8 <_write_r>

0800681a <__sseek>:
 800681a:	b510      	push	{r4, lr}
 800681c:	460c      	mov	r4, r1
 800681e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006822:	f000 f82d 	bl	8006880 <_lseek_r>
 8006826:	1c43      	adds	r3, r0, #1
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	bf15      	itete	ne
 800682c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800682e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006832:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006836:	81a3      	strheq	r3, [r4, #12]
 8006838:	bf18      	it	ne
 800683a:	81a3      	strhne	r3, [r4, #12]
 800683c:	bd10      	pop	{r4, pc}

0800683e <__sclose>:
 800683e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006842:	f000 b80d 	b.w	8006860 <_close_r>

08006846 <memset>:
 8006846:	4402      	add	r2, r0
 8006848:	4603      	mov	r3, r0
 800684a:	4293      	cmp	r3, r2
 800684c:	d100      	bne.n	8006850 <memset+0xa>
 800684e:	4770      	bx	lr
 8006850:	f803 1b01 	strb.w	r1, [r3], #1
 8006854:	e7f9      	b.n	800684a <memset+0x4>
	...

08006858 <_localeconv_r>:
 8006858:	4800      	ldr	r0, [pc, #0]	@ (800685c <_localeconv_r+0x4>)
 800685a:	4770      	bx	lr
 800685c:	20000160 	.word	0x20000160

08006860 <_close_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d06      	ldr	r5, [pc, #24]	@ (800687c <_close_r+0x1c>)
 8006864:	2300      	movs	r3, #0
 8006866:	4604      	mov	r4, r0
 8006868:	4608      	mov	r0, r1
 800686a:	602b      	str	r3, [r5, #0]
 800686c:	f7fa fee6 	bl	800163c <_close>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d102      	bne.n	800687a <_close_r+0x1a>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	b103      	cbz	r3, 800687a <_close_r+0x1a>
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	bd38      	pop	{r3, r4, r5, pc}
 800687c:	200004f8 	.word	0x200004f8

08006880 <_lseek_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4d07      	ldr	r5, [pc, #28]	@ (80068a0 <_lseek_r+0x20>)
 8006884:	4604      	mov	r4, r0
 8006886:	4608      	mov	r0, r1
 8006888:	4611      	mov	r1, r2
 800688a:	2200      	movs	r2, #0
 800688c:	602a      	str	r2, [r5, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	f7fa fefb 	bl	800168a <_lseek>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_lseek_r+0x1e>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_lseek_r+0x1e>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	200004f8 	.word	0x200004f8

080068a4 <_read_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d07      	ldr	r5, [pc, #28]	@ (80068c4 <_read_r+0x20>)
 80068a8:	4604      	mov	r4, r0
 80068aa:	4608      	mov	r0, r1
 80068ac:	4611      	mov	r1, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	602a      	str	r2, [r5, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f7fa fe89 	bl	80015ca <_read>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_read_r+0x1e>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_read_r+0x1e>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	200004f8 	.word	0x200004f8

080068c8 <_write_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4d07      	ldr	r5, [pc, #28]	@ (80068e8 <_write_r+0x20>)
 80068cc:	4604      	mov	r4, r0
 80068ce:	4608      	mov	r0, r1
 80068d0:	4611      	mov	r1, r2
 80068d2:	2200      	movs	r2, #0
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f7fa fe94 	bl	8001604 <_write>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_write_r+0x1e>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_write_r+0x1e>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	200004f8 	.word	0x200004f8

080068ec <__errno>:
 80068ec:	4b01      	ldr	r3, [pc, #4]	@ (80068f4 <__errno+0x8>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	20000020 	.word	0x20000020

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006930 <__libc_init_array+0x38>)
 80068fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006934 <__libc_init_array+0x3c>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	2600      	movs	r6, #0
 8006904:	42a6      	cmp	r6, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	4d0b      	ldr	r5, [pc, #44]	@ (8006938 <__libc_init_array+0x40>)
 800690a:	4c0c      	ldr	r4, [pc, #48]	@ (800693c <__libc_init_array+0x44>)
 800690c:	f001 febc 	bl	8008688 <_init>
 8006910:	1b64      	subs	r4, r4, r5
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	2600      	movs	r6, #0
 8006916:	42a6      	cmp	r6, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006920:	4798      	blx	r3
 8006922:	3601      	adds	r6, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f855 3b04 	ldr.w	r3, [r5], #4
 800692a:	4798      	blx	r3
 800692c:	3601      	adds	r6, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	08008a50 	.word	0x08008a50
 8006934:	08008a50 	.word	0x08008a50
 8006938:	08008a50 	.word	0x08008a50
 800693c:	08008a54 	.word	0x08008a54

08006940 <__retarget_lock_init_recursive>:
 8006940:	4770      	bx	lr

08006942 <__retarget_lock_acquire_recursive>:
 8006942:	4770      	bx	lr

08006944 <__retarget_lock_release_recursive>:
 8006944:	4770      	bx	lr

08006946 <quorem>:
 8006946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694a:	6903      	ldr	r3, [r0, #16]
 800694c:	690c      	ldr	r4, [r1, #16]
 800694e:	42a3      	cmp	r3, r4
 8006950:	4607      	mov	r7, r0
 8006952:	db7e      	blt.n	8006a52 <quorem+0x10c>
 8006954:	3c01      	subs	r4, #1
 8006956:	f101 0814 	add.w	r8, r1, #20
 800695a:	00a3      	lsls	r3, r4, #2
 800695c:	f100 0514 	add.w	r5, r0, #20
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800696c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006970:	3301      	adds	r3, #1
 8006972:	429a      	cmp	r2, r3
 8006974:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006978:	fbb2 f6f3 	udiv	r6, r2, r3
 800697c:	d32e      	bcc.n	80069dc <quorem+0x96>
 800697e:	f04f 0a00 	mov.w	sl, #0
 8006982:	46c4      	mov	ip, r8
 8006984:	46ae      	mov	lr, r5
 8006986:	46d3      	mov	fp, sl
 8006988:	f85c 3b04 	ldr.w	r3, [ip], #4
 800698c:	b298      	uxth	r0, r3
 800698e:	fb06 a000 	mla	r0, r6, r0, sl
 8006992:	0c02      	lsrs	r2, r0, #16
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	fb06 2303 	mla	r3, r6, r3, r2
 800699a:	f8de 2000 	ldr.w	r2, [lr]
 800699e:	b280      	uxth	r0, r0
 80069a0:	b292      	uxth	r2, r2
 80069a2:	1a12      	subs	r2, r2, r0
 80069a4:	445a      	add	r2, fp
 80069a6:	f8de 0000 	ldr.w	r0, [lr]
 80069aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069b8:	b292      	uxth	r2, r2
 80069ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069be:	45e1      	cmp	r9, ip
 80069c0:	f84e 2b04 	str.w	r2, [lr], #4
 80069c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069c8:	d2de      	bcs.n	8006988 <quorem+0x42>
 80069ca:	9b00      	ldr	r3, [sp, #0]
 80069cc:	58eb      	ldr	r3, [r5, r3]
 80069ce:	b92b      	cbnz	r3, 80069dc <quorem+0x96>
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	3b04      	subs	r3, #4
 80069d4:	429d      	cmp	r5, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	d32f      	bcc.n	8006a3a <quorem+0xf4>
 80069da:	613c      	str	r4, [r7, #16]
 80069dc:	4638      	mov	r0, r7
 80069de:	f001 f979 	bl	8007cd4 <__mcmp>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	db25      	blt.n	8006a32 <quorem+0xec>
 80069e6:	4629      	mov	r1, r5
 80069e8:	2000      	movs	r0, #0
 80069ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80069ee:	f8d1 c000 	ldr.w	ip, [r1]
 80069f2:	fa1f fe82 	uxth.w	lr, r2
 80069f6:	fa1f f38c 	uxth.w	r3, ip
 80069fa:	eba3 030e 	sub.w	r3, r3, lr
 80069fe:	4403      	add	r3, r0
 8006a00:	0c12      	lsrs	r2, r2, #16
 8006a02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a10:	45c1      	cmp	r9, r8
 8006a12:	f841 3b04 	str.w	r3, [r1], #4
 8006a16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a1a:	d2e6      	bcs.n	80069ea <quorem+0xa4>
 8006a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a24:	b922      	cbnz	r2, 8006a30 <quorem+0xea>
 8006a26:	3b04      	subs	r3, #4
 8006a28:	429d      	cmp	r5, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	d30b      	bcc.n	8006a46 <quorem+0x100>
 8006a2e:	613c      	str	r4, [r7, #16]
 8006a30:	3601      	adds	r6, #1
 8006a32:	4630      	mov	r0, r6
 8006a34:	b003      	add	sp, #12
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	3b04      	subs	r3, #4
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	d1cb      	bne.n	80069da <quorem+0x94>
 8006a42:	3c01      	subs	r4, #1
 8006a44:	e7c6      	b.n	80069d4 <quorem+0x8e>
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	d1ef      	bne.n	8006a2e <quorem+0xe8>
 8006a4e:	3c01      	subs	r4, #1
 8006a50:	e7ea      	b.n	8006a28 <quorem+0xe2>
 8006a52:	2000      	movs	r0, #0
 8006a54:	e7ee      	b.n	8006a34 <quorem+0xee>
	...

08006a58 <_dtoa_r>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	69c7      	ldr	r7, [r0, #28]
 8006a5e:	b099      	sub	sp, #100	@ 0x64
 8006a60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a64:	ec55 4b10 	vmov	r4, r5, d0
 8006a68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a6c:	4683      	mov	fp, r0
 8006a6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a72:	b97f      	cbnz	r7, 8006a94 <_dtoa_r+0x3c>
 8006a74:	2010      	movs	r0, #16
 8006a76:	f000 fdfd 	bl	8007674 <malloc>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a80:	b920      	cbnz	r0, 8006a8c <_dtoa_r+0x34>
 8006a82:	4ba7      	ldr	r3, [pc, #668]	@ (8006d20 <_dtoa_r+0x2c8>)
 8006a84:	21ef      	movs	r1, #239	@ 0xef
 8006a86:	48a7      	ldr	r0, [pc, #668]	@ (8006d24 <_dtoa_r+0x2cc>)
 8006a88:	f001 faf6 	bl	8008078 <__assert_func>
 8006a8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a90:	6007      	str	r7, [r0, #0]
 8006a92:	60c7      	str	r7, [r0, #12]
 8006a94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a98:	6819      	ldr	r1, [r3, #0]
 8006a9a:	b159      	cbz	r1, 8006ab4 <_dtoa_r+0x5c>
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	604a      	str	r2, [r1, #4]
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4093      	lsls	r3, r2
 8006aa4:	608b      	str	r3, [r1, #8]
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	f000 feda 	bl	8007860 <_Bfree>
 8006aac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	1e2b      	subs	r3, r5, #0
 8006ab6:	bfb9      	ittee	lt
 8006ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006abc:	9303      	strlt	r3, [sp, #12]
 8006abe:	2300      	movge	r3, #0
 8006ac0:	6033      	strge	r3, [r6, #0]
 8006ac2:	9f03      	ldr	r7, [sp, #12]
 8006ac4:	4b98      	ldr	r3, [pc, #608]	@ (8006d28 <_dtoa_r+0x2d0>)
 8006ac6:	bfbc      	itt	lt
 8006ac8:	2201      	movlt	r2, #1
 8006aca:	6032      	strlt	r2, [r6, #0]
 8006acc:	43bb      	bics	r3, r7
 8006ace:	d112      	bne.n	8006af6 <_dtoa_r+0x9e>
 8006ad0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ad2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006adc:	4323      	orrs	r3, r4
 8006ade:	f000 854d 	beq.w	800757c <_dtoa_r+0xb24>
 8006ae2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ae4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d3c <_dtoa_r+0x2e4>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 854f 	beq.w	800758c <_dtoa_r+0xb34>
 8006aee:	f10a 0303 	add.w	r3, sl, #3
 8006af2:	f000 bd49 	b.w	8007588 <_dtoa_r+0xb30>
 8006af6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	ec51 0b17 	vmov	r0, r1, d7
 8006b00:	2300      	movs	r3, #0
 8006b02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006b06:	f7f9 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	b158      	cbz	r0, 8006b26 <_dtoa_r+0xce>
 8006b0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b10:	2301      	movs	r3, #1
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b16:	b113      	cbz	r3, 8006b1e <_dtoa_r+0xc6>
 8006b18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b1a:	4b84      	ldr	r3, [pc, #528]	@ (8006d2c <_dtoa_r+0x2d4>)
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d40 <_dtoa_r+0x2e8>
 8006b22:	f000 bd33 	b.w	800758c <_dtoa_r+0xb34>
 8006b26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006b2a:	aa16      	add	r2, sp, #88	@ 0x58
 8006b2c:	a917      	add	r1, sp, #92	@ 0x5c
 8006b2e:	4658      	mov	r0, fp
 8006b30:	f001 f980 	bl	8007e34 <__d2b>
 8006b34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b38:	4681      	mov	r9, r0
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	d077      	beq.n	8006c2e <_dtoa_r+0x1d6>
 8006b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b58:	4619      	mov	r1, r3
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	4b74      	ldr	r3, [pc, #464]	@ (8006d30 <_dtoa_r+0x2d8>)
 8006b5e:	f7f9 fb93 	bl	8000288 <__aeabi_dsub>
 8006b62:	a369      	add	r3, pc, #420	@ (adr r3, 8006d08 <_dtoa_r+0x2b0>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f7f9 fd46 	bl	80005f8 <__aeabi_dmul>
 8006b6c:	a368      	add	r3, pc, #416	@ (adr r3, 8006d10 <_dtoa_r+0x2b8>)
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f7f9 fb8b 	bl	800028c <__adddf3>
 8006b76:	4604      	mov	r4, r0
 8006b78:	4630      	mov	r0, r6
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	f7f9 fcd2 	bl	8000524 <__aeabi_i2d>
 8006b80:	a365      	add	r3, pc, #404	@ (adr r3, 8006d18 <_dtoa_r+0x2c0>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f7f9 fd37 	bl	80005f8 <__aeabi_dmul>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7f9 fb7b 	bl	800028c <__adddf3>
 8006b96:	4604      	mov	r4, r0
 8006b98:	460d      	mov	r5, r1
 8006b9a:	f7f9 ffdd 	bl	8000b58 <__aeabi_d2iz>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7f9 ff98 	bl	8000adc <__aeabi_dcmplt>
 8006bac:	b140      	cbz	r0, 8006bc0 <_dtoa_r+0x168>
 8006bae:	4638      	mov	r0, r7
 8006bb0:	f7f9 fcb8 	bl	8000524 <__aeabi_i2d>
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	f7f9 ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bbc:	b900      	cbnz	r0, 8006bc0 <_dtoa_r+0x168>
 8006bbe:	3f01      	subs	r7, #1
 8006bc0:	2f16      	cmp	r7, #22
 8006bc2:	d851      	bhi.n	8006c68 <_dtoa_r+0x210>
 8006bc4:	4b5b      	ldr	r3, [pc, #364]	@ (8006d34 <_dtoa_r+0x2dc>)
 8006bc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bd2:	f7f9 ff83 	bl	8000adc <__aeabi_dcmplt>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d048      	beq.n	8006c6c <_dtoa_r+0x214>
 8006bda:	3f01      	subs	r7, #1
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9312      	str	r3, [sp, #72]	@ 0x48
 8006be0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006be2:	1b9b      	subs	r3, r3, r6
 8006be4:	1e5a      	subs	r2, r3, #1
 8006be6:	bf44      	itt	mi
 8006be8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006bec:	2300      	movmi	r3, #0
 8006bee:	9208      	str	r2, [sp, #32]
 8006bf0:	bf54      	ite	pl
 8006bf2:	f04f 0800 	movpl.w	r8, #0
 8006bf6:	9308      	strmi	r3, [sp, #32]
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	db39      	blt.n	8006c70 <_dtoa_r+0x218>
 8006bfc:	9b08      	ldr	r3, [sp, #32]
 8006bfe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c00:	443b      	add	r3, r7
 8006c02:	9308      	str	r3, [sp, #32]
 8006c04:	2300      	movs	r3, #0
 8006c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0a:	2b09      	cmp	r3, #9
 8006c0c:	d864      	bhi.n	8006cd8 <_dtoa_r+0x280>
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	bfc4      	itt	gt
 8006c12:	3b04      	subgt	r3, #4
 8006c14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c18:	f1a3 0302 	sub.w	r3, r3, #2
 8006c1c:	bfcc      	ite	gt
 8006c1e:	2400      	movgt	r4, #0
 8006c20:	2401      	movle	r4, #1
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d863      	bhi.n	8006cee <_dtoa_r+0x296>
 8006c26:	e8df f003 	tbb	[pc, r3]
 8006c2a:	372a      	.short	0x372a
 8006c2c:	5535      	.short	0x5535
 8006c2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006c32:	441e      	add	r6, r3
 8006c34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	bfc1      	itttt	gt
 8006c3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c40:	409f      	lslgt	r7, r3
 8006c42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c4a:	bfd6      	itet	le
 8006c4c:	f1c3 0320 	rsble	r3, r3, #32
 8006c50:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c54:	fa04 f003 	lslle.w	r0, r4, r3
 8006c58:	f7f9 fc54 	bl	8000504 <__aeabi_ui2d>
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c62:	3e01      	subs	r6, #1
 8006c64:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c66:	e777      	b.n	8006b58 <_dtoa_r+0x100>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e7b8      	b.n	8006bde <_dtoa_r+0x186>
 8006c6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c6e:	e7b7      	b.n	8006be0 <_dtoa_r+0x188>
 8006c70:	427b      	negs	r3, r7
 8006c72:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c74:	2300      	movs	r3, #0
 8006c76:	eba8 0807 	sub.w	r8, r8, r7
 8006c7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c7c:	e7c4      	b.n	8006c08 <_dtoa_r+0x1b0>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	dc35      	bgt.n	8006cf4 <_dtoa_r+0x29c>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	9307      	str	r3, [sp, #28]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c92:	e00b      	b.n	8006cac <_dtoa_r+0x254>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e7f3      	b.n	8006c80 <_dtoa_r+0x228>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	bfb8      	it	lt
 8006caa:	2301      	movlt	r3, #1
 8006cac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	f102 0514 	add.w	r5, r2, #20
 8006cb8:	429d      	cmp	r5, r3
 8006cba:	d91f      	bls.n	8006cfc <_dtoa_r+0x2a4>
 8006cbc:	6041      	str	r1, [r0, #4]
 8006cbe:	4658      	mov	r0, fp
 8006cc0:	f000 fd8e 	bl	80077e0 <_Balloc>
 8006cc4:	4682      	mov	sl, r0
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d13c      	bne.n	8006d44 <_dtoa_r+0x2ec>
 8006cca:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <_dtoa_r+0x2e0>)
 8006ccc:	4602      	mov	r2, r0
 8006cce:	f240 11af 	movw	r1, #431	@ 0x1af
 8006cd2:	e6d8      	b.n	8006a86 <_dtoa_r+0x2e>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e7e0      	b.n	8006c9a <_dtoa_r+0x242>
 8006cd8:	2401      	movs	r4, #1
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cde:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	9307      	str	r3, [sp, #28]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2312      	movs	r3, #18
 8006cec:	e7d0      	b.n	8006c90 <_dtoa_r+0x238>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cf2:	e7f5      	b.n	8006ce0 <_dtoa_r+0x288>
 8006cf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	9307      	str	r3, [sp, #28]
 8006cfa:	e7d7      	b.n	8006cac <_dtoa_r+0x254>
 8006cfc:	3101      	adds	r1, #1
 8006cfe:	0052      	lsls	r2, r2, #1
 8006d00:	e7d8      	b.n	8006cb4 <_dtoa_r+0x25c>
 8006d02:	bf00      	nop
 8006d04:	f3af 8000 	nop.w
 8006d08:	636f4361 	.word	0x636f4361
 8006d0c:	3fd287a7 	.word	0x3fd287a7
 8006d10:	8b60c8b3 	.word	0x8b60c8b3
 8006d14:	3fc68a28 	.word	0x3fc68a28
 8006d18:	509f79fb 	.word	0x509f79fb
 8006d1c:	3fd34413 	.word	0x3fd34413
 8006d20:	08008719 	.word	0x08008719
 8006d24:	08008730 	.word	0x08008730
 8006d28:	7ff00000 	.word	0x7ff00000
 8006d2c:	080086e9 	.word	0x080086e9
 8006d30:	3ff80000 	.word	0x3ff80000
 8006d34:	08008828 	.word	0x08008828
 8006d38:	08008788 	.word	0x08008788
 8006d3c:	08008715 	.word	0x08008715
 8006d40:	080086e8 	.word	0x080086e8
 8006d44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d48:	6018      	str	r0, [r3, #0]
 8006d4a:	9b07      	ldr	r3, [sp, #28]
 8006d4c:	2b0e      	cmp	r3, #14
 8006d4e:	f200 80a4 	bhi.w	8006e9a <_dtoa_r+0x442>
 8006d52:	2c00      	cmp	r4, #0
 8006d54:	f000 80a1 	beq.w	8006e9a <_dtoa_r+0x442>
 8006d58:	2f00      	cmp	r7, #0
 8006d5a:	dd33      	ble.n	8006dc4 <_dtoa_r+0x36c>
 8006d5c:	4bad      	ldr	r3, [pc, #692]	@ (8007014 <_dtoa_r+0x5bc>)
 8006d5e:	f007 020f 	and.w	r2, r7, #15
 8006d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d66:	ed93 7b00 	vldr	d7, [r3]
 8006d6a:	05f8      	lsls	r0, r7, #23
 8006d6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d74:	d516      	bpl.n	8006da4 <_dtoa_r+0x34c>
 8006d76:	4ba8      	ldr	r3, [pc, #672]	@ (8007018 <_dtoa_r+0x5c0>)
 8006d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d80:	f7f9 fd64 	bl	800084c <__aeabi_ddiv>
 8006d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d88:	f004 040f 	and.w	r4, r4, #15
 8006d8c:	2603      	movs	r6, #3
 8006d8e:	4da2      	ldr	r5, [pc, #648]	@ (8007018 <_dtoa_r+0x5c0>)
 8006d90:	b954      	cbnz	r4, 8006da8 <_dtoa_r+0x350>
 8006d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d9a:	f7f9 fd57 	bl	800084c <__aeabi_ddiv>
 8006d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da2:	e028      	b.n	8006df6 <_dtoa_r+0x39e>
 8006da4:	2602      	movs	r6, #2
 8006da6:	e7f2      	b.n	8006d8e <_dtoa_r+0x336>
 8006da8:	07e1      	lsls	r1, r4, #31
 8006daa:	d508      	bpl.n	8006dbe <_dtoa_r+0x366>
 8006dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006db4:	f7f9 fc20 	bl	80005f8 <__aeabi_dmul>
 8006db8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dbc:	3601      	adds	r6, #1
 8006dbe:	1064      	asrs	r4, r4, #1
 8006dc0:	3508      	adds	r5, #8
 8006dc2:	e7e5      	b.n	8006d90 <_dtoa_r+0x338>
 8006dc4:	f000 80d2 	beq.w	8006f6c <_dtoa_r+0x514>
 8006dc8:	427c      	negs	r4, r7
 8006dca:	4b92      	ldr	r3, [pc, #584]	@ (8007014 <_dtoa_r+0x5bc>)
 8006dcc:	4d92      	ldr	r5, [pc, #584]	@ (8007018 <_dtoa_r+0x5c0>)
 8006dce:	f004 020f 	and.w	r2, r4, #15
 8006dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dde:	f7f9 fc0b 	bl	80005f8 <__aeabi_dmul>
 8006de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de6:	1124      	asrs	r4, r4, #4
 8006de8:	2300      	movs	r3, #0
 8006dea:	2602      	movs	r6, #2
 8006dec:	2c00      	cmp	r4, #0
 8006dee:	f040 80b2 	bne.w	8006f56 <_dtoa_r+0x4fe>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1d3      	bne.n	8006d9e <_dtoa_r+0x346>
 8006df6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006df8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80b7 	beq.w	8006f70 <_dtoa_r+0x518>
 8006e02:	4b86      	ldr	r3, [pc, #536]	@ (800701c <_dtoa_r+0x5c4>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fe67 	bl	8000adc <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f000 80ae 	beq.w	8006f70 <_dtoa_r+0x518>
 8006e14:	9b07      	ldr	r3, [sp, #28]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80aa 	beq.w	8006f70 <_dtoa_r+0x518>
 8006e1c:	9b00      	ldr	r3, [sp, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	dd37      	ble.n	8006e92 <_dtoa_r+0x43a>
 8006e22:	1e7b      	subs	r3, r7, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	4620      	mov	r0, r4
 8006e28:	4b7d      	ldr	r3, [pc, #500]	@ (8007020 <_dtoa_r+0x5c8>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 fbe3 	bl	80005f8 <__aeabi_dmul>
 8006e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e36:	9c00      	ldr	r4, [sp, #0]
 8006e38:	3601      	adds	r6, #1
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f7f9 fb72 	bl	8000524 <__aeabi_i2d>
 8006e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e44:	f7f9 fbd8 	bl	80005f8 <__aeabi_dmul>
 8006e48:	4b76      	ldr	r3, [pc, #472]	@ (8007024 <_dtoa_r+0x5cc>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7f9 fa1e 	bl	800028c <__adddf3>
 8006e50:	4605      	mov	r5, r0
 8006e52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e56:	2c00      	cmp	r4, #0
 8006e58:	f040 808d 	bne.w	8006f76 <_dtoa_r+0x51e>
 8006e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e60:	4b71      	ldr	r3, [pc, #452]	@ (8007028 <_dtoa_r+0x5d0>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	f7f9 fa10 	bl	8000288 <__aeabi_dsub>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e70:	462a      	mov	r2, r5
 8006e72:	4633      	mov	r3, r6
 8006e74:	f7f9 fe50 	bl	8000b18 <__aeabi_dcmpgt>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f040 828b 	bne.w	8007394 <_dtoa_r+0x93c>
 8006e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e82:	462a      	mov	r2, r5
 8006e84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e88:	f7f9 fe28 	bl	8000adc <__aeabi_dcmplt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f040 8128 	bne.w	80070e2 <_dtoa_r+0x68a>
 8006e92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f2c0 815a 	blt.w	8007156 <_dtoa_r+0x6fe>
 8006ea2:	2f0e      	cmp	r7, #14
 8006ea4:	f300 8157 	bgt.w	8007156 <_dtoa_r+0x6fe>
 8006ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8007014 <_dtoa_r+0x5bc>)
 8006eaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006eae:	ed93 7b00 	vldr	d7, [r3]
 8006eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	ed8d 7b00 	vstr	d7, [sp]
 8006eba:	da03      	bge.n	8006ec4 <_dtoa_r+0x46c>
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f340 8101 	ble.w	80070c6 <_dtoa_r+0x66e>
 8006ec4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ec8:	4656      	mov	r6, sl
 8006eca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7f9 fcbb 	bl	800084c <__aeabi_ddiv>
 8006ed6:	f7f9 fe3f 	bl	8000b58 <__aeabi_d2iz>
 8006eda:	4680      	mov	r8, r0
 8006edc:	f7f9 fb22 	bl	8000524 <__aeabi_i2d>
 8006ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ee4:	f7f9 fb88 	bl	80005f8 <__aeabi_dmul>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4620      	mov	r0, r4
 8006eee:	4629      	mov	r1, r5
 8006ef0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006ef4:	f7f9 f9c8 	bl	8000288 <__aeabi_dsub>
 8006ef8:	f806 4b01 	strb.w	r4, [r6], #1
 8006efc:	9d07      	ldr	r5, [sp, #28]
 8006efe:	eba6 040a 	sub.w	r4, r6, sl
 8006f02:	42a5      	cmp	r5, r4
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	f040 8117 	bne.w	800713a <_dtoa_r+0x6e2>
 8006f0c:	f7f9 f9be 	bl	800028c <__adddf3>
 8006f10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f14:	4604      	mov	r4, r0
 8006f16:	460d      	mov	r5, r1
 8006f18:	f7f9 fdfe 	bl	8000b18 <__aeabi_dcmpgt>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f040 80f9 	bne.w	8007114 <_dtoa_r+0x6bc>
 8006f22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f2e:	b118      	cbz	r0, 8006f38 <_dtoa_r+0x4e0>
 8006f30:	f018 0f01 	tst.w	r8, #1
 8006f34:	f040 80ee 	bne.w	8007114 <_dtoa_r+0x6bc>
 8006f38:	4649      	mov	r1, r9
 8006f3a:	4658      	mov	r0, fp
 8006f3c:	f000 fc90 	bl	8007860 <_Bfree>
 8006f40:	2300      	movs	r3, #0
 8006f42:	7033      	strb	r3, [r6, #0]
 8006f44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f46:	3701      	adds	r7, #1
 8006f48:	601f      	str	r7, [r3, #0]
 8006f4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 831d 	beq.w	800758c <_dtoa_r+0xb34>
 8006f52:	601e      	str	r6, [r3, #0]
 8006f54:	e31a      	b.n	800758c <_dtoa_r+0xb34>
 8006f56:	07e2      	lsls	r2, r4, #31
 8006f58:	d505      	bpl.n	8006f66 <_dtoa_r+0x50e>
 8006f5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f5e:	f7f9 fb4b 	bl	80005f8 <__aeabi_dmul>
 8006f62:	3601      	adds	r6, #1
 8006f64:	2301      	movs	r3, #1
 8006f66:	1064      	asrs	r4, r4, #1
 8006f68:	3508      	adds	r5, #8
 8006f6a:	e73f      	b.n	8006dec <_dtoa_r+0x394>
 8006f6c:	2602      	movs	r6, #2
 8006f6e:	e742      	b.n	8006df6 <_dtoa_r+0x39e>
 8006f70:	9c07      	ldr	r4, [sp, #28]
 8006f72:	9704      	str	r7, [sp, #16]
 8006f74:	e761      	b.n	8006e3a <_dtoa_r+0x3e2>
 8006f76:	4b27      	ldr	r3, [pc, #156]	@ (8007014 <_dtoa_r+0x5bc>)
 8006f78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f82:	4454      	add	r4, sl
 8006f84:	2900      	cmp	r1, #0
 8006f86:	d053      	beq.n	8007030 <_dtoa_r+0x5d8>
 8006f88:	4928      	ldr	r1, [pc, #160]	@ (800702c <_dtoa_r+0x5d4>)
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	f7f9 fc5e 	bl	800084c <__aeabi_ddiv>
 8006f90:	4633      	mov	r3, r6
 8006f92:	462a      	mov	r2, r5
 8006f94:	f7f9 f978 	bl	8000288 <__aeabi_dsub>
 8006f98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f9c:	4656      	mov	r6, sl
 8006f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa2:	f7f9 fdd9 	bl	8000b58 <__aeabi_d2iz>
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	f7f9 fabc 	bl	8000524 <__aeabi_i2d>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb4:	f7f9 f968 	bl	8000288 <__aeabi_dsub>
 8006fb8:	3530      	adds	r5, #48	@ 0x30
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fc2:	f806 5b01 	strb.w	r5, [r6], #1
 8006fc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fca:	f7f9 fd87 	bl	8000adc <__aeabi_dcmplt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d171      	bne.n	80070b6 <_dtoa_r+0x65e>
 8006fd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fd6:	4911      	ldr	r1, [pc, #68]	@ (800701c <_dtoa_r+0x5c4>)
 8006fd8:	2000      	movs	r0, #0
 8006fda:	f7f9 f955 	bl	8000288 <__aeabi_dsub>
 8006fde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fe2:	f7f9 fd7b 	bl	8000adc <__aeabi_dcmplt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	f040 8095 	bne.w	8007116 <_dtoa_r+0x6be>
 8006fec:	42a6      	cmp	r6, r4
 8006fee:	f43f af50 	beq.w	8006e92 <_dtoa_r+0x43a>
 8006ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8007020 <_dtoa_r+0x5c8>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f7f9 fafd 	bl	80005f8 <__aeabi_dmul>
 8006ffe:	4b08      	ldr	r3, [pc, #32]	@ (8007020 <_dtoa_r+0x5c8>)
 8007000:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007004:	2200      	movs	r2, #0
 8007006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700a:	f7f9 faf5 	bl	80005f8 <__aeabi_dmul>
 800700e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007012:	e7c4      	b.n	8006f9e <_dtoa_r+0x546>
 8007014:	08008828 	.word	0x08008828
 8007018:	08008800 	.word	0x08008800
 800701c:	3ff00000 	.word	0x3ff00000
 8007020:	40240000 	.word	0x40240000
 8007024:	401c0000 	.word	0x401c0000
 8007028:	40140000 	.word	0x40140000
 800702c:	3fe00000 	.word	0x3fe00000
 8007030:	4631      	mov	r1, r6
 8007032:	4628      	mov	r0, r5
 8007034:	f7f9 fae0 	bl	80005f8 <__aeabi_dmul>
 8007038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800703c:	9415      	str	r4, [sp, #84]	@ 0x54
 800703e:	4656      	mov	r6, sl
 8007040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007044:	f7f9 fd88 	bl	8000b58 <__aeabi_d2iz>
 8007048:	4605      	mov	r5, r0
 800704a:	f7f9 fa6b 	bl	8000524 <__aeabi_i2d>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007056:	f7f9 f917 	bl	8000288 <__aeabi_dsub>
 800705a:	3530      	adds	r5, #48	@ 0x30
 800705c:	f806 5b01 	strb.w	r5, [r6], #1
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	42a6      	cmp	r6, r4
 8007066:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800706a:	f04f 0200 	mov.w	r2, #0
 800706e:	d124      	bne.n	80070ba <_dtoa_r+0x662>
 8007070:	4bac      	ldr	r3, [pc, #688]	@ (8007324 <_dtoa_r+0x8cc>)
 8007072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007076:	f7f9 f909 	bl	800028c <__adddf3>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007082:	f7f9 fd49 	bl	8000b18 <__aeabi_dcmpgt>
 8007086:	2800      	cmp	r0, #0
 8007088:	d145      	bne.n	8007116 <_dtoa_r+0x6be>
 800708a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800708e:	49a5      	ldr	r1, [pc, #660]	@ (8007324 <_dtoa_r+0x8cc>)
 8007090:	2000      	movs	r0, #0
 8007092:	f7f9 f8f9 	bl	8000288 <__aeabi_dsub>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800709e:	f7f9 fd1d 	bl	8000adc <__aeabi_dcmplt>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f43f aef5 	beq.w	8006e92 <_dtoa_r+0x43a>
 80070a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80070aa:	1e73      	subs	r3, r6, #1
 80070ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80070ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070b2:	2b30      	cmp	r3, #48	@ 0x30
 80070b4:	d0f8      	beq.n	80070a8 <_dtoa_r+0x650>
 80070b6:	9f04      	ldr	r7, [sp, #16]
 80070b8:	e73e      	b.n	8006f38 <_dtoa_r+0x4e0>
 80070ba:	4b9b      	ldr	r3, [pc, #620]	@ (8007328 <_dtoa_r+0x8d0>)
 80070bc:	f7f9 fa9c 	bl	80005f8 <__aeabi_dmul>
 80070c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c4:	e7bc      	b.n	8007040 <_dtoa_r+0x5e8>
 80070c6:	d10c      	bne.n	80070e2 <_dtoa_r+0x68a>
 80070c8:	4b98      	ldr	r3, [pc, #608]	@ (800732c <_dtoa_r+0x8d4>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070d0:	f7f9 fa92 	bl	80005f8 <__aeabi_dmul>
 80070d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070d8:	f7f9 fd14 	bl	8000b04 <__aeabi_dcmpge>
 80070dc:	2800      	cmp	r0, #0
 80070de:	f000 8157 	beq.w	8007390 <_dtoa_r+0x938>
 80070e2:	2400      	movs	r4, #0
 80070e4:	4625      	mov	r5, r4
 80070e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070e8:	43db      	mvns	r3, r3
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	4656      	mov	r6, sl
 80070ee:	2700      	movs	r7, #0
 80070f0:	4621      	mov	r1, r4
 80070f2:	4658      	mov	r0, fp
 80070f4:	f000 fbb4 	bl	8007860 <_Bfree>
 80070f8:	2d00      	cmp	r5, #0
 80070fa:	d0dc      	beq.n	80070b6 <_dtoa_r+0x65e>
 80070fc:	b12f      	cbz	r7, 800710a <_dtoa_r+0x6b2>
 80070fe:	42af      	cmp	r7, r5
 8007100:	d003      	beq.n	800710a <_dtoa_r+0x6b2>
 8007102:	4639      	mov	r1, r7
 8007104:	4658      	mov	r0, fp
 8007106:	f000 fbab 	bl	8007860 <_Bfree>
 800710a:	4629      	mov	r1, r5
 800710c:	4658      	mov	r0, fp
 800710e:	f000 fba7 	bl	8007860 <_Bfree>
 8007112:	e7d0      	b.n	80070b6 <_dtoa_r+0x65e>
 8007114:	9704      	str	r7, [sp, #16]
 8007116:	4633      	mov	r3, r6
 8007118:	461e      	mov	r6, r3
 800711a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800711e:	2a39      	cmp	r2, #57	@ 0x39
 8007120:	d107      	bne.n	8007132 <_dtoa_r+0x6da>
 8007122:	459a      	cmp	sl, r3
 8007124:	d1f8      	bne.n	8007118 <_dtoa_r+0x6c0>
 8007126:	9a04      	ldr	r2, [sp, #16]
 8007128:	3201      	adds	r2, #1
 800712a:	9204      	str	r2, [sp, #16]
 800712c:	2230      	movs	r2, #48	@ 0x30
 800712e:	f88a 2000 	strb.w	r2, [sl]
 8007132:	781a      	ldrb	r2, [r3, #0]
 8007134:	3201      	adds	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]
 8007138:	e7bd      	b.n	80070b6 <_dtoa_r+0x65e>
 800713a:	4b7b      	ldr	r3, [pc, #492]	@ (8007328 <_dtoa_r+0x8d0>)
 800713c:	2200      	movs	r2, #0
 800713e:	f7f9 fa5b 	bl	80005f8 <__aeabi_dmul>
 8007142:	2200      	movs	r2, #0
 8007144:	2300      	movs	r3, #0
 8007146:	4604      	mov	r4, r0
 8007148:	460d      	mov	r5, r1
 800714a:	f7f9 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800714e:	2800      	cmp	r0, #0
 8007150:	f43f aebb 	beq.w	8006eca <_dtoa_r+0x472>
 8007154:	e6f0      	b.n	8006f38 <_dtoa_r+0x4e0>
 8007156:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007158:	2a00      	cmp	r2, #0
 800715a:	f000 80db 	beq.w	8007314 <_dtoa_r+0x8bc>
 800715e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007160:	2a01      	cmp	r2, #1
 8007162:	f300 80bf 	bgt.w	80072e4 <_dtoa_r+0x88c>
 8007166:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007168:	2a00      	cmp	r2, #0
 800716a:	f000 80b7 	beq.w	80072dc <_dtoa_r+0x884>
 800716e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007172:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007174:	4646      	mov	r6, r8
 8007176:	9a08      	ldr	r2, [sp, #32]
 8007178:	2101      	movs	r1, #1
 800717a:	441a      	add	r2, r3
 800717c:	4658      	mov	r0, fp
 800717e:	4498      	add	r8, r3
 8007180:	9208      	str	r2, [sp, #32]
 8007182:	f000 fc21 	bl	80079c8 <__i2b>
 8007186:	4605      	mov	r5, r0
 8007188:	b15e      	cbz	r6, 80071a2 <_dtoa_r+0x74a>
 800718a:	9b08      	ldr	r3, [sp, #32]
 800718c:	2b00      	cmp	r3, #0
 800718e:	dd08      	ble.n	80071a2 <_dtoa_r+0x74a>
 8007190:	42b3      	cmp	r3, r6
 8007192:	9a08      	ldr	r2, [sp, #32]
 8007194:	bfa8      	it	ge
 8007196:	4633      	movge	r3, r6
 8007198:	eba8 0803 	sub.w	r8, r8, r3
 800719c:	1af6      	subs	r6, r6, r3
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	9308      	str	r3, [sp, #32]
 80071a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a4:	b1f3      	cbz	r3, 80071e4 <_dtoa_r+0x78c>
 80071a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80b7 	beq.w	800731c <_dtoa_r+0x8c4>
 80071ae:	b18c      	cbz	r4, 80071d4 <_dtoa_r+0x77c>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4622      	mov	r2, r4
 80071b4:	4658      	mov	r0, fp
 80071b6:	f000 fcc7 	bl	8007b48 <__pow5mult>
 80071ba:	464a      	mov	r2, r9
 80071bc:	4601      	mov	r1, r0
 80071be:	4605      	mov	r5, r0
 80071c0:	4658      	mov	r0, fp
 80071c2:	f000 fc17 	bl	80079f4 <__multiply>
 80071c6:	4649      	mov	r1, r9
 80071c8:	9004      	str	r0, [sp, #16]
 80071ca:	4658      	mov	r0, fp
 80071cc:	f000 fb48 	bl	8007860 <_Bfree>
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	4699      	mov	r9, r3
 80071d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071d6:	1b1a      	subs	r2, r3, r4
 80071d8:	d004      	beq.n	80071e4 <_dtoa_r+0x78c>
 80071da:	4649      	mov	r1, r9
 80071dc:	4658      	mov	r0, fp
 80071de:	f000 fcb3 	bl	8007b48 <__pow5mult>
 80071e2:	4681      	mov	r9, r0
 80071e4:	2101      	movs	r1, #1
 80071e6:	4658      	mov	r0, fp
 80071e8:	f000 fbee 	bl	80079c8 <__i2b>
 80071ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ee:	4604      	mov	r4, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 81cf 	beq.w	8007594 <_dtoa_r+0xb3c>
 80071f6:	461a      	mov	r2, r3
 80071f8:	4601      	mov	r1, r0
 80071fa:	4658      	mov	r0, fp
 80071fc:	f000 fca4 	bl	8007b48 <__pow5mult>
 8007200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007202:	2b01      	cmp	r3, #1
 8007204:	4604      	mov	r4, r0
 8007206:	f300 8095 	bgt.w	8007334 <_dtoa_r+0x8dc>
 800720a:	9b02      	ldr	r3, [sp, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f040 8087 	bne.w	8007320 <_dtoa_r+0x8c8>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 8089 	bne.w	8007330 <_dtoa_r+0x8d8>
 800721e:	9b03      	ldr	r3, [sp, #12]
 8007220:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007224:	0d1b      	lsrs	r3, r3, #20
 8007226:	051b      	lsls	r3, r3, #20
 8007228:	b12b      	cbz	r3, 8007236 <_dtoa_r+0x7de>
 800722a:	9b08      	ldr	r3, [sp, #32]
 800722c:	3301      	adds	r3, #1
 800722e:	9308      	str	r3, [sp, #32]
 8007230:	f108 0801 	add.w	r8, r8, #1
 8007234:	2301      	movs	r3, #1
 8007236:	930a      	str	r3, [sp, #40]	@ 0x28
 8007238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 81b0 	beq.w	80075a0 <_dtoa_r+0xb48>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007246:	6918      	ldr	r0, [r3, #16]
 8007248:	f000 fb72 	bl	8007930 <__hi0bits>
 800724c:	f1c0 0020 	rsb	r0, r0, #32
 8007250:	9b08      	ldr	r3, [sp, #32]
 8007252:	4418      	add	r0, r3
 8007254:	f010 001f 	ands.w	r0, r0, #31
 8007258:	d077      	beq.n	800734a <_dtoa_r+0x8f2>
 800725a:	f1c0 0320 	rsb	r3, r0, #32
 800725e:	2b04      	cmp	r3, #4
 8007260:	dd6b      	ble.n	800733a <_dtoa_r+0x8e2>
 8007262:	9b08      	ldr	r3, [sp, #32]
 8007264:	f1c0 001c 	rsb	r0, r0, #28
 8007268:	4403      	add	r3, r0
 800726a:	4480      	add	r8, r0
 800726c:	4406      	add	r6, r0
 800726e:	9308      	str	r3, [sp, #32]
 8007270:	f1b8 0f00 	cmp.w	r8, #0
 8007274:	dd05      	ble.n	8007282 <_dtoa_r+0x82a>
 8007276:	4649      	mov	r1, r9
 8007278:	4642      	mov	r2, r8
 800727a:	4658      	mov	r0, fp
 800727c:	f000 fcbe 	bl	8007bfc <__lshift>
 8007280:	4681      	mov	r9, r0
 8007282:	9b08      	ldr	r3, [sp, #32]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd05      	ble.n	8007294 <_dtoa_r+0x83c>
 8007288:	4621      	mov	r1, r4
 800728a:	461a      	mov	r2, r3
 800728c:	4658      	mov	r0, fp
 800728e:	f000 fcb5 	bl	8007bfc <__lshift>
 8007292:	4604      	mov	r4, r0
 8007294:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007296:	2b00      	cmp	r3, #0
 8007298:	d059      	beq.n	800734e <_dtoa_r+0x8f6>
 800729a:	4621      	mov	r1, r4
 800729c:	4648      	mov	r0, r9
 800729e:	f000 fd19 	bl	8007cd4 <__mcmp>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	da53      	bge.n	800734e <_dtoa_r+0x8f6>
 80072a6:	1e7b      	subs	r3, r7, #1
 80072a8:	9304      	str	r3, [sp, #16]
 80072aa:	4649      	mov	r1, r9
 80072ac:	2300      	movs	r3, #0
 80072ae:	220a      	movs	r2, #10
 80072b0:	4658      	mov	r0, fp
 80072b2:	f000 faf7 	bl	80078a4 <__multadd>
 80072b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b8:	4681      	mov	r9, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 8172 	beq.w	80075a4 <_dtoa_r+0xb4c>
 80072c0:	2300      	movs	r3, #0
 80072c2:	4629      	mov	r1, r5
 80072c4:	220a      	movs	r2, #10
 80072c6:	4658      	mov	r0, fp
 80072c8:	f000 faec 	bl	80078a4 <__multadd>
 80072cc:	9b00      	ldr	r3, [sp, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	4605      	mov	r5, r0
 80072d2:	dc67      	bgt.n	80073a4 <_dtoa_r+0x94c>
 80072d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	dc41      	bgt.n	800735e <_dtoa_r+0x906>
 80072da:	e063      	b.n	80073a4 <_dtoa_r+0x94c>
 80072dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072e2:	e746      	b.n	8007172 <_dtoa_r+0x71a>
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	1e5c      	subs	r4, r3, #1
 80072e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ea:	42a3      	cmp	r3, r4
 80072ec:	bfbf      	itttt	lt
 80072ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80072f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80072f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072f4:	1ae3      	sublt	r3, r4, r3
 80072f6:	bfb4      	ite	lt
 80072f8:	18d2      	addlt	r2, r2, r3
 80072fa:	1b1c      	subge	r4, r3, r4
 80072fc:	9b07      	ldr	r3, [sp, #28]
 80072fe:	bfbc      	itt	lt
 8007300:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007302:	2400      	movlt	r4, #0
 8007304:	2b00      	cmp	r3, #0
 8007306:	bfb5      	itete	lt
 8007308:	eba8 0603 	sublt.w	r6, r8, r3
 800730c:	9b07      	ldrge	r3, [sp, #28]
 800730e:	2300      	movlt	r3, #0
 8007310:	4646      	movge	r6, r8
 8007312:	e730      	b.n	8007176 <_dtoa_r+0x71e>
 8007314:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007316:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007318:	4646      	mov	r6, r8
 800731a:	e735      	b.n	8007188 <_dtoa_r+0x730>
 800731c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800731e:	e75c      	b.n	80071da <_dtoa_r+0x782>
 8007320:	2300      	movs	r3, #0
 8007322:	e788      	b.n	8007236 <_dtoa_r+0x7de>
 8007324:	3fe00000 	.word	0x3fe00000
 8007328:	40240000 	.word	0x40240000
 800732c:	40140000 	.word	0x40140000
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	e780      	b.n	8007236 <_dtoa_r+0x7de>
 8007334:	2300      	movs	r3, #0
 8007336:	930a      	str	r3, [sp, #40]	@ 0x28
 8007338:	e782      	b.n	8007240 <_dtoa_r+0x7e8>
 800733a:	d099      	beq.n	8007270 <_dtoa_r+0x818>
 800733c:	9a08      	ldr	r2, [sp, #32]
 800733e:	331c      	adds	r3, #28
 8007340:	441a      	add	r2, r3
 8007342:	4498      	add	r8, r3
 8007344:	441e      	add	r6, r3
 8007346:	9208      	str	r2, [sp, #32]
 8007348:	e792      	b.n	8007270 <_dtoa_r+0x818>
 800734a:	4603      	mov	r3, r0
 800734c:	e7f6      	b.n	800733c <_dtoa_r+0x8e4>
 800734e:	9b07      	ldr	r3, [sp, #28]
 8007350:	9704      	str	r7, [sp, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	dc20      	bgt.n	8007398 <_dtoa_r+0x940>
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800735a:	2b02      	cmp	r3, #2
 800735c:	dd1e      	ble.n	800739c <_dtoa_r+0x944>
 800735e:	9b00      	ldr	r3, [sp, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f47f aec0 	bne.w	80070e6 <_dtoa_r+0x68e>
 8007366:	4621      	mov	r1, r4
 8007368:	2205      	movs	r2, #5
 800736a:	4658      	mov	r0, fp
 800736c:	f000 fa9a 	bl	80078a4 <__multadd>
 8007370:	4601      	mov	r1, r0
 8007372:	4604      	mov	r4, r0
 8007374:	4648      	mov	r0, r9
 8007376:	f000 fcad 	bl	8007cd4 <__mcmp>
 800737a:	2800      	cmp	r0, #0
 800737c:	f77f aeb3 	ble.w	80070e6 <_dtoa_r+0x68e>
 8007380:	4656      	mov	r6, sl
 8007382:	2331      	movs	r3, #49	@ 0x31
 8007384:	f806 3b01 	strb.w	r3, [r6], #1
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	3301      	adds	r3, #1
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	e6ae      	b.n	80070ee <_dtoa_r+0x696>
 8007390:	9c07      	ldr	r4, [sp, #28]
 8007392:	9704      	str	r7, [sp, #16]
 8007394:	4625      	mov	r5, r4
 8007396:	e7f3      	b.n	8007380 <_dtoa_r+0x928>
 8007398:	9b07      	ldr	r3, [sp, #28]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 8104 	beq.w	80075ac <_dtoa_r+0xb54>
 80073a4:	2e00      	cmp	r6, #0
 80073a6:	dd05      	ble.n	80073b4 <_dtoa_r+0x95c>
 80073a8:	4629      	mov	r1, r5
 80073aa:	4632      	mov	r2, r6
 80073ac:	4658      	mov	r0, fp
 80073ae:	f000 fc25 	bl	8007bfc <__lshift>
 80073b2:	4605      	mov	r5, r0
 80073b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d05a      	beq.n	8007470 <_dtoa_r+0xa18>
 80073ba:	6869      	ldr	r1, [r5, #4]
 80073bc:	4658      	mov	r0, fp
 80073be:	f000 fa0f 	bl	80077e0 <_Balloc>
 80073c2:	4606      	mov	r6, r0
 80073c4:	b928      	cbnz	r0, 80073d2 <_dtoa_r+0x97a>
 80073c6:	4b84      	ldr	r3, [pc, #528]	@ (80075d8 <_dtoa_r+0xb80>)
 80073c8:	4602      	mov	r2, r0
 80073ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073ce:	f7ff bb5a 	b.w	8006a86 <_dtoa_r+0x2e>
 80073d2:	692a      	ldr	r2, [r5, #16]
 80073d4:	3202      	adds	r2, #2
 80073d6:	0092      	lsls	r2, r2, #2
 80073d8:	f105 010c 	add.w	r1, r5, #12
 80073dc:	300c      	adds	r0, #12
 80073de:	f000 fe3d 	bl	800805c <memcpy>
 80073e2:	2201      	movs	r2, #1
 80073e4:	4631      	mov	r1, r6
 80073e6:	4658      	mov	r0, fp
 80073e8:	f000 fc08 	bl	8007bfc <__lshift>
 80073ec:	f10a 0301 	add.w	r3, sl, #1
 80073f0:	9307      	str	r3, [sp, #28]
 80073f2:	9b00      	ldr	r3, [sp, #0]
 80073f4:	4453      	add	r3, sl
 80073f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073f8:	9b02      	ldr	r3, [sp, #8]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	462f      	mov	r7, r5
 8007400:	930a      	str	r3, [sp, #40]	@ 0x28
 8007402:	4605      	mov	r5, r0
 8007404:	9b07      	ldr	r3, [sp, #28]
 8007406:	4621      	mov	r1, r4
 8007408:	3b01      	subs	r3, #1
 800740a:	4648      	mov	r0, r9
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	f7ff fa9a 	bl	8006946 <quorem>
 8007412:	4639      	mov	r1, r7
 8007414:	9002      	str	r0, [sp, #8]
 8007416:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800741a:	4648      	mov	r0, r9
 800741c:	f000 fc5a 	bl	8007cd4 <__mcmp>
 8007420:	462a      	mov	r2, r5
 8007422:	9008      	str	r0, [sp, #32]
 8007424:	4621      	mov	r1, r4
 8007426:	4658      	mov	r0, fp
 8007428:	f000 fc70 	bl	8007d0c <__mdiff>
 800742c:	68c2      	ldr	r2, [r0, #12]
 800742e:	4606      	mov	r6, r0
 8007430:	bb02      	cbnz	r2, 8007474 <_dtoa_r+0xa1c>
 8007432:	4601      	mov	r1, r0
 8007434:	4648      	mov	r0, r9
 8007436:	f000 fc4d 	bl	8007cd4 <__mcmp>
 800743a:	4602      	mov	r2, r0
 800743c:	4631      	mov	r1, r6
 800743e:	4658      	mov	r0, fp
 8007440:	920e      	str	r2, [sp, #56]	@ 0x38
 8007442:	f000 fa0d 	bl	8007860 <_Bfree>
 8007446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800744a:	9e07      	ldr	r6, [sp, #28]
 800744c:	ea43 0102 	orr.w	r1, r3, r2
 8007450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007452:	4319      	orrs	r1, r3
 8007454:	d110      	bne.n	8007478 <_dtoa_r+0xa20>
 8007456:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800745a:	d029      	beq.n	80074b0 <_dtoa_r+0xa58>
 800745c:	9b08      	ldr	r3, [sp, #32]
 800745e:	2b00      	cmp	r3, #0
 8007460:	dd02      	ble.n	8007468 <_dtoa_r+0xa10>
 8007462:	9b02      	ldr	r3, [sp, #8]
 8007464:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007468:	9b00      	ldr	r3, [sp, #0]
 800746a:	f883 8000 	strb.w	r8, [r3]
 800746e:	e63f      	b.n	80070f0 <_dtoa_r+0x698>
 8007470:	4628      	mov	r0, r5
 8007472:	e7bb      	b.n	80073ec <_dtoa_r+0x994>
 8007474:	2201      	movs	r2, #1
 8007476:	e7e1      	b.n	800743c <_dtoa_r+0x9e4>
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	2b00      	cmp	r3, #0
 800747c:	db04      	blt.n	8007488 <_dtoa_r+0xa30>
 800747e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007480:	430b      	orrs	r3, r1
 8007482:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007484:	430b      	orrs	r3, r1
 8007486:	d120      	bne.n	80074ca <_dtoa_r+0xa72>
 8007488:	2a00      	cmp	r2, #0
 800748a:	dded      	ble.n	8007468 <_dtoa_r+0xa10>
 800748c:	4649      	mov	r1, r9
 800748e:	2201      	movs	r2, #1
 8007490:	4658      	mov	r0, fp
 8007492:	f000 fbb3 	bl	8007bfc <__lshift>
 8007496:	4621      	mov	r1, r4
 8007498:	4681      	mov	r9, r0
 800749a:	f000 fc1b 	bl	8007cd4 <__mcmp>
 800749e:	2800      	cmp	r0, #0
 80074a0:	dc03      	bgt.n	80074aa <_dtoa_r+0xa52>
 80074a2:	d1e1      	bne.n	8007468 <_dtoa_r+0xa10>
 80074a4:	f018 0f01 	tst.w	r8, #1
 80074a8:	d0de      	beq.n	8007468 <_dtoa_r+0xa10>
 80074aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074ae:	d1d8      	bne.n	8007462 <_dtoa_r+0xa0a>
 80074b0:	9a00      	ldr	r2, [sp, #0]
 80074b2:	2339      	movs	r3, #57	@ 0x39
 80074b4:	7013      	strb	r3, [r2, #0]
 80074b6:	4633      	mov	r3, r6
 80074b8:	461e      	mov	r6, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074c0:	2a39      	cmp	r2, #57	@ 0x39
 80074c2:	d052      	beq.n	800756a <_dtoa_r+0xb12>
 80074c4:	3201      	adds	r2, #1
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	e612      	b.n	80070f0 <_dtoa_r+0x698>
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	dd07      	ble.n	80074de <_dtoa_r+0xa86>
 80074ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074d2:	d0ed      	beq.n	80074b0 <_dtoa_r+0xa58>
 80074d4:	9a00      	ldr	r2, [sp, #0]
 80074d6:	f108 0301 	add.w	r3, r8, #1
 80074da:	7013      	strb	r3, [r2, #0]
 80074dc:	e608      	b.n	80070f0 <_dtoa_r+0x698>
 80074de:	9b07      	ldr	r3, [sp, #28]
 80074e0:	9a07      	ldr	r2, [sp, #28]
 80074e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80074e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d028      	beq.n	800753e <_dtoa_r+0xae6>
 80074ec:	4649      	mov	r1, r9
 80074ee:	2300      	movs	r3, #0
 80074f0:	220a      	movs	r2, #10
 80074f2:	4658      	mov	r0, fp
 80074f4:	f000 f9d6 	bl	80078a4 <__multadd>
 80074f8:	42af      	cmp	r7, r5
 80074fa:	4681      	mov	r9, r0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	f04f 020a 	mov.w	r2, #10
 8007504:	4639      	mov	r1, r7
 8007506:	4658      	mov	r0, fp
 8007508:	d107      	bne.n	800751a <_dtoa_r+0xac2>
 800750a:	f000 f9cb 	bl	80078a4 <__multadd>
 800750e:	4607      	mov	r7, r0
 8007510:	4605      	mov	r5, r0
 8007512:	9b07      	ldr	r3, [sp, #28]
 8007514:	3301      	adds	r3, #1
 8007516:	9307      	str	r3, [sp, #28]
 8007518:	e774      	b.n	8007404 <_dtoa_r+0x9ac>
 800751a:	f000 f9c3 	bl	80078a4 <__multadd>
 800751e:	4629      	mov	r1, r5
 8007520:	4607      	mov	r7, r0
 8007522:	2300      	movs	r3, #0
 8007524:	220a      	movs	r2, #10
 8007526:	4658      	mov	r0, fp
 8007528:	f000 f9bc 	bl	80078a4 <__multadd>
 800752c:	4605      	mov	r5, r0
 800752e:	e7f0      	b.n	8007512 <_dtoa_r+0xaba>
 8007530:	9b00      	ldr	r3, [sp, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfcc      	ite	gt
 8007536:	461e      	movgt	r6, r3
 8007538:	2601      	movle	r6, #1
 800753a:	4456      	add	r6, sl
 800753c:	2700      	movs	r7, #0
 800753e:	4649      	mov	r1, r9
 8007540:	2201      	movs	r2, #1
 8007542:	4658      	mov	r0, fp
 8007544:	f000 fb5a 	bl	8007bfc <__lshift>
 8007548:	4621      	mov	r1, r4
 800754a:	4681      	mov	r9, r0
 800754c:	f000 fbc2 	bl	8007cd4 <__mcmp>
 8007550:	2800      	cmp	r0, #0
 8007552:	dcb0      	bgt.n	80074b6 <_dtoa_r+0xa5e>
 8007554:	d102      	bne.n	800755c <_dtoa_r+0xb04>
 8007556:	f018 0f01 	tst.w	r8, #1
 800755a:	d1ac      	bne.n	80074b6 <_dtoa_r+0xa5e>
 800755c:	4633      	mov	r3, r6
 800755e:	461e      	mov	r6, r3
 8007560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007564:	2a30      	cmp	r2, #48	@ 0x30
 8007566:	d0fa      	beq.n	800755e <_dtoa_r+0xb06>
 8007568:	e5c2      	b.n	80070f0 <_dtoa_r+0x698>
 800756a:	459a      	cmp	sl, r3
 800756c:	d1a4      	bne.n	80074b8 <_dtoa_r+0xa60>
 800756e:	9b04      	ldr	r3, [sp, #16]
 8007570:	3301      	adds	r3, #1
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	2331      	movs	r3, #49	@ 0x31
 8007576:	f88a 3000 	strb.w	r3, [sl]
 800757a:	e5b9      	b.n	80070f0 <_dtoa_r+0x698>
 800757c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800757e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80075dc <_dtoa_r+0xb84>
 8007582:	b11b      	cbz	r3, 800758c <_dtoa_r+0xb34>
 8007584:	f10a 0308 	add.w	r3, sl, #8
 8007588:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	4650      	mov	r0, sl
 800758e:	b019      	add	sp, #100	@ 0x64
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007596:	2b01      	cmp	r3, #1
 8007598:	f77f ae37 	ble.w	800720a <_dtoa_r+0x7b2>
 800759c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800759e:	930a      	str	r3, [sp, #40]	@ 0x28
 80075a0:	2001      	movs	r0, #1
 80075a2:	e655      	b.n	8007250 <_dtoa_r+0x7f8>
 80075a4:	9b00      	ldr	r3, [sp, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f77f aed6 	ble.w	8007358 <_dtoa_r+0x900>
 80075ac:	4656      	mov	r6, sl
 80075ae:	4621      	mov	r1, r4
 80075b0:	4648      	mov	r0, r9
 80075b2:	f7ff f9c8 	bl	8006946 <quorem>
 80075b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075ba:	f806 8b01 	strb.w	r8, [r6], #1
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	eba6 020a 	sub.w	r2, r6, sl
 80075c4:	4293      	cmp	r3, r2
 80075c6:	ddb3      	ble.n	8007530 <_dtoa_r+0xad8>
 80075c8:	4649      	mov	r1, r9
 80075ca:	2300      	movs	r3, #0
 80075cc:	220a      	movs	r2, #10
 80075ce:	4658      	mov	r0, fp
 80075d0:	f000 f968 	bl	80078a4 <__multadd>
 80075d4:	4681      	mov	r9, r0
 80075d6:	e7ea      	b.n	80075ae <_dtoa_r+0xb56>
 80075d8:	08008788 	.word	0x08008788
 80075dc:	0800870c 	.word	0x0800870c

080075e0 <_free_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4605      	mov	r5, r0
 80075e4:	2900      	cmp	r1, #0
 80075e6:	d041      	beq.n	800766c <_free_r+0x8c>
 80075e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ec:	1f0c      	subs	r4, r1, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bfb8      	it	lt
 80075f2:	18e4      	addlt	r4, r4, r3
 80075f4:	f000 f8e8 	bl	80077c8 <__malloc_lock>
 80075f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007670 <_free_r+0x90>)
 80075fa:	6813      	ldr	r3, [r2, #0]
 80075fc:	b933      	cbnz	r3, 800760c <_free_r+0x2c>
 80075fe:	6063      	str	r3, [r4, #4]
 8007600:	6014      	str	r4, [r2, #0]
 8007602:	4628      	mov	r0, r5
 8007604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007608:	f000 b8e4 	b.w	80077d4 <__malloc_unlock>
 800760c:	42a3      	cmp	r3, r4
 800760e:	d908      	bls.n	8007622 <_free_r+0x42>
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	1821      	adds	r1, r4, r0
 8007614:	428b      	cmp	r3, r1
 8007616:	bf01      	itttt	eq
 8007618:	6819      	ldreq	r1, [r3, #0]
 800761a:	685b      	ldreq	r3, [r3, #4]
 800761c:	1809      	addeq	r1, r1, r0
 800761e:	6021      	streq	r1, [r4, #0]
 8007620:	e7ed      	b.n	80075fe <_free_r+0x1e>
 8007622:	461a      	mov	r2, r3
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	b10b      	cbz	r3, 800762c <_free_r+0x4c>
 8007628:	42a3      	cmp	r3, r4
 800762a:	d9fa      	bls.n	8007622 <_free_r+0x42>
 800762c:	6811      	ldr	r1, [r2, #0]
 800762e:	1850      	adds	r0, r2, r1
 8007630:	42a0      	cmp	r0, r4
 8007632:	d10b      	bne.n	800764c <_free_r+0x6c>
 8007634:	6820      	ldr	r0, [r4, #0]
 8007636:	4401      	add	r1, r0
 8007638:	1850      	adds	r0, r2, r1
 800763a:	4283      	cmp	r3, r0
 800763c:	6011      	str	r1, [r2, #0]
 800763e:	d1e0      	bne.n	8007602 <_free_r+0x22>
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	6053      	str	r3, [r2, #4]
 8007646:	4408      	add	r0, r1
 8007648:	6010      	str	r0, [r2, #0]
 800764a:	e7da      	b.n	8007602 <_free_r+0x22>
 800764c:	d902      	bls.n	8007654 <_free_r+0x74>
 800764e:	230c      	movs	r3, #12
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	e7d6      	b.n	8007602 <_free_r+0x22>
 8007654:	6820      	ldr	r0, [r4, #0]
 8007656:	1821      	adds	r1, r4, r0
 8007658:	428b      	cmp	r3, r1
 800765a:	bf04      	itt	eq
 800765c:	6819      	ldreq	r1, [r3, #0]
 800765e:	685b      	ldreq	r3, [r3, #4]
 8007660:	6063      	str	r3, [r4, #4]
 8007662:	bf04      	itt	eq
 8007664:	1809      	addeq	r1, r1, r0
 8007666:	6021      	streq	r1, [r4, #0]
 8007668:	6054      	str	r4, [r2, #4]
 800766a:	e7ca      	b.n	8007602 <_free_r+0x22>
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	bf00      	nop
 8007670:	20000504 	.word	0x20000504

08007674 <malloc>:
 8007674:	4b02      	ldr	r3, [pc, #8]	@ (8007680 <malloc+0xc>)
 8007676:	4601      	mov	r1, r0
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f000 b825 	b.w	80076c8 <_malloc_r>
 800767e:	bf00      	nop
 8007680:	20000020 	.word	0x20000020

08007684 <sbrk_aligned>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4e0f      	ldr	r6, [pc, #60]	@ (80076c4 <sbrk_aligned+0x40>)
 8007688:	460c      	mov	r4, r1
 800768a:	6831      	ldr	r1, [r6, #0]
 800768c:	4605      	mov	r5, r0
 800768e:	b911      	cbnz	r1, 8007696 <sbrk_aligned+0x12>
 8007690:	f000 fcd4 	bl	800803c <_sbrk_r>
 8007694:	6030      	str	r0, [r6, #0]
 8007696:	4621      	mov	r1, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 fccf 	bl	800803c <_sbrk_r>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d103      	bne.n	80076aa <sbrk_aligned+0x26>
 80076a2:	f04f 34ff 	mov.w	r4, #4294967295
 80076a6:	4620      	mov	r0, r4
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	1cc4      	adds	r4, r0, #3
 80076ac:	f024 0403 	bic.w	r4, r4, #3
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d0f8      	beq.n	80076a6 <sbrk_aligned+0x22>
 80076b4:	1a21      	subs	r1, r4, r0
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 fcc0 	bl	800803c <_sbrk_r>
 80076bc:	3001      	adds	r0, #1
 80076be:	d1f2      	bne.n	80076a6 <sbrk_aligned+0x22>
 80076c0:	e7ef      	b.n	80076a2 <sbrk_aligned+0x1e>
 80076c2:	bf00      	nop
 80076c4:	20000500 	.word	0x20000500

080076c8 <_malloc_r>:
 80076c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076cc:	1ccd      	adds	r5, r1, #3
 80076ce:	f025 0503 	bic.w	r5, r5, #3
 80076d2:	3508      	adds	r5, #8
 80076d4:	2d0c      	cmp	r5, #12
 80076d6:	bf38      	it	cc
 80076d8:	250c      	movcc	r5, #12
 80076da:	2d00      	cmp	r5, #0
 80076dc:	4606      	mov	r6, r0
 80076de:	db01      	blt.n	80076e4 <_malloc_r+0x1c>
 80076e0:	42a9      	cmp	r1, r5
 80076e2:	d904      	bls.n	80076ee <_malloc_r+0x26>
 80076e4:	230c      	movs	r3, #12
 80076e6:	6033      	str	r3, [r6, #0]
 80076e8:	2000      	movs	r0, #0
 80076ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077c4 <_malloc_r+0xfc>
 80076f2:	f000 f869 	bl	80077c8 <__malloc_lock>
 80076f6:	f8d8 3000 	ldr.w	r3, [r8]
 80076fa:	461c      	mov	r4, r3
 80076fc:	bb44      	cbnz	r4, 8007750 <_malloc_r+0x88>
 80076fe:	4629      	mov	r1, r5
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff ffbf 	bl	8007684 <sbrk_aligned>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	4604      	mov	r4, r0
 800770a:	d158      	bne.n	80077be <_malloc_r+0xf6>
 800770c:	f8d8 4000 	ldr.w	r4, [r8]
 8007710:	4627      	mov	r7, r4
 8007712:	2f00      	cmp	r7, #0
 8007714:	d143      	bne.n	800779e <_malloc_r+0xd6>
 8007716:	2c00      	cmp	r4, #0
 8007718:	d04b      	beq.n	80077b2 <_malloc_r+0xea>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	4639      	mov	r1, r7
 800771e:	4630      	mov	r0, r6
 8007720:	eb04 0903 	add.w	r9, r4, r3
 8007724:	f000 fc8a 	bl	800803c <_sbrk_r>
 8007728:	4581      	cmp	r9, r0
 800772a:	d142      	bne.n	80077b2 <_malloc_r+0xea>
 800772c:	6821      	ldr	r1, [r4, #0]
 800772e:	1a6d      	subs	r5, r5, r1
 8007730:	4629      	mov	r1, r5
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ffa6 	bl	8007684 <sbrk_aligned>
 8007738:	3001      	adds	r0, #1
 800773a:	d03a      	beq.n	80077b2 <_malloc_r+0xea>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	442b      	add	r3, r5
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	f8d8 3000 	ldr.w	r3, [r8]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	bb62      	cbnz	r2, 80077a4 <_malloc_r+0xdc>
 800774a:	f8c8 7000 	str.w	r7, [r8]
 800774e:	e00f      	b.n	8007770 <_malloc_r+0xa8>
 8007750:	6822      	ldr	r2, [r4, #0]
 8007752:	1b52      	subs	r2, r2, r5
 8007754:	d420      	bmi.n	8007798 <_malloc_r+0xd0>
 8007756:	2a0b      	cmp	r2, #11
 8007758:	d917      	bls.n	800778a <_malloc_r+0xc2>
 800775a:	1961      	adds	r1, r4, r5
 800775c:	42a3      	cmp	r3, r4
 800775e:	6025      	str	r5, [r4, #0]
 8007760:	bf18      	it	ne
 8007762:	6059      	strne	r1, [r3, #4]
 8007764:	6863      	ldr	r3, [r4, #4]
 8007766:	bf08      	it	eq
 8007768:	f8c8 1000 	streq.w	r1, [r8]
 800776c:	5162      	str	r2, [r4, r5]
 800776e:	604b      	str	r3, [r1, #4]
 8007770:	4630      	mov	r0, r6
 8007772:	f000 f82f 	bl	80077d4 <__malloc_unlock>
 8007776:	f104 000b 	add.w	r0, r4, #11
 800777a:	1d23      	adds	r3, r4, #4
 800777c:	f020 0007 	bic.w	r0, r0, #7
 8007780:	1ac2      	subs	r2, r0, r3
 8007782:	bf1c      	itt	ne
 8007784:	1a1b      	subne	r3, r3, r0
 8007786:	50a3      	strne	r3, [r4, r2]
 8007788:	e7af      	b.n	80076ea <_malloc_r+0x22>
 800778a:	6862      	ldr	r2, [r4, #4]
 800778c:	42a3      	cmp	r3, r4
 800778e:	bf0c      	ite	eq
 8007790:	f8c8 2000 	streq.w	r2, [r8]
 8007794:	605a      	strne	r2, [r3, #4]
 8007796:	e7eb      	b.n	8007770 <_malloc_r+0xa8>
 8007798:	4623      	mov	r3, r4
 800779a:	6864      	ldr	r4, [r4, #4]
 800779c:	e7ae      	b.n	80076fc <_malloc_r+0x34>
 800779e:	463c      	mov	r4, r7
 80077a0:	687f      	ldr	r7, [r7, #4]
 80077a2:	e7b6      	b.n	8007712 <_malloc_r+0x4a>
 80077a4:	461a      	mov	r2, r3
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d1fb      	bne.n	80077a4 <_malloc_r+0xdc>
 80077ac:	2300      	movs	r3, #0
 80077ae:	6053      	str	r3, [r2, #4]
 80077b0:	e7de      	b.n	8007770 <_malloc_r+0xa8>
 80077b2:	230c      	movs	r3, #12
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	4630      	mov	r0, r6
 80077b8:	f000 f80c 	bl	80077d4 <__malloc_unlock>
 80077bc:	e794      	b.n	80076e8 <_malloc_r+0x20>
 80077be:	6005      	str	r5, [r0, #0]
 80077c0:	e7d6      	b.n	8007770 <_malloc_r+0xa8>
 80077c2:	bf00      	nop
 80077c4:	20000504 	.word	0x20000504

080077c8 <__malloc_lock>:
 80077c8:	4801      	ldr	r0, [pc, #4]	@ (80077d0 <__malloc_lock+0x8>)
 80077ca:	f7ff b8ba 	b.w	8006942 <__retarget_lock_acquire_recursive>
 80077ce:	bf00      	nop
 80077d0:	200004fc 	.word	0x200004fc

080077d4 <__malloc_unlock>:
 80077d4:	4801      	ldr	r0, [pc, #4]	@ (80077dc <__malloc_unlock+0x8>)
 80077d6:	f7ff b8b5 	b.w	8006944 <__retarget_lock_release_recursive>
 80077da:	bf00      	nop
 80077dc:	200004fc 	.word	0x200004fc

080077e0 <_Balloc>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	69c6      	ldr	r6, [r0, #28]
 80077e4:	4604      	mov	r4, r0
 80077e6:	460d      	mov	r5, r1
 80077e8:	b976      	cbnz	r6, 8007808 <_Balloc+0x28>
 80077ea:	2010      	movs	r0, #16
 80077ec:	f7ff ff42 	bl	8007674 <malloc>
 80077f0:	4602      	mov	r2, r0
 80077f2:	61e0      	str	r0, [r4, #28]
 80077f4:	b920      	cbnz	r0, 8007800 <_Balloc+0x20>
 80077f6:	4b18      	ldr	r3, [pc, #96]	@ (8007858 <_Balloc+0x78>)
 80077f8:	4818      	ldr	r0, [pc, #96]	@ (800785c <_Balloc+0x7c>)
 80077fa:	216b      	movs	r1, #107	@ 0x6b
 80077fc:	f000 fc3c 	bl	8008078 <__assert_func>
 8007800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007804:	6006      	str	r6, [r0, #0]
 8007806:	60c6      	str	r6, [r0, #12]
 8007808:	69e6      	ldr	r6, [r4, #28]
 800780a:	68f3      	ldr	r3, [r6, #12]
 800780c:	b183      	cbz	r3, 8007830 <_Balloc+0x50>
 800780e:	69e3      	ldr	r3, [r4, #28]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007816:	b9b8      	cbnz	r0, 8007848 <_Balloc+0x68>
 8007818:	2101      	movs	r1, #1
 800781a:	fa01 f605 	lsl.w	r6, r1, r5
 800781e:	1d72      	adds	r2, r6, #5
 8007820:	0092      	lsls	r2, r2, #2
 8007822:	4620      	mov	r0, r4
 8007824:	f000 fc46 	bl	80080b4 <_calloc_r>
 8007828:	b160      	cbz	r0, 8007844 <_Balloc+0x64>
 800782a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800782e:	e00e      	b.n	800784e <_Balloc+0x6e>
 8007830:	2221      	movs	r2, #33	@ 0x21
 8007832:	2104      	movs	r1, #4
 8007834:	4620      	mov	r0, r4
 8007836:	f000 fc3d 	bl	80080b4 <_calloc_r>
 800783a:	69e3      	ldr	r3, [r4, #28]
 800783c:	60f0      	str	r0, [r6, #12]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e4      	bne.n	800780e <_Balloc+0x2e>
 8007844:	2000      	movs	r0, #0
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	6802      	ldr	r2, [r0, #0]
 800784a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800784e:	2300      	movs	r3, #0
 8007850:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007854:	e7f7      	b.n	8007846 <_Balloc+0x66>
 8007856:	bf00      	nop
 8007858:	08008719 	.word	0x08008719
 800785c:	08008799 	.word	0x08008799

08007860 <_Bfree>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	69c6      	ldr	r6, [r0, #28]
 8007864:	4605      	mov	r5, r0
 8007866:	460c      	mov	r4, r1
 8007868:	b976      	cbnz	r6, 8007888 <_Bfree+0x28>
 800786a:	2010      	movs	r0, #16
 800786c:	f7ff ff02 	bl	8007674 <malloc>
 8007870:	4602      	mov	r2, r0
 8007872:	61e8      	str	r0, [r5, #28]
 8007874:	b920      	cbnz	r0, 8007880 <_Bfree+0x20>
 8007876:	4b09      	ldr	r3, [pc, #36]	@ (800789c <_Bfree+0x3c>)
 8007878:	4809      	ldr	r0, [pc, #36]	@ (80078a0 <_Bfree+0x40>)
 800787a:	218f      	movs	r1, #143	@ 0x8f
 800787c:	f000 fbfc 	bl	8008078 <__assert_func>
 8007880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007884:	6006      	str	r6, [r0, #0]
 8007886:	60c6      	str	r6, [r0, #12]
 8007888:	b13c      	cbz	r4, 800789a <_Bfree+0x3a>
 800788a:	69eb      	ldr	r3, [r5, #28]
 800788c:	6862      	ldr	r2, [r4, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007894:	6021      	str	r1, [r4, #0]
 8007896:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	08008719 	.word	0x08008719
 80078a0:	08008799 	.word	0x08008799

080078a4 <__multadd>:
 80078a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a8:	690d      	ldr	r5, [r1, #16]
 80078aa:	4607      	mov	r7, r0
 80078ac:	460c      	mov	r4, r1
 80078ae:	461e      	mov	r6, r3
 80078b0:	f101 0c14 	add.w	ip, r1, #20
 80078b4:	2000      	movs	r0, #0
 80078b6:	f8dc 3000 	ldr.w	r3, [ip]
 80078ba:	b299      	uxth	r1, r3
 80078bc:	fb02 6101 	mla	r1, r2, r1, r6
 80078c0:	0c1e      	lsrs	r6, r3, #16
 80078c2:	0c0b      	lsrs	r3, r1, #16
 80078c4:	fb02 3306 	mla	r3, r2, r6, r3
 80078c8:	b289      	uxth	r1, r1
 80078ca:	3001      	adds	r0, #1
 80078cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078d0:	4285      	cmp	r5, r0
 80078d2:	f84c 1b04 	str.w	r1, [ip], #4
 80078d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078da:	dcec      	bgt.n	80078b6 <__multadd+0x12>
 80078dc:	b30e      	cbz	r6, 8007922 <__multadd+0x7e>
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	42ab      	cmp	r3, r5
 80078e2:	dc19      	bgt.n	8007918 <__multadd+0x74>
 80078e4:	6861      	ldr	r1, [r4, #4]
 80078e6:	4638      	mov	r0, r7
 80078e8:	3101      	adds	r1, #1
 80078ea:	f7ff ff79 	bl	80077e0 <_Balloc>
 80078ee:	4680      	mov	r8, r0
 80078f0:	b928      	cbnz	r0, 80078fe <__multadd+0x5a>
 80078f2:	4602      	mov	r2, r0
 80078f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <__multadd+0x84>)
 80078f6:	480d      	ldr	r0, [pc, #52]	@ (800792c <__multadd+0x88>)
 80078f8:	21ba      	movs	r1, #186	@ 0xba
 80078fa:	f000 fbbd 	bl	8008078 <__assert_func>
 80078fe:	6922      	ldr	r2, [r4, #16]
 8007900:	3202      	adds	r2, #2
 8007902:	f104 010c 	add.w	r1, r4, #12
 8007906:	0092      	lsls	r2, r2, #2
 8007908:	300c      	adds	r0, #12
 800790a:	f000 fba7 	bl	800805c <memcpy>
 800790e:	4621      	mov	r1, r4
 8007910:	4638      	mov	r0, r7
 8007912:	f7ff ffa5 	bl	8007860 <_Bfree>
 8007916:	4644      	mov	r4, r8
 8007918:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800791c:	3501      	adds	r5, #1
 800791e:	615e      	str	r6, [r3, #20]
 8007920:	6125      	str	r5, [r4, #16]
 8007922:	4620      	mov	r0, r4
 8007924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007928:	08008788 	.word	0x08008788
 800792c:	08008799 	.word	0x08008799

08007930 <__hi0bits>:
 8007930:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007934:	4603      	mov	r3, r0
 8007936:	bf36      	itet	cc
 8007938:	0403      	lslcc	r3, r0, #16
 800793a:	2000      	movcs	r0, #0
 800793c:	2010      	movcc	r0, #16
 800793e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007942:	bf3c      	itt	cc
 8007944:	021b      	lslcc	r3, r3, #8
 8007946:	3008      	addcc	r0, #8
 8007948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800794c:	bf3c      	itt	cc
 800794e:	011b      	lslcc	r3, r3, #4
 8007950:	3004      	addcc	r0, #4
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007956:	bf3c      	itt	cc
 8007958:	009b      	lslcc	r3, r3, #2
 800795a:	3002      	addcc	r0, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	db05      	blt.n	800796c <__hi0bits+0x3c>
 8007960:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007964:	f100 0001 	add.w	r0, r0, #1
 8007968:	bf08      	it	eq
 800796a:	2020      	moveq	r0, #32
 800796c:	4770      	bx	lr

0800796e <__lo0bits>:
 800796e:	6803      	ldr	r3, [r0, #0]
 8007970:	4602      	mov	r2, r0
 8007972:	f013 0007 	ands.w	r0, r3, #7
 8007976:	d00b      	beq.n	8007990 <__lo0bits+0x22>
 8007978:	07d9      	lsls	r1, r3, #31
 800797a:	d421      	bmi.n	80079c0 <__lo0bits+0x52>
 800797c:	0798      	lsls	r0, r3, #30
 800797e:	bf49      	itett	mi
 8007980:	085b      	lsrmi	r3, r3, #1
 8007982:	089b      	lsrpl	r3, r3, #2
 8007984:	2001      	movmi	r0, #1
 8007986:	6013      	strmi	r3, [r2, #0]
 8007988:	bf5c      	itt	pl
 800798a:	6013      	strpl	r3, [r2, #0]
 800798c:	2002      	movpl	r0, #2
 800798e:	4770      	bx	lr
 8007990:	b299      	uxth	r1, r3
 8007992:	b909      	cbnz	r1, 8007998 <__lo0bits+0x2a>
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	2010      	movs	r0, #16
 8007998:	b2d9      	uxtb	r1, r3
 800799a:	b909      	cbnz	r1, 80079a0 <__lo0bits+0x32>
 800799c:	3008      	adds	r0, #8
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	0719      	lsls	r1, r3, #28
 80079a2:	bf04      	itt	eq
 80079a4:	091b      	lsreq	r3, r3, #4
 80079a6:	3004      	addeq	r0, #4
 80079a8:	0799      	lsls	r1, r3, #30
 80079aa:	bf04      	itt	eq
 80079ac:	089b      	lsreq	r3, r3, #2
 80079ae:	3002      	addeq	r0, #2
 80079b0:	07d9      	lsls	r1, r3, #31
 80079b2:	d403      	bmi.n	80079bc <__lo0bits+0x4e>
 80079b4:	085b      	lsrs	r3, r3, #1
 80079b6:	f100 0001 	add.w	r0, r0, #1
 80079ba:	d003      	beq.n	80079c4 <__lo0bits+0x56>
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	4770      	bx	lr
 80079c0:	2000      	movs	r0, #0
 80079c2:	4770      	bx	lr
 80079c4:	2020      	movs	r0, #32
 80079c6:	4770      	bx	lr

080079c8 <__i2b>:
 80079c8:	b510      	push	{r4, lr}
 80079ca:	460c      	mov	r4, r1
 80079cc:	2101      	movs	r1, #1
 80079ce:	f7ff ff07 	bl	80077e0 <_Balloc>
 80079d2:	4602      	mov	r2, r0
 80079d4:	b928      	cbnz	r0, 80079e2 <__i2b+0x1a>
 80079d6:	4b05      	ldr	r3, [pc, #20]	@ (80079ec <__i2b+0x24>)
 80079d8:	4805      	ldr	r0, [pc, #20]	@ (80079f0 <__i2b+0x28>)
 80079da:	f240 1145 	movw	r1, #325	@ 0x145
 80079de:	f000 fb4b 	bl	8008078 <__assert_func>
 80079e2:	2301      	movs	r3, #1
 80079e4:	6144      	str	r4, [r0, #20]
 80079e6:	6103      	str	r3, [r0, #16]
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	bf00      	nop
 80079ec:	08008788 	.word	0x08008788
 80079f0:	08008799 	.word	0x08008799

080079f4 <__multiply>:
 80079f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	4614      	mov	r4, r2
 80079fa:	690a      	ldr	r2, [r1, #16]
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	bfa8      	it	ge
 8007a02:	4623      	movge	r3, r4
 8007a04:	460f      	mov	r7, r1
 8007a06:	bfa4      	itt	ge
 8007a08:	460c      	movge	r4, r1
 8007a0a:	461f      	movge	r7, r3
 8007a0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a14:	68a3      	ldr	r3, [r4, #8]
 8007a16:	6861      	ldr	r1, [r4, #4]
 8007a18:	eb0a 0609 	add.w	r6, sl, r9
 8007a1c:	42b3      	cmp	r3, r6
 8007a1e:	b085      	sub	sp, #20
 8007a20:	bfb8      	it	lt
 8007a22:	3101      	addlt	r1, #1
 8007a24:	f7ff fedc 	bl	80077e0 <_Balloc>
 8007a28:	b930      	cbnz	r0, 8007a38 <__multiply+0x44>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4b44      	ldr	r3, [pc, #272]	@ (8007b40 <__multiply+0x14c>)
 8007a2e:	4845      	ldr	r0, [pc, #276]	@ (8007b44 <__multiply+0x150>)
 8007a30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a34:	f000 fb20 	bl	8008078 <__assert_func>
 8007a38:	f100 0514 	add.w	r5, r0, #20
 8007a3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a40:	462b      	mov	r3, r5
 8007a42:	2200      	movs	r2, #0
 8007a44:	4543      	cmp	r3, r8
 8007a46:	d321      	bcc.n	8007a8c <__multiply+0x98>
 8007a48:	f107 0114 	add.w	r1, r7, #20
 8007a4c:	f104 0214 	add.w	r2, r4, #20
 8007a50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a58:	9302      	str	r3, [sp, #8]
 8007a5a:	1b13      	subs	r3, r2, r4
 8007a5c:	3b15      	subs	r3, #21
 8007a5e:	f023 0303 	bic.w	r3, r3, #3
 8007a62:	3304      	adds	r3, #4
 8007a64:	f104 0715 	add.w	r7, r4, #21
 8007a68:	42ba      	cmp	r2, r7
 8007a6a:	bf38      	it	cc
 8007a6c:	2304      	movcc	r3, #4
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	9b02      	ldr	r3, [sp, #8]
 8007a72:	9103      	str	r1, [sp, #12]
 8007a74:	428b      	cmp	r3, r1
 8007a76:	d80c      	bhi.n	8007a92 <__multiply+0x9e>
 8007a78:	2e00      	cmp	r6, #0
 8007a7a:	dd03      	ble.n	8007a84 <__multiply+0x90>
 8007a7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d05b      	beq.n	8007b3c <__multiply+0x148>
 8007a84:	6106      	str	r6, [r0, #16]
 8007a86:	b005      	add	sp, #20
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	f843 2b04 	str.w	r2, [r3], #4
 8007a90:	e7d8      	b.n	8007a44 <__multiply+0x50>
 8007a92:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a96:	f1ba 0f00 	cmp.w	sl, #0
 8007a9a:	d024      	beq.n	8007ae6 <__multiply+0xf2>
 8007a9c:	f104 0e14 	add.w	lr, r4, #20
 8007aa0:	46a9      	mov	r9, r5
 8007aa2:	f04f 0c00 	mov.w	ip, #0
 8007aa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007aaa:	f8d9 3000 	ldr.w	r3, [r9]
 8007aae:	fa1f fb87 	uxth.w	fp, r7
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ab8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007abc:	f8d9 7000 	ldr.w	r7, [r9]
 8007ac0:	4463      	add	r3, ip
 8007ac2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ac6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007aca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ad4:	4572      	cmp	r2, lr
 8007ad6:	f849 3b04 	str.w	r3, [r9], #4
 8007ada:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ade:	d8e2      	bhi.n	8007aa6 <__multiply+0xb2>
 8007ae0:	9b01      	ldr	r3, [sp, #4]
 8007ae2:	f845 c003 	str.w	ip, [r5, r3]
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007aec:	3104      	adds	r1, #4
 8007aee:	f1b9 0f00 	cmp.w	r9, #0
 8007af2:	d021      	beq.n	8007b38 <__multiply+0x144>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	f104 0c14 	add.w	ip, r4, #20
 8007afa:	46ae      	mov	lr, r5
 8007afc:	f04f 0a00 	mov.w	sl, #0
 8007b00:	f8bc b000 	ldrh.w	fp, [ip]
 8007b04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b08:	fb09 770b 	mla	r7, r9, fp, r7
 8007b0c:	4457      	add	r7, sl
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b14:	f84e 3b04 	str.w	r3, [lr], #4
 8007b18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b20:	f8be 3000 	ldrh.w	r3, [lr]
 8007b24:	fb09 330a 	mla	r3, r9, sl, r3
 8007b28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b2c:	4562      	cmp	r2, ip
 8007b2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b32:	d8e5      	bhi.n	8007b00 <__multiply+0x10c>
 8007b34:	9f01      	ldr	r7, [sp, #4]
 8007b36:	51eb      	str	r3, [r5, r7]
 8007b38:	3504      	adds	r5, #4
 8007b3a:	e799      	b.n	8007a70 <__multiply+0x7c>
 8007b3c:	3e01      	subs	r6, #1
 8007b3e:	e79b      	b.n	8007a78 <__multiply+0x84>
 8007b40:	08008788 	.word	0x08008788
 8007b44:	08008799 	.word	0x08008799

08007b48 <__pow5mult>:
 8007b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b4c:	4615      	mov	r5, r2
 8007b4e:	f012 0203 	ands.w	r2, r2, #3
 8007b52:	4607      	mov	r7, r0
 8007b54:	460e      	mov	r6, r1
 8007b56:	d007      	beq.n	8007b68 <__pow5mult+0x20>
 8007b58:	4c25      	ldr	r4, [pc, #148]	@ (8007bf0 <__pow5mult+0xa8>)
 8007b5a:	3a01      	subs	r2, #1
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b62:	f7ff fe9f 	bl	80078a4 <__multadd>
 8007b66:	4606      	mov	r6, r0
 8007b68:	10ad      	asrs	r5, r5, #2
 8007b6a:	d03d      	beq.n	8007be8 <__pow5mult+0xa0>
 8007b6c:	69fc      	ldr	r4, [r7, #28]
 8007b6e:	b97c      	cbnz	r4, 8007b90 <__pow5mult+0x48>
 8007b70:	2010      	movs	r0, #16
 8007b72:	f7ff fd7f 	bl	8007674 <malloc>
 8007b76:	4602      	mov	r2, r0
 8007b78:	61f8      	str	r0, [r7, #28]
 8007b7a:	b928      	cbnz	r0, 8007b88 <__pow5mult+0x40>
 8007b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf4 <__pow5mult+0xac>)
 8007b7e:	481e      	ldr	r0, [pc, #120]	@ (8007bf8 <__pow5mult+0xb0>)
 8007b80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b84:	f000 fa78 	bl	8008078 <__assert_func>
 8007b88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b8c:	6004      	str	r4, [r0, #0]
 8007b8e:	60c4      	str	r4, [r0, #12]
 8007b90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b98:	b94c      	cbnz	r4, 8007bae <__pow5mult+0x66>
 8007b9a:	f240 2171 	movw	r1, #625	@ 0x271
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f7ff ff12 	bl	80079c8 <__i2b>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007baa:	4604      	mov	r4, r0
 8007bac:	6003      	str	r3, [r0, #0]
 8007bae:	f04f 0900 	mov.w	r9, #0
 8007bb2:	07eb      	lsls	r3, r5, #31
 8007bb4:	d50a      	bpl.n	8007bcc <__pow5mult+0x84>
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4622      	mov	r2, r4
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f7ff ff1a 	bl	80079f4 <__multiply>
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7ff fe4b 	bl	8007860 <_Bfree>
 8007bca:	4646      	mov	r6, r8
 8007bcc:	106d      	asrs	r5, r5, #1
 8007bce:	d00b      	beq.n	8007be8 <__pow5mult+0xa0>
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	b938      	cbnz	r0, 8007be4 <__pow5mult+0x9c>
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4638      	mov	r0, r7
 8007bda:	f7ff ff0b 	bl	80079f4 <__multiply>
 8007bde:	6020      	str	r0, [r4, #0]
 8007be0:	f8c0 9000 	str.w	r9, [r0]
 8007be4:	4604      	mov	r4, r0
 8007be6:	e7e4      	b.n	8007bb2 <__pow5mult+0x6a>
 8007be8:	4630      	mov	r0, r6
 8007bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bee:	bf00      	nop
 8007bf0:	080087f4 	.word	0x080087f4
 8007bf4:	08008719 	.word	0x08008719
 8007bf8:	08008799 	.word	0x08008799

08007bfc <__lshift>:
 8007bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	460c      	mov	r4, r1
 8007c02:	6849      	ldr	r1, [r1, #4]
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	4691      	mov	r9, r2
 8007c10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c14:	f108 0601 	add.w	r6, r8, #1
 8007c18:	42b3      	cmp	r3, r6
 8007c1a:	db0b      	blt.n	8007c34 <__lshift+0x38>
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	f7ff fddf 	bl	80077e0 <_Balloc>
 8007c22:	4605      	mov	r5, r0
 8007c24:	b948      	cbnz	r0, 8007c3a <__lshift+0x3e>
 8007c26:	4602      	mov	r2, r0
 8007c28:	4b28      	ldr	r3, [pc, #160]	@ (8007ccc <__lshift+0xd0>)
 8007c2a:	4829      	ldr	r0, [pc, #164]	@ (8007cd0 <__lshift+0xd4>)
 8007c2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c30:	f000 fa22 	bl	8008078 <__assert_func>
 8007c34:	3101      	adds	r1, #1
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	e7ee      	b.n	8007c18 <__lshift+0x1c>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f100 0114 	add.w	r1, r0, #20
 8007c40:	f100 0210 	add.w	r2, r0, #16
 8007c44:	4618      	mov	r0, r3
 8007c46:	4553      	cmp	r3, sl
 8007c48:	db33      	blt.n	8007cb2 <__lshift+0xb6>
 8007c4a:	6920      	ldr	r0, [r4, #16]
 8007c4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c50:	f104 0314 	add.w	r3, r4, #20
 8007c54:	f019 091f 	ands.w	r9, r9, #31
 8007c58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c60:	d02b      	beq.n	8007cba <__lshift+0xbe>
 8007c62:	f1c9 0e20 	rsb	lr, r9, #32
 8007c66:	468a      	mov	sl, r1
 8007c68:	2200      	movs	r2, #0
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	fa00 f009 	lsl.w	r0, r0, r9
 8007c70:	4310      	orrs	r0, r2
 8007c72:	f84a 0b04 	str.w	r0, [sl], #4
 8007c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7a:	459c      	cmp	ip, r3
 8007c7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c80:	d8f3      	bhi.n	8007c6a <__lshift+0x6e>
 8007c82:	ebac 0304 	sub.w	r3, ip, r4
 8007c86:	3b15      	subs	r3, #21
 8007c88:	f023 0303 	bic.w	r3, r3, #3
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	f104 0015 	add.w	r0, r4, #21
 8007c92:	4584      	cmp	ip, r0
 8007c94:	bf38      	it	cc
 8007c96:	2304      	movcc	r3, #4
 8007c98:	50ca      	str	r2, [r1, r3]
 8007c9a:	b10a      	cbz	r2, 8007ca0 <__lshift+0xa4>
 8007c9c:	f108 0602 	add.w	r6, r8, #2
 8007ca0:	3e01      	subs	r6, #1
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	612e      	str	r6, [r5, #16]
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	f7ff fdda 	bl	8007860 <_Bfree>
 8007cac:	4628      	mov	r0, r5
 8007cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	e7c5      	b.n	8007c46 <__lshift+0x4a>
 8007cba:	3904      	subs	r1, #4
 8007cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cc4:	459c      	cmp	ip, r3
 8007cc6:	d8f9      	bhi.n	8007cbc <__lshift+0xc0>
 8007cc8:	e7ea      	b.n	8007ca0 <__lshift+0xa4>
 8007cca:	bf00      	nop
 8007ccc:	08008788 	.word	0x08008788
 8007cd0:	08008799 	.word	0x08008799

08007cd4 <__mcmp>:
 8007cd4:	690a      	ldr	r2, [r1, #16]
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	6900      	ldr	r0, [r0, #16]
 8007cda:	1a80      	subs	r0, r0, r2
 8007cdc:	b530      	push	{r4, r5, lr}
 8007cde:	d10e      	bne.n	8007cfe <__mcmp+0x2a>
 8007ce0:	3314      	adds	r3, #20
 8007ce2:	3114      	adds	r1, #20
 8007ce4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ce8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cf4:	4295      	cmp	r5, r2
 8007cf6:	d003      	beq.n	8007d00 <__mcmp+0x2c>
 8007cf8:	d205      	bcs.n	8007d06 <__mcmp+0x32>
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfe:	bd30      	pop	{r4, r5, pc}
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	d3f3      	bcc.n	8007cec <__mcmp+0x18>
 8007d04:	e7fb      	b.n	8007cfe <__mcmp+0x2a>
 8007d06:	2001      	movs	r0, #1
 8007d08:	e7f9      	b.n	8007cfe <__mcmp+0x2a>
	...

08007d0c <__mdiff>:
 8007d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	4689      	mov	r9, r1
 8007d12:	4606      	mov	r6, r0
 8007d14:	4611      	mov	r1, r2
 8007d16:	4648      	mov	r0, r9
 8007d18:	4614      	mov	r4, r2
 8007d1a:	f7ff ffdb 	bl	8007cd4 <__mcmp>
 8007d1e:	1e05      	subs	r5, r0, #0
 8007d20:	d112      	bne.n	8007d48 <__mdiff+0x3c>
 8007d22:	4629      	mov	r1, r5
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7ff fd5b 	bl	80077e0 <_Balloc>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	b928      	cbnz	r0, 8007d3a <__mdiff+0x2e>
 8007d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e2c <__mdiff+0x120>)
 8007d30:	f240 2137 	movw	r1, #567	@ 0x237
 8007d34:	483e      	ldr	r0, [pc, #248]	@ (8007e30 <__mdiff+0x124>)
 8007d36:	f000 f99f 	bl	8008078 <__assert_func>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d40:	4610      	mov	r0, r2
 8007d42:	b003      	add	sp, #12
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	bfbc      	itt	lt
 8007d4a:	464b      	movlt	r3, r9
 8007d4c:	46a1      	movlt	r9, r4
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d54:	bfba      	itte	lt
 8007d56:	461c      	movlt	r4, r3
 8007d58:	2501      	movlt	r5, #1
 8007d5a:	2500      	movge	r5, #0
 8007d5c:	f7ff fd40 	bl	80077e0 <_Balloc>
 8007d60:	4602      	mov	r2, r0
 8007d62:	b918      	cbnz	r0, 8007d6c <__mdiff+0x60>
 8007d64:	4b31      	ldr	r3, [pc, #196]	@ (8007e2c <__mdiff+0x120>)
 8007d66:	f240 2145 	movw	r1, #581	@ 0x245
 8007d6a:	e7e3      	b.n	8007d34 <__mdiff+0x28>
 8007d6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d70:	6926      	ldr	r6, [r4, #16]
 8007d72:	60c5      	str	r5, [r0, #12]
 8007d74:	f109 0310 	add.w	r3, r9, #16
 8007d78:	f109 0514 	add.w	r5, r9, #20
 8007d7c:	f104 0e14 	add.w	lr, r4, #20
 8007d80:	f100 0b14 	add.w	fp, r0, #20
 8007d84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	46d9      	mov	r9, fp
 8007d90:	f04f 0c00 	mov.w	ip, #0
 8007d94:	9b01      	ldr	r3, [sp, #4]
 8007d96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	fa1f f38a 	uxth.w	r3, sl
 8007da4:	4619      	mov	r1, r3
 8007da6:	b283      	uxth	r3, r0
 8007da8:	1acb      	subs	r3, r1, r3
 8007daa:	0c00      	lsrs	r0, r0, #16
 8007dac:	4463      	add	r3, ip
 8007dae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007db2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007dbc:	4576      	cmp	r6, lr
 8007dbe:	f849 3b04 	str.w	r3, [r9], #4
 8007dc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dc6:	d8e5      	bhi.n	8007d94 <__mdiff+0x88>
 8007dc8:	1b33      	subs	r3, r6, r4
 8007dca:	3b15      	subs	r3, #21
 8007dcc:	f023 0303 	bic.w	r3, r3, #3
 8007dd0:	3415      	adds	r4, #21
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	42a6      	cmp	r6, r4
 8007dd6:	bf38      	it	cc
 8007dd8:	2304      	movcc	r3, #4
 8007dda:	441d      	add	r5, r3
 8007ddc:	445b      	add	r3, fp
 8007dde:	461e      	mov	r6, r3
 8007de0:	462c      	mov	r4, r5
 8007de2:	4544      	cmp	r4, r8
 8007de4:	d30e      	bcc.n	8007e04 <__mdiff+0xf8>
 8007de6:	f108 0103 	add.w	r1, r8, #3
 8007dea:	1b49      	subs	r1, r1, r5
 8007dec:	f021 0103 	bic.w	r1, r1, #3
 8007df0:	3d03      	subs	r5, #3
 8007df2:	45a8      	cmp	r8, r5
 8007df4:	bf38      	it	cc
 8007df6:	2100      	movcc	r1, #0
 8007df8:	440b      	add	r3, r1
 8007dfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dfe:	b191      	cbz	r1, 8007e26 <__mdiff+0x11a>
 8007e00:	6117      	str	r7, [r2, #16]
 8007e02:	e79d      	b.n	8007d40 <__mdiff+0x34>
 8007e04:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e08:	46e6      	mov	lr, ip
 8007e0a:	0c08      	lsrs	r0, r1, #16
 8007e0c:	fa1c fc81 	uxtah	ip, ip, r1
 8007e10:	4471      	add	r1, lr
 8007e12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e16:	b289      	uxth	r1, r1
 8007e18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e1c:	f846 1b04 	str.w	r1, [r6], #4
 8007e20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e24:	e7dd      	b.n	8007de2 <__mdiff+0xd6>
 8007e26:	3f01      	subs	r7, #1
 8007e28:	e7e7      	b.n	8007dfa <__mdiff+0xee>
 8007e2a:	bf00      	nop
 8007e2c:	08008788 	.word	0x08008788
 8007e30:	08008799 	.word	0x08008799

08007e34 <__d2b>:
 8007e34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e38:	460f      	mov	r7, r1
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	ec59 8b10 	vmov	r8, r9, d0
 8007e40:	4616      	mov	r6, r2
 8007e42:	f7ff fccd 	bl	80077e0 <_Balloc>
 8007e46:	4604      	mov	r4, r0
 8007e48:	b930      	cbnz	r0, 8007e58 <__d2b+0x24>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4b23      	ldr	r3, [pc, #140]	@ (8007edc <__d2b+0xa8>)
 8007e4e:	4824      	ldr	r0, [pc, #144]	@ (8007ee0 <__d2b+0xac>)
 8007e50:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e54:	f000 f910 	bl	8008078 <__assert_func>
 8007e58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e60:	b10d      	cbz	r5, 8007e66 <__d2b+0x32>
 8007e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	f1b8 0300 	subs.w	r3, r8, #0
 8007e6c:	d023      	beq.n	8007eb6 <__d2b+0x82>
 8007e6e:	4668      	mov	r0, sp
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	f7ff fd7c 	bl	800796e <__lo0bits>
 8007e76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e7a:	b1d0      	cbz	r0, 8007eb2 <__d2b+0x7e>
 8007e7c:	f1c0 0320 	rsb	r3, r0, #32
 8007e80:	fa02 f303 	lsl.w	r3, r2, r3
 8007e84:	430b      	orrs	r3, r1
 8007e86:	40c2      	lsrs	r2, r0
 8007e88:	6163      	str	r3, [r4, #20]
 8007e8a:	9201      	str	r2, [sp, #4]
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	61a3      	str	r3, [r4, #24]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	bf0c      	ite	eq
 8007e94:	2201      	moveq	r2, #1
 8007e96:	2202      	movne	r2, #2
 8007e98:	6122      	str	r2, [r4, #16]
 8007e9a:	b1a5      	cbz	r5, 8007ec6 <__d2b+0x92>
 8007e9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ea0:	4405      	add	r5, r0
 8007ea2:	603d      	str	r5, [r7, #0]
 8007ea4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ea8:	6030      	str	r0, [r6, #0]
 8007eaa:	4620      	mov	r0, r4
 8007eac:	b003      	add	sp, #12
 8007eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	6161      	str	r1, [r4, #20]
 8007eb4:	e7ea      	b.n	8007e8c <__d2b+0x58>
 8007eb6:	a801      	add	r0, sp, #4
 8007eb8:	f7ff fd59 	bl	800796e <__lo0bits>
 8007ebc:	9b01      	ldr	r3, [sp, #4]
 8007ebe:	6163      	str	r3, [r4, #20]
 8007ec0:	3020      	adds	r0, #32
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	e7e8      	b.n	8007e98 <__d2b+0x64>
 8007ec6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ece:	6038      	str	r0, [r7, #0]
 8007ed0:	6918      	ldr	r0, [r3, #16]
 8007ed2:	f7ff fd2d 	bl	8007930 <__hi0bits>
 8007ed6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eda:	e7e5      	b.n	8007ea8 <__d2b+0x74>
 8007edc:	08008788 	.word	0x08008788
 8007ee0:	08008799 	.word	0x08008799

08007ee4 <__sflush_r>:
 8007ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	0716      	lsls	r6, r2, #28
 8007eee:	4605      	mov	r5, r0
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	d454      	bmi.n	8007f9e <__sflush_r+0xba>
 8007ef4:	684b      	ldr	r3, [r1, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	dc02      	bgt.n	8007f00 <__sflush_r+0x1c>
 8007efa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd48      	ble.n	8007f92 <__sflush_r+0xae>
 8007f00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	d045      	beq.n	8007f92 <__sflush_r+0xae>
 8007f06:	2300      	movs	r3, #0
 8007f08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f0c:	682f      	ldr	r7, [r5, #0]
 8007f0e:	6a21      	ldr	r1, [r4, #32]
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	d030      	beq.n	8007f76 <__sflush_r+0x92>
 8007f14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	0759      	lsls	r1, r3, #29
 8007f1a:	d505      	bpl.n	8007f28 <__sflush_r+0x44>
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	1ad2      	subs	r2, r2, r3
 8007f20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f22:	b10b      	cbz	r3, 8007f28 <__sflush_r+0x44>
 8007f24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f26:	1ad2      	subs	r2, r2, r3
 8007f28:	2300      	movs	r3, #0
 8007f2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f2c:	6a21      	ldr	r1, [r4, #32]
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b0      	blx	r6
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	d106      	bne.n	8007f46 <__sflush_r+0x62>
 8007f38:	6829      	ldr	r1, [r5, #0]
 8007f3a:	291d      	cmp	r1, #29
 8007f3c:	d82b      	bhi.n	8007f96 <__sflush_r+0xb2>
 8007f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007fe8 <__sflush_r+0x104>)
 8007f40:	410a      	asrs	r2, r1
 8007f42:	07d6      	lsls	r6, r2, #31
 8007f44:	d427      	bmi.n	8007f96 <__sflush_r+0xb2>
 8007f46:	2200      	movs	r2, #0
 8007f48:	6062      	str	r2, [r4, #4]
 8007f4a:	04d9      	lsls	r1, r3, #19
 8007f4c:	6922      	ldr	r2, [r4, #16]
 8007f4e:	6022      	str	r2, [r4, #0]
 8007f50:	d504      	bpl.n	8007f5c <__sflush_r+0x78>
 8007f52:	1c42      	adds	r2, r0, #1
 8007f54:	d101      	bne.n	8007f5a <__sflush_r+0x76>
 8007f56:	682b      	ldr	r3, [r5, #0]
 8007f58:	b903      	cbnz	r3, 8007f5c <__sflush_r+0x78>
 8007f5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f5e:	602f      	str	r7, [r5, #0]
 8007f60:	b1b9      	cbz	r1, 8007f92 <__sflush_r+0xae>
 8007f62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f66:	4299      	cmp	r1, r3
 8007f68:	d002      	beq.n	8007f70 <__sflush_r+0x8c>
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f7ff fb38 	bl	80075e0 <_free_r>
 8007f70:	2300      	movs	r3, #0
 8007f72:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f74:	e00d      	b.n	8007f92 <__sflush_r+0xae>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b0      	blx	r6
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	1c50      	adds	r0, r2, #1
 8007f80:	d1c9      	bne.n	8007f16 <__sflush_r+0x32>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0c6      	beq.n	8007f16 <__sflush_r+0x32>
 8007f88:	2b1d      	cmp	r3, #29
 8007f8a:	d001      	beq.n	8007f90 <__sflush_r+0xac>
 8007f8c:	2b16      	cmp	r3, #22
 8007f8e:	d11e      	bne.n	8007fce <__sflush_r+0xea>
 8007f90:	602f      	str	r7, [r5, #0]
 8007f92:	2000      	movs	r0, #0
 8007f94:	e022      	b.n	8007fdc <__sflush_r+0xf8>
 8007f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f9a:	b21b      	sxth	r3, r3
 8007f9c:	e01b      	b.n	8007fd6 <__sflush_r+0xf2>
 8007f9e:	690f      	ldr	r7, [r1, #16]
 8007fa0:	2f00      	cmp	r7, #0
 8007fa2:	d0f6      	beq.n	8007f92 <__sflush_r+0xae>
 8007fa4:	0793      	lsls	r3, r2, #30
 8007fa6:	680e      	ldr	r6, [r1, #0]
 8007fa8:	bf08      	it	eq
 8007faa:	694b      	ldreq	r3, [r1, #20]
 8007fac:	600f      	str	r7, [r1, #0]
 8007fae:	bf18      	it	ne
 8007fb0:	2300      	movne	r3, #0
 8007fb2:	eba6 0807 	sub.w	r8, r6, r7
 8007fb6:	608b      	str	r3, [r1, #8]
 8007fb8:	f1b8 0f00 	cmp.w	r8, #0
 8007fbc:	dde9      	ble.n	8007f92 <__sflush_r+0xae>
 8007fbe:	6a21      	ldr	r1, [r4, #32]
 8007fc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007fc2:	4643      	mov	r3, r8
 8007fc4:	463a      	mov	r2, r7
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b0      	blx	r6
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	dc08      	bgt.n	8007fe0 <__sflush_r+0xfc>
 8007fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe0:	4407      	add	r7, r0
 8007fe2:	eba8 0800 	sub.w	r8, r8, r0
 8007fe6:	e7e7      	b.n	8007fb8 <__sflush_r+0xd4>
 8007fe8:	dfbffffe 	.word	0xdfbffffe

08007fec <_fflush_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	690b      	ldr	r3, [r1, #16]
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	b913      	cbnz	r3, 8007ffc <_fflush_r+0x10>
 8007ff6:	2500      	movs	r5, #0
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	b118      	cbz	r0, 8008006 <_fflush_r+0x1a>
 8007ffe:	6a03      	ldr	r3, [r0, #32]
 8008000:	b90b      	cbnz	r3, 8008006 <_fflush_r+0x1a>
 8008002:	f7fe fba7 	bl	8006754 <__sinit>
 8008006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f3      	beq.n	8007ff6 <_fflush_r+0xa>
 800800e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008010:	07d0      	lsls	r0, r2, #31
 8008012:	d404      	bmi.n	800801e <_fflush_r+0x32>
 8008014:	0599      	lsls	r1, r3, #22
 8008016:	d402      	bmi.n	800801e <_fflush_r+0x32>
 8008018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800801a:	f7fe fc92 	bl	8006942 <__retarget_lock_acquire_recursive>
 800801e:	4628      	mov	r0, r5
 8008020:	4621      	mov	r1, r4
 8008022:	f7ff ff5f 	bl	8007ee4 <__sflush_r>
 8008026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008028:	07da      	lsls	r2, r3, #31
 800802a:	4605      	mov	r5, r0
 800802c:	d4e4      	bmi.n	8007ff8 <_fflush_r+0xc>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	059b      	lsls	r3, r3, #22
 8008032:	d4e1      	bmi.n	8007ff8 <_fflush_r+0xc>
 8008034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008036:	f7fe fc85 	bl	8006944 <__retarget_lock_release_recursive>
 800803a:	e7dd      	b.n	8007ff8 <_fflush_r+0xc>

0800803c <_sbrk_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d06      	ldr	r5, [pc, #24]	@ (8008058 <_sbrk_r+0x1c>)
 8008040:	2300      	movs	r3, #0
 8008042:	4604      	mov	r4, r0
 8008044:	4608      	mov	r0, r1
 8008046:	602b      	str	r3, [r5, #0]
 8008048:	f7f9 fb2c 	bl	80016a4 <_sbrk>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d102      	bne.n	8008056 <_sbrk_r+0x1a>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	b103      	cbz	r3, 8008056 <_sbrk_r+0x1a>
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	200004f8 	.word	0x200004f8

0800805c <memcpy>:
 800805c:	440a      	add	r2, r1
 800805e:	4291      	cmp	r1, r2
 8008060:	f100 33ff 	add.w	r3, r0, #4294967295
 8008064:	d100      	bne.n	8008068 <memcpy+0xc>
 8008066:	4770      	bx	lr
 8008068:	b510      	push	{r4, lr}
 800806a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800806e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008072:	4291      	cmp	r1, r2
 8008074:	d1f9      	bne.n	800806a <memcpy+0xe>
 8008076:	bd10      	pop	{r4, pc}

08008078 <__assert_func>:
 8008078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800807a:	4614      	mov	r4, r2
 800807c:	461a      	mov	r2, r3
 800807e:	4b09      	ldr	r3, [pc, #36]	@ (80080a4 <__assert_func+0x2c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4605      	mov	r5, r0
 8008084:	68d8      	ldr	r0, [r3, #12]
 8008086:	b954      	cbnz	r4, 800809e <__assert_func+0x26>
 8008088:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <__assert_func+0x30>)
 800808a:	461c      	mov	r4, r3
 800808c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008090:	9100      	str	r1, [sp, #0]
 8008092:	462b      	mov	r3, r5
 8008094:	4905      	ldr	r1, [pc, #20]	@ (80080ac <__assert_func+0x34>)
 8008096:	f000 f841 	bl	800811c <fiprintf>
 800809a:	f000 f851 	bl	8008140 <abort>
 800809e:	4b04      	ldr	r3, [pc, #16]	@ (80080b0 <__assert_func+0x38>)
 80080a0:	e7f4      	b.n	800808c <__assert_func+0x14>
 80080a2:	bf00      	nop
 80080a4:	20000020 	.word	0x20000020
 80080a8:	08008935 	.word	0x08008935
 80080ac:	08008907 	.word	0x08008907
 80080b0:	080088fa 	.word	0x080088fa

080080b4 <_calloc_r>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	fba1 5402 	umull	r5, r4, r1, r2
 80080ba:	b93c      	cbnz	r4, 80080cc <_calloc_r+0x18>
 80080bc:	4629      	mov	r1, r5
 80080be:	f7ff fb03 	bl	80076c8 <_malloc_r>
 80080c2:	4606      	mov	r6, r0
 80080c4:	b928      	cbnz	r0, 80080d2 <_calloc_r+0x1e>
 80080c6:	2600      	movs	r6, #0
 80080c8:	4630      	mov	r0, r6
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	220c      	movs	r2, #12
 80080ce:	6002      	str	r2, [r0, #0]
 80080d0:	e7f9      	b.n	80080c6 <_calloc_r+0x12>
 80080d2:	462a      	mov	r2, r5
 80080d4:	4621      	mov	r1, r4
 80080d6:	f7fe fbb6 	bl	8006846 <memset>
 80080da:	e7f5      	b.n	80080c8 <_calloc_r+0x14>

080080dc <__ascii_mbtowc>:
 80080dc:	b082      	sub	sp, #8
 80080de:	b901      	cbnz	r1, 80080e2 <__ascii_mbtowc+0x6>
 80080e0:	a901      	add	r1, sp, #4
 80080e2:	b142      	cbz	r2, 80080f6 <__ascii_mbtowc+0x1a>
 80080e4:	b14b      	cbz	r3, 80080fa <__ascii_mbtowc+0x1e>
 80080e6:	7813      	ldrb	r3, [r2, #0]
 80080e8:	600b      	str	r3, [r1, #0]
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	1e10      	subs	r0, r2, #0
 80080ee:	bf18      	it	ne
 80080f0:	2001      	movne	r0, #1
 80080f2:	b002      	add	sp, #8
 80080f4:	4770      	bx	lr
 80080f6:	4610      	mov	r0, r2
 80080f8:	e7fb      	b.n	80080f2 <__ascii_mbtowc+0x16>
 80080fa:	f06f 0001 	mvn.w	r0, #1
 80080fe:	e7f8      	b.n	80080f2 <__ascii_mbtowc+0x16>

08008100 <__ascii_wctomb>:
 8008100:	4603      	mov	r3, r0
 8008102:	4608      	mov	r0, r1
 8008104:	b141      	cbz	r1, 8008118 <__ascii_wctomb+0x18>
 8008106:	2aff      	cmp	r2, #255	@ 0xff
 8008108:	d904      	bls.n	8008114 <__ascii_wctomb+0x14>
 800810a:	228a      	movs	r2, #138	@ 0x8a
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	f04f 30ff 	mov.w	r0, #4294967295
 8008112:	4770      	bx	lr
 8008114:	700a      	strb	r2, [r1, #0]
 8008116:	2001      	movs	r0, #1
 8008118:	4770      	bx	lr
	...

0800811c <fiprintf>:
 800811c:	b40e      	push	{r1, r2, r3}
 800811e:	b503      	push	{r0, r1, lr}
 8008120:	4601      	mov	r1, r0
 8008122:	ab03      	add	r3, sp, #12
 8008124:	4805      	ldr	r0, [pc, #20]	@ (800813c <fiprintf+0x20>)
 8008126:	f853 2b04 	ldr.w	r2, [r3], #4
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	f000 f837 	bl	80081a0 <_vfiprintf_r>
 8008132:	b002      	add	sp, #8
 8008134:	f85d eb04 	ldr.w	lr, [sp], #4
 8008138:	b003      	add	sp, #12
 800813a:	4770      	bx	lr
 800813c:	20000020 	.word	0x20000020

08008140 <abort>:
 8008140:	b508      	push	{r3, lr}
 8008142:	2006      	movs	r0, #6
 8008144:	f000 fa00 	bl	8008548 <raise>
 8008148:	2001      	movs	r0, #1
 800814a:	f7f9 fa33 	bl	80015b4 <_exit>

0800814e <__sfputc_r>:
 800814e:	6893      	ldr	r3, [r2, #8]
 8008150:	3b01      	subs	r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	b410      	push	{r4}
 8008156:	6093      	str	r3, [r2, #8]
 8008158:	da08      	bge.n	800816c <__sfputc_r+0x1e>
 800815a:	6994      	ldr	r4, [r2, #24]
 800815c:	42a3      	cmp	r3, r4
 800815e:	db01      	blt.n	8008164 <__sfputc_r+0x16>
 8008160:	290a      	cmp	r1, #10
 8008162:	d103      	bne.n	800816c <__sfputc_r+0x1e>
 8008164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008168:	f000 b932 	b.w	80083d0 <__swbuf_r>
 800816c:	6813      	ldr	r3, [r2, #0]
 800816e:	1c58      	adds	r0, r3, #1
 8008170:	6010      	str	r0, [r2, #0]
 8008172:	7019      	strb	r1, [r3, #0]
 8008174:	4608      	mov	r0, r1
 8008176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800817a:	4770      	bx	lr

0800817c <__sfputs_r>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	4614      	mov	r4, r2
 8008184:	18d5      	adds	r5, r2, r3
 8008186:	42ac      	cmp	r4, r5
 8008188:	d101      	bne.n	800818e <__sfputs_r+0x12>
 800818a:	2000      	movs	r0, #0
 800818c:	e007      	b.n	800819e <__sfputs_r+0x22>
 800818e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008192:	463a      	mov	r2, r7
 8008194:	4630      	mov	r0, r6
 8008196:	f7ff ffda 	bl	800814e <__sfputc_r>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	d1f3      	bne.n	8008186 <__sfputs_r+0xa>
 800819e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081a0 <_vfiprintf_r>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	460d      	mov	r5, r1
 80081a6:	b09d      	sub	sp, #116	@ 0x74
 80081a8:	4614      	mov	r4, r2
 80081aa:	4698      	mov	r8, r3
 80081ac:	4606      	mov	r6, r0
 80081ae:	b118      	cbz	r0, 80081b8 <_vfiprintf_r+0x18>
 80081b0:	6a03      	ldr	r3, [r0, #32]
 80081b2:	b90b      	cbnz	r3, 80081b8 <_vfiprintf_r+0x18>
 80081b4:	f7fe face 	bl	8006754 <__sinit>
 80081b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ba:	07d9      	lsls	r1, r3, #31
 80081bc:	d405      	bmi.n	80081ca <_vfiprintf_r+0x2a>
 80081be:	89ab      	ldrh	r3, [r5, #12]
 80081c0:	059a      	lsls	r2, r3, #22
 80081c2:	d402      	bmi.n	80081ca <_vfiprintf_r+0x2a>
 80081c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081c6:	f7fe fbbc 	bl	8006942 <__retarget_lock_acquire_recursive>
 80081ca:	89ab      	ldrh	r3, [r5, #12]
 80081cc:	071b      	lsls	r3, r3, #28
 80081ce:	d501      	bpl.n	80081d4 <_vfiprintf_r+0x34>
 80081d0:	692b      	ldr	r3, [r5, #16]
 80081d2:	b99b      	cbnz	r3, 80081fc <_vfiprintf_r+0x5c>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4630      	mov	r0, r6
 80081d8:	f000 f938 	bl	800844c <__swsetup_r>
 80081dc:	b170      	cbz	r0, 80081fc <_vfiprintf_r+0x5c>
 80081de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081e0:	07dc      	lsls	r4, r3, #31
 80081e2:	d504      	bpl.n	80081ee <_vfiprintf_r+0x4e>
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	b01d      	add	sp, #116	@ 0x74
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	89ab      	ldrh	r3, [r5, #12]
 80081f0:	0598      	lsls	r0, r3, #22
 80081f2:	d4f7      	bmi.n	80081e4 <_vfiprintf_r+0x44>
 80081f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081f6:	f7fe fba5 	bl	8006944 <__retarget_lock_release_recursive>
 80081fa:	e7f3      	b.n	80081e4 <_vfiprintf_r+0x44>
 80081fc:	2300      	movs	r3, #0
 80081fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008200:	2320      	movs	r3, #32
 8008202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008206:	f8cd 800c 	str.w	r8, [sp, #12]
 800820a:	2330      	movs	r3, #48	@ 0x30
 800820c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083bc <_vfiprintf_r+0x21c>
 8008210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008214:	f04f 0901 	mov.w	r9, #1
 8008218:	4623      	mov	r3, r4
 800821a:	469a      	mov	sl, r3
 800821c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008220:	b10a      	cbz	r2, 8008226 <_vfiprintf_r+0x86>
 8008222:	2a25      	cmp	r2, #37	@ 0x25
 8008224:	d1f9      	bne.n	800821a <_vfiprintf_r+0x7a>
 8008226:	ebba 0b04 	subs.w	fp, sl, r4
 800822a:	d00b      	beq.n	8008244 <_vfiprintf_r+0xa4>
 800822c:	465b      	mov	r3, fp
 800822e:	4622      	mov	r2, r4
 8008230:	4629      	mov	r1, r5
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff ffa2 	bl	800817c <__sfputs_r>
 8008238:	3001      	adds	r0, #1
 800823a:	f000 80a7 	beq.w	800838c <_vfiprintf_r+0x1ec>
 800823e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008240:	445a      	add	r2, fp
 8008242:	9209      	str	r2, [sp, #36]	@ 0x24
 8008244:	f89a 3000 	ldrb.w	r3, [sl]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 809f 	beq.w	800838c <_vfiprintf_r+0x1ec>
 800824e:	2300      	movs	r3, #0
 8008250:	f04f 32ff 	mov.w	r2, #4294967295
 8008254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008258:	f10a 0a01 	add.w	sl, sl, #1
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008264:	931a      	str	r3, [sp, #104]	@ 0x68
 8008266:	4654      	mov	r4, sl
 8008268:	2205      	movs	r2, #5
 800826a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826e:	4853      	ldr	r0, [pc, #332]	@ (80083bc <_vfiprintf_r+0x21c>)
 8008270:	f7f7 ffae 	bl	80001d0 <memchr>
 8008274:	9a04      	ldr	r2, [sp, #16]
 8008276:	b9d8      	cbnz	r0, 80082b0 <_vfiprintf_r+0x110>
 8008278:	06d1      	lsls	r1, r2, #27
 800827a:	bf44      	itt	mi
 800827c:	2320      	movmi	r3, #32
 800827e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008282:	0713      	lsls	r3, r2, #28
 8008284:	bf44      	itt	mi
 8008286:	232b      	movmi	r3, #43	@ 0x2b
 8008288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800828c:	f89a 3000 	ldrb.w	r3, [sl]
 8008290:	2b2a      	cmp	r3, #42	@ 0x2a
 8008292:	d015      	beq.n	80082c0 <_vfiprintf_r+0x120>
 8008294:	9a07      	ldr	r2, [sp, #28]
 8008296:	4654      	mov	r4, sl
 8008298:	2000      	movs	r0, #0
 800829a:	f04f 0c0a 	mov.w	ip, #10
 800829e:	4621      	mov	r1, r4
 80082a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a4:	3b30      	subs	r3, #48	@ 0x30
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	d94b      	bls.n	8008342 <_vfiprintf_r+0x1a2>
 80082aa:	b1b0      	cbz	r0, 80082da <_vfiprintf_r+0x13a>
 80082ac:	9207      	str	r2, [sp, #28]
 80082ae:	e014      	b.n	80082da <_vfiprintf_r+0x13a>
 80082b0:	eba0 0308 	sub.w	r3, r0, r8
 80082b4:	fa09 f303 	lsl.w	r3, r9, r3
 80082b8:	4313      	orrs	r3, r2
 80082ba:	9304      	str	r3, [sp, #16]
 80082bc:	46a2      	mov	sl, r4
 80082be:	e7d2      	b.n	8008266 <_vfiprintf_r+0xc6>
 80082c0:	9b03      	ldr	r3, [sp, #12]
 80082c2:	1d19      	adds	r1, r3, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	9103      	str	r1, [sp, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bfbb      	ittet	lt
 80082cc:	425b      	neglt	r3, r3
 80082ce:	f042 0202 	orrlt.w	r2, r2, #2
 80082d2:	9307      	strge	r3, [sp, #28]
 80082d4:	9307      	strlt	r3, [sp, #28]
 80082d6:	bfb8      	it	lt
 80082d8:	9204      	strlt	r2, [sp, #16]
 80082da:	7823      	ldrb	r3, [r4, #0]
 80082dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80082de:	d10a      	bne.n	80082f6 <_vfiprintf_r+0x156>
 80082e0:	7863      	ldrb	r3, [r4, #1]
 80082e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e4:	d132      	bne.n	800834c <_vfiprintf_r+0x1ac>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	1d1a      	adds	r2, r3, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	9203      	str	r2, [sp, #12]
 80082ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082f2:	3402      	adds	r4, #2
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083cc <_vfiprintf_r+0x22c>
 80082fa:	7821      	ldrb	r1, [r4, #0]
 80082fc:	2203      	movs	r2, #3
 80082fe:	4650      	mov	r0, sl
 8008300:	f7f7 ff66 	bl	80001d0 <memchr>
 8008304:	b138      	cbz	r0, 8008316 <_vfiprintf_r+0x176>
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	eba0 000a 	sub.w	r0, r0, sl
 800830c:	2240      	movs	r2, #64	@ 0x40
 800830e:	4082      	lsls	r2, r0
 8008310:	4313      	orrs	r3, r2
 8008312:	3401      	adds	r4, #1
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831a:	4829      	ldr	r0, [pc, #164]	@ (80083c0 <_vfiprintf_r+0x220>)
 800831c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008320:	2206      	movs	r2, #6
 8008322:	f7f7 ff55 	bl	80001d0 <memchr>
 8008326:	2800      	cmp	r0, #0
 8008328:	d03f      	beq.n	80083aa <_vfiprintf_r+0x20a>
 800832a:	4b26      	ldr	r3, [pc, #152]	@ (80083c4 <_vfiprintf_r+0x224>)
 800832c:	bb1b      	cbnz	r3, 8008376 <_vfiprintf_r+0x1d6>
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	3307      	adds	r3, #7
 8008332:	f023 0307 	bic.w	r3, r3, #7
 8008336:	3308      	adds	r3, #8
 8008338:	9303      	str	r3, [sp, #12]
 800833a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800833c:	443b      	add	r3, r7
 800833e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008340:	e76a      	b.n	8008218 <_vfiprintf_r+0x78>
 8008342:	fb0c 3202 	mla	r2, ip, r2, r3
 8008346:	460c      	mov	r4, r1
 8008348:	2001      	movs	r0, #1
 800834a:	e7a8      	b.n	800829e <_vfiprintf_r+0xfe>
 800834c:	2300      	movs	r3, #0
 800834e:	3401      	adds	r4, #1
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	4619      	mov	r1, r3
 8008354:	f04f 0c0a 	mov.w	ip, #10
 8008358:	4620      	mov	r0, r4
 800835a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800835e:	3a30      	subs	r2, #48	@ 0x30
 8008360:	2a09      	cmp	r2, #9
 8008362:	d903      	bls.n	800836c <_vfiprintf_r+0x1cc>
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0c6      	beq.n	80082f6 <_vfiprintf_r+0x156>
 8008368:	9105      	str	r1, [sp, #20]
 800836a:	e7c4      	b.n	80082f6 <_vfiprintf_r+0x156>
 800836c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008370:	4604      	mov	r4, r0
 8008372:	2301      	movs	r3, #1
 8008374:	e7f0      	b.n	8008358 <_vfiprintf_r+0x1b8>
 8008376:	ab03      	add	r3, sp, #12
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	462a      	mov	r2, r5
 800837c:	4b12      	ldr	r3, [pc, #72]	@ (80083c8 <_vfiprintf_r+0x228>)
 800837e:	a904      	add	r1, sp, #16
 8008380:	4630      	mov	r0, r6
 8008382:	f7fd fda3 	bl	8005ecc <_printf_float>
 8008386:	4607      	mov	r7, r0
 8008388:	1c78      	adds	r0, r7, #1
 800838a:	d1d6      	bne.n	800833a <_vfiprintf_r+0x19a>
 800838c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800838e:	07d9      	lsls	r1, r3, #31
 8008390:	d405      	bmi.n	800839e <_vfiprintf_r+0x1fe>
 8008392:	89ab      	ldrh	r3, [r5, #12]
 8008394:	059a      	lsls	r2, r3, #22
 8008396:	d402      	bmi.n	800839e <_vfiprintf_r+0x1fe>
 8008398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800839a:	f7fe fad3 	bl	8006944 <__retarget_lock_release_recursive>
 800839e:	89ab      	ldrh	r3, [r5, #12]
 80083a0:	065b      	lsls	r3, r3, #25
 80083a2:	f53f af1f 	bmi.w	80081e4 <_vfiprintf_r+0x44>
 80083a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083a8:	e71e      	b.n	80081e8 <_vfiprintf_r+0x48>
 80083aa:	ab03      	add	r3, sp, #12
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	462a      	mov	r2, r5
 80083b0:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <_vfiprintf_r+0x228>)
 80083b2:	a904      	add	r1, sp, #16
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7fe f821 	bl	80063fc <_printf_i>
 80083ba:	e7e4      	b.n	8008386 <_vfiprintf_r+0x1e6>
 80083bc:	08008a37 	.word	0x08008a37
 80083c0:	08008a41 	.word	0x08008a41
 80083c4:	08005ecd 	.word	0x08005ecd
 80083c8:	0800817d 	.word	0x0800817d
 80083cc:	08008a3d 	.word	0x08008a3d

080083d0 <__swbuf_r>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	460e      	mov	r6, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	4605      	mov	r5, r0
 80083d8:	b118      	cbz	r0, 80083e2 <__swbuf_r+0x12>
 80083da:	6a03      	ldr	r3, [r0, #32]
 80083dc:	b90b      	cbnz	r3, 80083e2 <__swbuf_r+0x12>
 80083de:	f7fe f9b9 	bl	8006754 <__sinit>
 80083e2:	69a3      	ldr	r3, [r4, #24]
 80083e4:	60a3      	str	r3, [r4, #8]
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	071a      	lsls	r2, r3, #28
 80083ea:	d501      	bpl.n	80083f0 <__swbuf_r+0x20>
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	b943      	cbnz	r3, 8008402 <__swbuf_r+0x32>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f82a 	bl	800844c <__swsetup_r>
 80083f8:	b118      	cbz	r0, 8008402 <__swbuf_r+0x32>
 80083fa:	f04f 37ff 	mov.w	r7, #4294967295
 80083fe:	4638      	mov	r0, r7
 8008400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	6922      	ldr	r2, [r4, #16]
 8008406:	1a98      	subs	r0, r3, r2
 8008408:	6963      	ldr	r3, [r4, #20]
 800840a:	b2f6      	uxtb	r6, r6
 800840c:	4283      	cmp	r3, r0
 800840e:	4637      	mov	r7, r6
 8008410:	dc05      	bgt.n	800841e <__swbuf_r+0x4e>
 8008412:	4621      	mov	r1, r4
 8008414:	4628      	mov	r0, r5
 8008416:	f7ff fde9 	bl	8007fec <_fflush_r>
 800841a:	2800      	cmp	r0, #0
 800841c:	d1ed      	bne.n	80083fa <__swbuf_r+0x2a>
 800841e:	68a3      	ldr	r3, [r4, #8]
 8008420:	3b01      	subs	r3, #1
 8008422:	60a3      	str	r3, [r4, #8]
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	6022      	str	r2, [r4, #0]
 800842a:	701e      	strb	r6, [r3, #0]
 800842c:	6962      	ldr	r2, [r4, #20]
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	429a      	cmp	r2, r3
 8008432:	d004      	beq.n	800843e <__swbuf_r+0x6e>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	07db      	lsls	r3, r3, #31
 8008438:	d5e1      	bpl.n	80083fe <__swbuf_r+0x2e>
 800843a:	2e0a      	cmp	r6, #10
 800843c:	d1df      	bne.n	80083fe <__swbuf_r+0x2e>
 800843e:	4621      	mov	r1, r4
 8008440:	4628      	mov	r0, r5
 8008442:	f7ff fdd3 	bl	8007fec <_fflush_r>
 8008446:	2800      	cmp	r0, #0
 8008448:	d0d9      	beq.n	80083fe <__swbuf_r+0x2e>
 800844a:	e7d6      	b.n	80083fa <__swbuf_r+0x2a>

0800844c <__swsetup_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4b29      	ldr	r3, [pc, #164]	@ (80084f4 <__swsetup_r+0xa8>)
 8008450:	4605      	mov	r5, r0
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	460c      	mov	r4, r1
 8008456:	b118      	cbz	r0, 8008460 <__swsetup_r+0x14>
 8008458:	6a03      	ldr	r3, [r0, #32]
 800845a:	b90b      	cbnz	r3, 8008460 <__swsetup_r+0x14>
 800845c:	f7fe f97a 	bl	8006754 <__sinit>
 8008460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008464:	0719      	lsls	r1, r3, #28
 8008466:	d422      	bmi.n	80084ae <__swsetup_r+0x62>
 8008468:	06da      	lsls	r2, r3, #27
 800846a:	d407      	bmi.n	800847c <__swsetup_r+0x30>
 800846c:	2209      	movs	r2, #9
 800846e:	602a      	str	r2, [r5, #0]
 8008470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	f04f 30ff 	mov.w	r0, #4294967295
 800847a:	e033      	b.n	80084e4 <__swsetup_r+0x98>
 800847c:	0758      	lsls	r0, r3, #29
 800847e:	d512      	bpl.n	80084a6 <__swsetup_r+0x5a>
 8008480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008482:	b141      	cbz	r1, 8008496 <__swsetup_r+0x4a>
 8008484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008488:	4299      	cmp	r1, r3
 800848a:	d002      	beq.n	8008492 <__swsetup_r+0x46>
 800848c:	4628      	mov	r0, r5
 800848e:	f7ff f8a7 	bl	80075e0 <_free_r>
 8008492:	2300      	movs	r3, #0
 8008494:	6363      	str	r3, [r4, #52]	@ 0x34
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800849c:	81a3      	strh	r3, [r4, #12]
 800849e:	2300      	movs	r3, #0
 80084a0:	6063      	str	r3, [r4, #4]
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	f043 0308 	orr.w	r3, r3, #8
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	b94b      	cbnz	r3, 80084c6 <__swsetup_r+0x7a>
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084bc:	d003      	beq.n	80084c6 <__swsetup_r+0x7a>
 80084be:	4621      	mov	r1, r4
 80084c0:	4628      	mov	r0, r5
 80084c2:	f000 f883 	bl	80085cc <__smakebuf_r>
 80084c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ca:	f013 0201 	ands.w	r2, r3, #1
 80084ce:	d00a      	beq.n	80084e6 <__swsetup_r+0x9a>
 80084d0:	2200      	movs	r2, #0
 80084d2:	60a2      	str	r2, [r4, #8]
 80084d4:	6962      	ldr	r2, [r4, #20]
 80084d6:	4252      	negs	r2, r2
 80084d8:	61a2      	str	r2, [r4, #24]
 80084da:	6922      	ldr	r2, [r4, #16]
 80084dc:	b942      	cbnz	r2, 80084f0 <__swsetup_r+0xa4>
 80084de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084e2:	d1c5      	bne.n	8008470 <__swsetup_r+0x24>
 80084e4:	bd38      	pop	{r3, r4, r5, pc}
 80084e6:	0799      	lsls	r1, r3, #30
 80084e8:	bf58      	it	pl
 80084ea:	6962      	ldrpl	r2, [r4, #20]
 80084ec:	60a2      	str	r2, [r4, #8]
 80084ee:	e7f4      	b.n	80084da <__swsetup_r+0x8e>
 80084f0:	2000      	movs	r0, #0
 80084f2:	e7f7      	b.n	80084e4 <__swsetup_r+0x98>
 80084f4:	20000020 	.word	0x20000020

080084f8 <_raise_r>:
 80084f8:	291f      	cmp	r1, #31
 80084fa:	b538      	push	{r3, r4, r5, lr}
 80084fc:	4605      	mov	r5, r0
 80084fe:	460c      	mov	r4, r1
 8008500:	d904      	bls.n	800850c <_raise_r+0x14>
 8008502:	2316      	movs	r3, #22
 8008504:	6003      	str	r3, [r0, #0]
 8008506:	f04f 30ff 	mov.w	r0, #4294967295
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800850e:	b112      	cbz	r2, 8008516 <_raise_r+0x1e>
 8008510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008514:	b94b      	cbnz	r3, 800852a <_raise_r+0x32>
 8008516:	4628      	mov	r0, r5
 8008518:	f000 f830 	bl	800857c <_getpid_r>
 800851c:	4622      	mov	r2, r4
 800851e:	4601      	mov	r1, r0
 8008520:	4628      	mov	r0, r5
 8008522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008526:	f000 b817 	b.w	8008558 <_kill_r>
 800852a:	2b01      	cmp	r3, #1
 800852c:	d00a      	beq.n	8008544 <_raise_r+0x4c>
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	d103      	bne.n	800853a <_raise_r+0x42>
 8008532:	2316      	movs	r3, #22
 8008534:	6003      	str	r3, [r0, #0]
 8008536:	2001      	movs	r0, #1
 8008538:	e7e7      	b.n	800850a <_raise_r+0x12>
 800853a:	2100      	movs	r1, #0
 800853c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008540:	4620      	mov	r0, r4
 8008542:	4798      	blx	r3
 8008544:	2000      	movs	r0, #0
 8008546:	e7e0      	b.n	800850a <_raise_r+0x12>

08008548 <raise>:
 8008548:	4b02      	ldr	r3, [pc, #8]	@ (8008554 <raise+0xc>)
 800854a:	4601      	mov	r1, r0
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	f7ff bfd3 	b.w	80084f8 <_raise_r>
 8008552:	bf00      	nop
 8008554:	20000020 	.word	0x20000020

08008558 <_kill_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4d07      	ldr	r5, [pc, #28]	@ (8008578 <_kill_r+0x20>)
 800855c:	2300      	movs	r3, #0
 800855e:	4604      	mov	r4, r0
 8008560:	4608      	mov	r0, r1
 8008562:	4611      	mov	r1, r2
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	f7f9 f815 	bl	8001594 <_kill>
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d102      	bne.n	8008574 <_kill_r+0x1c>
 800856e:	682b      	ldr	r3, [r5, #0]
 8008570:	b103      	cbz	r3, 8008574 <_kill_r+0x1c>
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	bd38      	pop	{r3, r4, r5, pc}
 8008576:	bf00      	nop
 8008578:	200004f8 	.word	0x200004f8

0800857c <_getpid_r>:
 800857c:	f7f9 b802 	b.w	8001584 <_getpid>

08008580 <__swhatbuf_r>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	460c      	mov	r4, r1
 8008584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008588:	2900      	cmp	r1, #0
 800858a:	b096      	sub	sp, #88	@ 0x58
 800858c:	4615      	mov	r5, r2
 800858e:	461e      	mov	r6, r3
 8008590:	da0d      	bge.n	80085ae <__swhatbuf_r+0x2e>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008598:	f04f 0100 	mov.w	r1, #0
 800859c:	bf14      	ite	ne
 800859e:	2340      	movne	r3, #64	@ 0x40
 80085a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085a4:	2000      	movs	r0, #0
 80085a6:	6031      	str	r1, [r6, #0]
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	b016      	add	sp, #88	@ 0x58
 80085ac:	bd70      	pop	{r4, r5, r6, pc}
 80085ae:	466a      	mov	r2, sp
 80085b0:	f000 f848 	bl	8008644 <_fstat_r>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	dbec      	blt.n	8008592 <__swhatbuf_r+0x12>
 80085b8:	9901      	ldr	r1, [sp, #4]
 80085ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085c2:	4259      	negs	r1, r3
 80085c4:	4159      	adcs	r1, r3
 80085c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085ca:	e7eb      	b.n	80085a4 <__swhatbuf_r+0x24>

080085cc <__smakebuf_r>:
 80085cc:	898b      	ldrh	r3, [r1, #12]
 80085ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d0:	079d      	lsls	r5, r3, #30
 80085d2:	4606      	mov	r6, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	d507      	bpl.n	80085e8 <__smakebuf_r+0x1c>
 80085d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	2301      	movs	r3, #1
 80085e2:	6163      	str	r3, [r4, #20]
 80085e4:	b003      	add	sp, #12
 80085e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e8:	ab01      	add	r3, sp, #4
 80085ea:	466a      	mov	r2, sp
 80085ec:	f7ff ffc8 	bl	8008580 <__swhatbuf_r>
 80085f0:	9f00      	ldr	r7, [sp, #0]
 80085f2:	4605      	mov	r5, r0
 80085f4:	4639      	mov	r1, r7
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7ff f866 	bl	80076c8 <_malloc_r>
 80085fc:	b948      	cbnz	r0, 8008612 <__smakebuf_r+0x46>
 80085fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008602:	059a      	lsls	r2, r3, #22
 8008604:	d4ee      	bmi.n	80085e4 <__smakebuf_r+0x18>
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	f043 0302 	orr.w	r3, r3, #2
 800860e:	81a3      	strh	r3, [r4, #12]
 8008610:	e7e2      	b.n	80085d8 <__smakebuf_r+0xc>
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	6020      	str	r0, [r4, #0]
 8008616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008622:	b15b      	cbz	r3, 800863c <__smakebuf_r+0x70>
 8008624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008628:	4630      	mov	r0, r6
 800862a:	f000 f81d 	bl	8008668 <_isatty_r>
 800862e:	b128      	cbz	r0, 800863c <__smakebuf_r+0x70>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	431d      	orrs	r5, r3
 8008640:	81a5      	strh	r5, [r4, #12]
 8008642:	e7cf      	b.n	80085e4 <__smakebuf_r+0x18>

08008644 <_fstat_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d07      	ldr	r5, [pc, #28]	@ (8008664 <_fstat_r+0x20>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	f7f8 ffff 	bl	8001654 <_fstat>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d102      	bne.n	8008660 <_fstat_r+0x1c>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	b103      	cbz	r3, 8008660 <_fstat_r+0x1c>
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	bd38      	pop	{r3, r4, r5, pc}
 8008662:	bf00      	nop
 8008664:	200004f8 	.word	0x200004f8

08008668 <_isatty_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d06      	ldr	r5, [pc, #24]	@ (8008684 <_isatty_r+0x1c>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	602b      	str	r3, [r5, #0]
 8008674:	f7f8 fffe 	bl	8001674 <_isatty>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_isatty_r+0x1a>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_isatty_r+0x1a>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	200004f8 	.word	0x200004f8

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
